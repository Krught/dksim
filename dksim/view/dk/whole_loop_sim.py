import random
from dksim.view.shared.white_attack import white_attack
from dksim.view.shared.fight_time_variance import time_variance_rolled
from dksim.view.shared.power_calc import power as runic_power
from dksim.view.shared.dot_timer import dot_timer
from dksim.view.dk.runes import rune_cd, check_rune, rune_grade_timer, all_rune_check, use_runes

from dksim.view.shared.attack_tables import spell_hit, spell_crit
from dksim.view.shared.attack_tables import melee_table as attack_table
from dksim.view.shared.damage_armor_reduc import dam_reduc
from dksim.view.dk.ghoul_attack_tables import ghoul_attack_table
from dksim.view.dk.icy_touch import icy_touch as icy_touch_cast
from dksim.view.dk.plague_strike import plague_strike as plague_strike_cast
from dksim.view.dk.pestilence import pestilence as pestilence_cast
from dksim.view.dk.frost_strike import frost_strike as frost_strike_cast
from dksim.view.dk.obliterate import obliterate as obliterate_cast
from dksim.view.dk.howling_blast import howling_blast as howling_blast_cast
from dksim.view.dk.blood_strike import blood_strike as blood_strike_cast
from dksim.view.dk.blood_boil import blood_boil as blood_boil_cast
from dksim.view.dk.death_coil import death_coil as death_coil_cast
from dksim.view.dk.scourge_strike import scourge_strike as scourge_strike_cast
from dksim.view.dk.death_and_decay import death_and_decay as death_and_decay_cast
from dksim.view.dk.gargoyle import gargoyle as gargoyle_cast
from dksim.view.shared.damage_array_updater import damage_array_updater

#from sims.dk.all_rune_check import rune_cd, check_rune, rune_grade_timer, all_rune_check, use_runes


def dkloopsim(H2, abominations_might_points, activity_percent, all_enchant, all_enchant_bonuses, all_socket, all_socket_bonuses, amount_of_sims,
        amount_of_talent_rows, amount_of_targets, annihilation_talent_points, army_active, army_time_random_value, attack_damage_normalization,
              attack_type, base_agility, base_armor, base_hp, base_intel, base_m_ap, base_parry_rating, base_race_stats, base_spirit, base_stamina, base_strength, berserking_start_time, black_ice_points,
              bladed_armor_points, blood, blood_boil_random_value, blood_gorged_points, blood_gorged_proc_rate, blood_of_the_north_points, blood_strike_random_value, blood_strikes_points,
              blood_talents, blood_talents_len, bloodcaked_blades_points, bloodfury_start_time, bloodlust_start_time, bloodworms_points,
              bloody_vengeance_points, bone_shield_bone_consumption_rate, bone_shield_points, c_gem_num, c_i_c_slot, chill_of_the_grave_points, corspe_explosion_points, crypt_fever_points,
              current_gem_check, current_i, current_sim_number, damage_result_number, dancing_rune_weapon_damage_multi, dancing_rune_weapon_points, dark_conviction_points,
              darkruned_battlegear_count, darkruned_battlegear_four_set, darkruned_battlegear_two_set, darkruned_plate_count, darkruned_plate_two_set, death, death_and_decay_cd_length,
              death_and_decay_force_cast, death_and_decay_skip, death_coil_cost, death_coil_random_value, death_f, death_rune_mastery_points, death_u, deathchill_points, desolation_points,
              dirge_points, disease_bonus_damage_amount, dk_presence, dk_spec, dot_length, dranei_in_party, ebon_plaguebringer_points, enchant_items_list, enchant_lookup_num, endless_winter_points, engi_gloves_enchant,
              epidemic_points, extra_armor_potion, extra_obli_damage, fight_length_variance,
              fight_sub_35percent, flask_of_endless_rage, food_blackened_dragonfin, food_dragonfin_filet, food_fish_feast, food_great_feast, food_hearty_rhino, food_mega_mammoth_meal, food_rhinolicious_wormsteak,
              food_snapper_extreme, food_spiced_worm_burger, food_very_burnt_worg, frost, frost_def_setup, frost_strike_cost, frost_strike_points, frost_talents, frost_talents_len, full_talent_list,
              fury_of_five_flights_using, gargoyle_stance_dance, gargoyle_use_timer, gcd, gear, gear_list, geard_gems, gears_agility, gears_agility_index, gears_armor, gears_armor_index,
              gears_armor_pen_rating, gears_armor_pen_rating_index, gears_attack_power_bonuses, gears_attack_power_bonuses_index, gears_crit_rating, gears_crit_rating_index, gears_defense_rating,
              gears_defense_rating_index, gears_dodge_rating, gears_dodge_rating_index, gears_expertise_rating, gears_expertise_rating_index, gears_haste_rating, gears_haste_rating_index, gears_hit_rating,
              gears_hit_rating_index, gears_intelligence, gears_intelligence_index, gears_parry_rating, gears_parry_rating_index, gears_spirit, gears_spirit_index, gears_stamina, gears_stamina_index, gears_strength,
              gears_strength_index, gem_agility, gem_armor_pen, gem_attack_power, gem_crit_rating, gem_data_edit, gem_defense_rating, gem_dodge_rating, gem_expertise_rating, gem_gear_to_check, gem_haste_rating,
              gem_hit_rating, gem_intelligence, gem_parry_rating, gem_resilience, gem_spell_pen, gem_spell_power, gem_spirit, gem_stamina, gem_strength, gem_to_check, gems_current, ghoul_active,
              ghoul_damage_random_value, ghoul_expertise, ghoul_frenzy_points, ghoul_hit, ghoul_life_length, ghoul_strength, glacier_rot_points, global_cd, glyph_dancing_rune_weapon,
              glyph_death_and_decay, glyph_death_coil, glyph_death_strike, glyph_frost_fever, glyph_frost_strike, glyph_ghoul, glyph_horn_of_winter, glyph_howling_blast, glyph_obliterate, glyph_of_bone_shield,
              glyph_pestilence_reset_diseases, glyph_plague_strike, glyph_rune_strike, glyph_scourge_strike, glyph_unholy_blight, glyphs, greater_gift_of_the_wild, guile_of_gorefiend_points, heart_strike_points,
              horn, horn_timer, howling_blast_points, howling_blast_random_value, hysteria_start_time, icy_talons_points, icy_touch_random_value, improved_death_strikes_points,
              improved_icy_talons_points, improved_icy_touch_points, improved_unholy_presence_points, impurity_points, increased_crit, increased_phy_crit, increased_spell_crit, increased_spell_damage,
              increased_spell_hit, input_back_enchant, input_boots_enchant, input_chest_enchant, input_gcd, input_gem1, input_gem10, input_gem11, input_gem12, input_gem13, input_gem14, input_gem15, input_gem16,
              input_gem17, input_gem18, input_gem19, input_gem2, input_gem20, input_gem21, input_gem22, input_gem23, input_gem24, input_gem25, input_gem26, input_gem27, input_gem28, input_gem29, input_gem3,
              input_gem30, input_gem31, input_gem32, input_gem33, input_gem34, input_gem35, input_gem36, input_gem37, input_gem38, input_gem39, input_gem4, input_gem40, input_gem41, input_gem42, input_gem43,
              input_gem44, input_gem45, input_gem46, input_gem47, input_gem48, input_gem49, input_gem5, input_gem50, input_gem51, input_gem52, input_gem53, input_gem54, input_gem55, input_gem56, input_gem57,
              input_gem58, input_gem59, input_gem6, input_gem60, input_gem61, input_gem62, input_gem63, input_gem64, input_gem7, input_gem8, input_gem9, input_gloves_enchant, input_head_enchant, input_legs_enchant,
              input_meta_gem1, input_mh_enchant, input_oh_enchant, input_pre_pot_potion, input_ring1_enchant, input_ring2_enchant, input_shoulder_enchant, input_socketbonus1, input_socketbonus10, input_socketbonus11,
              input_socketbonus12, input_socketbonus13, input_socketbonus14, input_socketbonus15, input_socketbonus16, input_socketbonus2, input_socketbonus3, input_socketbonus4, input_socketbonus5, input_socketbonus6,
              input_socketbonus7, input_socketbonus8, input_socketbonus9, input_wrist_enchant, item_back, item_boots, item_chest, item_gloves, item_head, item_legs, item_mh, item_neck, item_oh, item_ring1, item_ring2,
              item_shoulders, item_sigil, item_trinket1, item_trinket2, item_two_hand, item_waist, item_wrist, items, items_enchant_data, items_equipment_data, items_gems_data, items_mh_lowend, items_mh_speed,
              items_mh_topend, items_oh_lowend, items_oh_speed, items_oh_topend, items_setbonus_data, items_weapons_data, its, killing_machine_points, koltiras_battlegear_count, koltiras_plate_count, last_sim_run,
              length_of_fight, length_of_the_fight, length_of_the_fight_variance, local_testing, m_gem_data_loc, master_of_ghouls_points, max_runic, max_sim_num, melee_haste_bonus, melee_haste_bonus2,
              melee_haste_bonus3, merciless_combat_points, meta_as_bonus, mh_attacks_so_far, mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage, mh_input_weapon_speed, mh_wep_random_value,
              might_of_mograine_points, morbitity_points, my_own_current_armor, necrosis_points, nerves_of_cold_steel, night_of_the_dead_points, oh_attacks_so_far,
              oh_input_lowend_weapon_damage, oh_input_topend_weapon_damage, oh_input_weapon_speed, oh_wep_damage_mod, oh_wep_random_value, outbreak_points, personal_buff_hysteria,
              personal_buff_orc_blood_fury, personal_buff_orc_pet_damage, personal_buff_tricks_of_the_trade, personal_buff_troll_berserking_buff, pestilence_allow_reset, pestilence_random_value, pestilence_reset_window,
              possibly_glyphs, pot_of_speed, pot_of_speed_start_time, pot_of_wild_magic, pot_of_wild_magic_start_time, pre_input_gcd, pre_pot_potion, race_selection, rage_of_rivendale_points,
              raid_buff_abomination_rage, raid_buff_blood_frenzy, raid_buff_bloodlust, raid_buff_crypt_fever, raid_buff_curse_of_the_elements, raid_buff_curse_of_weakness, raid_buff_expose_armor,
              raid_buff_ferocius_inspiration, raid_buff_gift_of_the_wild, raid_buff_greater_blessing_of_kings, raid_buff_greater_blessing_of_might, raid_buff_heart_of_the_crusader, raid_buff_horn_of_winter,
              raid_buff_imp_faerie_fire, raid_buff_imp_greater_blessing_of_might, raid_buff_imp_moonkin_form, raid_buff_improved_icy_talons, raid_buff_improved_scorch, raid_buff_leader_of_the_pack,
              raid_buff_moonkin_aura, ravenous_dead_points, reaping_points, reg_gem_data_loc, rime_points, rune_of_cinderglacier,
              rune_of_cinderglacier_hand, rune_of_cinderglacier_hand_o, rune_of_lichbane, rune_of_lichbane_hand, rune_of_lichbane_hand_o, rune_of_razorice,
              rune_of_razorice_hand, rune_of_razorice_hand_o, rune_of_the_fallen_crusader, rune_of_the_fallen_crusader_hand, rune_of_the_fallen_crusader_hand_o,
              runic_power_mastery_points, scourge_strike_points, scourgeborne_battlegear_count, scourgeborne_battlegear_four_set, scourgeborne_battlegear_two_set, scourgeborne_plate_count,
              scourgeborne_plate_two_set, scourgelords_battlegear_count, scourgelords_battlegear_four_set, scourgelords_battlegear_two_set, scourgelords_plate_count, scourgelords_plate_two_set,
              shattering_throw_armor_reduc_amount, shattering_throw_time, sigil_of_awareness, sigil_of_hanged_man, sigil_of_haunted_dreams, sigil_of_strife, sigil_of_strife_amount, sigil_of_the_frozen_conscience,
              sigil_of_the_wild_buck, sigil_of_vengeful_heart, sigil_of_virulence, skip_disease, skip_erw, skip_ua, socket_items_list, socket_lookup_num, split_gylphs,
              split_talents, standard_10k_random_value, standard_random_value, start_increased_all_damage, start_increased_physical_damage, subversion_points, sudden_doom_points,
              summon_gargoyle_points, sword_berserking_enchant,
              sword_berserking_enchant_hand, sword_berserking_enchant_hand_o, swordguard_enchant, t9_dps_four_set, t9_dps_two_set, t9_tank_four_set, t9_tank_two_set, talent_url, tanking,
              target_armor, target_current_armor, target_level, thassarians_battlegear_count, thassarians_plate_count, the_input_abominations_might_buff, the_input_berserking_buff,
              the_input_berserking_buff_timer, the_input_blood_frenzy_buff, the_input_blood_fury_buff, the_input_blood_fury_buff_timer, the_input_curse_of_the_elements_debuff, the_input_curse_of_weakness_debuff,
              the_input_dk_presence, the_input_dk_spec, the_input_draenei_buff, the_input_expose_armor_debuff, the_input_flask, the_input_food_selection, the_input_gift_of_the_wild_buff,
              the_input_greater_blessing_of_kings_buff, the_input_greater_blessing_of_might_buff, the_input_heart_of_the_crusader_buff, the_input_heroism_buff, the_input_herosim_buff_timer,
              the_input_horn_of_winter_buff, the_input_imp_blessing_of_might_buff, the_input_imp_faerie_fire_debuff, the_input_imp_icy_talons_buff, the_input_imp_moonkin_form_buff, the_input_imp_scorch_buff,
              the_input_leader_of_the_pack_buff, the_input_moonkin_aura_buff, the_input_potion, the_input_potion_timer, the_input_race_selection, the_input_sanctified_retribution_buff,
              the_input_tricks_of_the_trade_buff, the_input_tricks_of_the_trade_buff_timer, the_input_unholy_frenzy_buff, the_input_unholy_frenzy_buff_timer, the_pestilence_reset_timer,
              the_precast_horn_time, the_target_armor, the_target_level, the_total_fight_under_35, threat_of_thassarian_points, tier_bonus_item_list, top_agi, top_ap, top_armor, top_armor_pen_rating,
              top_crit_rating, top_defense_rating, top_dodge_rating, top_expertise_rating, top_haste_rating, top_hit_rating, top_intel, top_parry_rating, top_spirit, top_stam, top_str,
              total_gylph_check, total_number_of_targets, total_simulation_amounts,
              toughness_points, tricks_start_time, trinket1_bonus_amount, trinket1_bonus_type, trinket1_chanceon, trinket1_chanceperc, trinket1_icd, trinket1_length,
              trinket1_max_damage, trinket1_min_damage, trinket1_type, trinket2_bonus_amount, trinket2_bonus_type, trinket2_chanceon, trinket2_chanceperc, trinket2_icd,
              trinket2_length, trinket2_max_damage, trinket2_min_damage, trinket2_type, trinket_1_use, trinket_2_use, trinket_bonus_amount_index, trinket_bonus_type_index, trinket_chanceon_index,
              trinket_chanceperc_index, trinket_icd_index, trinket_length_index, trinket_max_damage_index, trinket_min_damage_index, trinket_type_index, tundra_stalker_points,
              two_handed_weapon_blood_points, unable_to_do_anything, unbreak_armor_bone_shield_vamp_blood_cd_time, unbreakable_armor_points, unholy,
              unholy_blight_points, unholy_talents, unholy_talents_len, use_army, use_blood_strike_over_blood_boil, use_ghoul,
              use_obliterate_over_howling_blast, use_shattering_throw, use_trinket_index, using_glyphs, var_crit_amount, veteran_of_the_third_war_points, vicious_strikes_points, virtulence_points,
               wandering_plague_points, weapon_list, weapons, weapons_item_slot, weapons_item_slot_index, weapons_max_damage, weapons_max_damage_index, weapons_min_damage,
              weapons_min_damage_index, weapons_speed, weapons_speed_index, weapons_type, weapons_type_index, trinket1_random_value, trinket2_random_value, bone_shield_start_random_value, gargoyle_random_value):
    sum_mh_white_attacks_list = []
    sum_oh_white_attacks_list = []
    sum_damage_list = []
    sum_dps_list = []
    mh_white_attack_values = []
    oh_white_attack_values = []
    sum_ps_attacks_list = []
    sum_it_attacks_list = []
    sum_pest_attacks_list = []
    sum_obil_attacks_list = []
    sum_bs_attacks_list = []
    sum_fs_attacks_list = []
    sum_dot0_damage_list = []
    sum_dot1_damage_list = []
    sum_hb_attacks_list = []
    sum_oh_obil_attacks_list = []
    sum_oh_ps_attacks_list = []
    sum_oh_bs_attacks_list = []
    sum_oh_fs_attacks_list = []
    rune_of_razorice_damage_list = []
    rune_of_lichbane_damage_list = []
    rune_of_cinderglacier_damage_list = []
    trinket1_damage_list = []
    trinket2_damage_list = []
    bloodcaked_blades_damage_list = []
    wandering_plague_damage_list = []
    necrosis_damage_list = []
    dancing_rune_weapon_damage_list = []
    sudden_doom_damage_list = []
    unholy_blight_damage_list = []
    blood_boil_damage_list = []
    death_and_decay_damage_list = []
    death_coil_damage_list = []
    sum_scourge_strikes_attacks_list = []
    sum_death_strike_attacks_list = []
    sum_heart_strike_attacks_list = []
    garg_damage_list = []
    ghoul_damage_list = []
    ghoul_damage_claw_list = []
    army_damage_list = []
    army_damage_claw_list = []
    
    # import time
    # from datetime import datetime
    # last_time = datetime.now()
    # max_dif = 0
    # all_load_times = []
    for item in range(amount_of_sims):
        # readable_time = (datetime.now() - last_time).total_seconds() * 1000
        # last_time = datetime.now()
        # all_load_times.append(readable_time)
        # print(f"Readable time: {readable_time} - Mili Sec")
        # if readable_time > max_dif:
        #     max_dif = readable_time
        # if item == max_sim_num:
        #     print(f"Max load time: {max_dif}")
        #     print(f"Avg load time: {sum(all_load_times)/amount_of_sims}")
        

        if item == max_sim_num:
            last_sim_run = True
        fight_length, damage_result_number = time_variance_rolled(fight_length_variance, length_of_fight,
                                                                  standard_10k_random_value, damage_result_number)
        if activity_percent != 1:
            inactive_time = fight_length * (1 - activity_percent)
            gcd = pre_input_gcd + (inactive_time / fight_length)
        else:
            gcd = pre_input_gcd
        input_gcd = gcd
        sum_mh_white_attacks = 0
        trinket1_amount = 0
        trinket2_amount = 0
        trinket1_use_icd = 0
        trinket1_buff_time = 0
        trinket2_use_icd = 0
        trinket2_buff_time = 0
        trinket1_used = False
        trinket2_used = False
        trinket1_damage = 0
        trinket2_damage = 0
        trinket_hit_crit_tracker = 0
        howling_current_cd = 0
        rime_procd = False
        rotation = []
        rotation_time = []
        rotation_damage = []
        rotation_status = []
        rime_timer = 0
        sum_oh_white_attacks = 0
        sum_ps_attacks = 0
        sum_it_attacks = 0
        sum_pest_attacks = 0
        sum_obil_attacks = 0
        sum_bs_attacks = 0
        sum_fs_attacks = 0
        sum_hb_attacks = 0
        sum_dot0_damage = 0
        sum_dot1_damage = 0
        last_dot0_damage = 0
        last_dot1_damage = 0
        last_dot2_damage = 0
        rune_cd_tracker = [0, 0, 0, 0, 0, 0, 10000, 10000, 10000, 10000, 10000, 10000]
        bloodlust_used = False
        bloodlust_end = False
        berserking_used = False
        berserking_start_time_cd = berserking_start_time
        bloodfury_used = False
        bloodfury_start_time_cd = bloodfury_start_time
        hysteria_used = False
        hysteria_active = False
        hysteria_end = False
        tricksoftt_used = False
        tricksoftt_active = False
        tricksoftt_end = False
        pot_of_speed_used = False
        pot_of_speed_active = False
        pot_of_speed_end = False
        pot_of_wild_magic_used = False
        pot_of_wild_magic_active = False
        pot_of_wild_magic_end = False
        km_procd = False
        ua_cd_timer = 0
        erw_cd_timer = 0
        ua_buff_timer = 0
        ua_strength_increase_amount = 0
        ua_used = False
        dots = [0, 0, 0]  # Dots 0 = Frost Fever.  1 = Blood Plague, 2 = Crypt Fever
        current_time = 0
        current_power = 10
        last_mh_attack_time = 0
        last_oh_attack_time = 0
        meta_as_bonus_active = False
        meta_as_bonus_cd = 0
        meta_as_bonus_active_time = 0
        how_cd = (horn - horn_timer) + 20
        deathchill_cd = 0
        deathchill_active = False
        deathchill_timer = 0
        use_death_rune = False
        blood_tap_cd = 0
        sum_oh_obil_attacks = 0
        sum_oh_ps_attacks = 0
        sum_oh_bs_attacks = 0
        sum_oh_fs_attacks = 0
        engi_gloves_enchant_cd = 0
        engi_gloves_enchant_active_timer = 0
        engi_gloves_buff_active = False
        swordguard_enchant_cd = 0
        swordguard_enchant_active_timer = 0
        swordguard_buff_active = False
        berskering_enchant_cd = 0
        berskering_enchant_active_timer = 0
        berskering_buff_active = False
        runeofthefallencrusader_buff_active = False
        runeofthefallencrusdaer_active_cd = 0
        rune_of_razorice_damage = 0
        rune_of_lichbane_damage = 0
        rune_of_cinderglacier_active = False
        rune_of_cinderglacier_active_count = 0
        rune_of_cinderglacier_damage = 0
        sigil_of_strife_timer = 0
        sigil_of_strife_active = False
        sigil_of_haunted_dreams_buff = False
        sigil_of_haunted_dreams_timer = 0
        sigil_of_virulence_buff = False
        sigil_of_virulence_timer = 0
        sigil_of_hanged_man_buff = False
        sigil_of_hanged_man_timer = 0
        sigil_of_hanged_man_count = 0
        necrosis_damage = 0
        skip_castable = 0
        t9_bonus = False
        t9_cd_timer = 0
        t9_active_timer = 0
        t10_4set_dps_buff = False
        t10_4set_dps_buff_timer = 0
        bloodcaked_blades_damage = 0
        desolation_buff = False
        desolation_buff_timer = 0
        wandering_plague_damage = 0
        blood_gorged_active = False
        bloody_vengeance_stacks = 0
        bloody_vengeance_timer = 0
        bone_shield_active = False
        bone_shield_buff_applied = False
        bone_shield_cd = 0
        bone_shield_length = 0
        bone_shield_stacks = 0
        bone_shield_last_damage = 0
        dancing_rune_weapon_damage = 0
        dancing_rune_weapon_active = False
        dancing_rune_weapon_length = 0
        dancing_rune_weapon_cd = 0
        sudden_doom_damage = 0
        unholy_blight_damage = 0
        unholy_blight_timer = 0
        unholy_blight_amount = 0
        multiple_adds_timer = 0
        multiple_adds_timer_bp = 0
        blood_boil_damage = 0
        death_and_decay_cd = 0
        death_and_decay_last_damage_time = 0
        death_and_decay_damage = 0
        death_coil_damage = 0
        sum_scourge_strikes_attacks = 0
        sum_death_strike_attacks = 0
        sum_heart_strike_attacks = 0
        gargoyle_cd = 0
        garg_ap = 0
        garg_haste = 0
        garg_damage = 0
        ghoul_cd = 180
        last_ghoul_attack = 0
        ghoul_attack_tracker = 0
        ghoul_damage = 0
        ghoul_damage_claw = 0
        ghoul_frenzy_buff_timer = 0
        ghoul_leader_crit = 0
        army_damage = 0
        army_damage_claw = 0
        army_attack_tracker = 0
        ghoul_energy = 100
        ghoul_last_energy_tick = 0
        melee_haste_bonus3 = 0
        fury_of_five_flights_stacks = 0
        fury_of_five_flights_timer = 0
        melee_haste_bonus3 = 0
        melee_haste_bonus4 = 0
        rune_0_tracker = []
        rune_1_tracker = []
        rune_2_tracker = []
        rune_3_tracker = []
        rune_4_tracker = []
        rune_5_tracker = []
        rune_6_tracker = []
        rune_7_tracker = []
        rune_8_tracker = []
        rune_9_tracker = []
        rune_10_tracker = []
        rune_11_tracker = []
        rune_time_tracker = []
        runic_power_tracker = []
        increased_all_damage = start_increased_all_damage
        increased_physical_damage = start_increased_physical_damage
        used_gcd = False
        bonus_loop_expertise_rating = 0
        bonus_loop_armor_pen_rating = 0
        bonus_loop_crit_rating = 0
        bonus_loop_agility = 0
        bonus_loop_hit = 0
        bonus_loop_hp = 0
        bonus_loop_ap = 0
        bonus_loop_haste_rating = 0
        bonus_loop_str = 0
        bonus_loop_stam = 0
        hit_from_other = 0
        ghoul_buffs_t = 0
        used_shattering = False
        shattering_used_at_time = 0
        shattering_throw_end = False
        removed_extra_armor = False
        below_my_own_current_armor = 0
        current_armor = target_current_armor
        death_n_decay_apply_time = -1
        garg_summon_time = 0
        garg_last_damage_cast = 0
        gary_active = False
        used_army = False
        casted_army_time = 0
        cast_army = False
        cast_army_timer = 0
        only_one_army = 0
        if bone_shield_points == 1:
            bone_shield_active = True
            bone_shield_length = random.randint(200, 290)
            # bone_shield_length = bone_shield_start_random_value[damage_result_number]
            damage_result_number = damage_array_updater(damage_result_number)
        if pre_pot_potion == True:
            if pot_of_speed == True:
                if pot_of_speed_start_time < 60:
                    pot_of_speed_start_time += 60
                bonus_loop_haste_rating += 500
                pre_pot_potion_used = True
            elif pot_of_wild_magic == True:
                if pot_of_wild_magic_start_time < 60:
                    pot_of_wild_magic_start_time += 60
                bonus_loop_crit_rating += 200
                pre_pot_potion_used = True
        # Actual Start of Sim
        while current_time < fight_length:
            damage_result_number = damage_array_updater(damage_result_number)
            last_rune_change = rune_cd_tracker
            just_used_death_rune = False
            use_death_rune = False
            if last_sim_run == True:
                if used_gcd == True:
                    rune_0_tracker.append(rune_cd_tracker[0])
                    rune_1_tracker.append(rune_cd_tracker[1])
                    rune_2_tracker.append(rune_cd_tracker[2])
                    rune_3_tracker.append(rune_cd_tracker[3])
                    rune_4_tracker.append(rune_cd_tracker[4])
                    rune_5_tracker.append(rune_cd_tracker[5])
                    rune_6_tracker.append(rune_cd_tracker[6])
                    rune_7_tracker.append(rune_cd_tracker[7])
                    rune_8_tracker.append(rune_cd_tracker[8])
                    rune_9_tracker.append(rune_cd_tracker[9])
                    rune_10_tracker.append(rune_cd_tracker[10])
                    rune_11_tracker.append(rune_cd_tracker[11])
                    rune_time_tracker.append(current_time - gcd)
                    runic_power_tracker.append(current_power)
                rune_0_tracker.append(rune_cd_tracker[0])
                rune_1_tracker.append(rune_cd_tracker[1])
                rune_2_tracker.append(rune_cd_tracker[2])
                rune_3_tracker.append(rune_cd_tracker[3])
                rune_4_tracker.append(rune_cd_tracker[4])
                rune_5_tracker.append(rune_cd_tracker[5])
                rune_6_tracker.append(rune_cd_tracker[6])
                rune_7_tracker.append(rune_cd_tracker[7])
                rune_8_tracker.append(rune_cd_tracker[8])
                rune_9_tracker.append(rune_cd_tracker[9])
                rune_10_tracker.append(rune_cd_tracker[10])
                rune_11_tracker.append(rune_cd_tracker[11])
                rune_time_tracker.append(current_time)
                runic_power_tracker.append(current_power)
                used_gcd = False

            # Armor Pen Area
            armor_penetration = (top_armor_pen_rating + bonus_loop_armor_pen_rating / 7) * 0.5
            if blood_gorged_points != 0:
                armor_penetration += blood_gorged_points * 2
            # Strength Percentage Area
            strtoap = top_str + bonus_loop_str
            expertise_rating = top_expertise_rating + bonus_loop_expertise_rating
            total_crit_strike = top_crit_rating + bonus_loop_crit_rating
            total_stam = top_stam + bonus_loop_stam
            total_agi = top_agi + base_agility + bonus_loop_agility

            total_haste_rating = top_haste_rating + bonus_loop_haste_rating

            if veteran_of_the_third_war_points != 0:
                strtoap += strtoap * ((veteran_of_the_third_war_points * 2) / 100)
                expertise_rating += ((veteran_of_the_third_war_points * 2) * 7.9)
                total_stam += total_stam * (veteran_of_the_third_war_points / 100)
            if ravenous_dead_points != 0:
                strtoap += strtoap * (ravenous_dead_points / 100)
            if abominations_might_points != 0:
                strtoap += (strtoap * (abominations_might_points / 100))
            if abominations_might_points == 2:
                raid_buff_abomination_rage = True
                strtoap += strtoap * .02
            if greater_gift_of_the_wild == True:
                strtoap = strtoap + (strtoap * .02)
                total_agi += (total_agi * .02)
                total_stam += (total_stam * .02)
                # items_intelligence = items_intelligence + (items_intelligence * .02)
                # items_spirit = items_spirit + (items_spirit * .02)
            if raid_buff_greater_blessing_of_kings == True:
                strtoap = strtoap + (strtoap * .1)
                total_agi += (total_agi * .1)
                total_stam += (total_stam * .1)
                # items_intelligence = items_intelligence + (items_intelligence * .1)
                # items_spirit = items_spirit + (items_spirit * .1)
            if endless_winter_points == 2:
                strtoap = strtoap + (strtoap * .04)
            elif endless_winter_points == 1:
                strtoap = strtoap + (strtoap * .02)

            current_ap = (strtoap * 2) + top_ap + bonus_loop_ap
            if abominations_might_points == 1:
                if raid_buff_abomination_rage == False:
                    current_ap += current_ap * .05
            if raid_buff_abomination_rage == True:
                current_ap += current_ap * .1
            if raid_buff_greater_blessing_of_might == True:
                current_ap += 550
            if raid_buff_imp_greater_blessing_of_might == True:
                current_ap += (550 * .25)

            if removed_extra_armor == False:
                if extra_armor_potion == True:
                    if pre_pot_potion == True:
                        if current_time > 60:
                            below_my_own_current_armor -= 3500
                            removed_extra_armor = True
                    else:
                        if current_time > 120:
                            below_my_own_current_armor -= 3500
                            removed_extra_armor = True

            if bladed_armor_points != 0:
                current_ap += ((my_own_current_armor + below_my_own_current_armor) / 180) * bladed_armor_points

            # Expertise Area
            if rage_of_rivendale_points != 0:
                expertise_rating += (rage_of_rivendale_points * 7.9)
            # Race Selection extra expertise bonuses
            if race_selection == 0:
                if weapons_type[0] == 'sword':
                    expertise_rating += 3 * 7.9
                elif weapons_type[0] == 'mace':
                    expertise_rating += 3 * 7.9
            if race_selection == 1:
                if weapons_type[0] == 'mace':
                    expertise_rating += 5 * 7.9
            if race_selection == 5:
                if weapons_type[0] == 'axe':
                    expertise_rating += 5 * 7.9
            # Expertise from Tundra Stalker
            if tundra_stalker_points != 0:
                expertise_rating += tundra_stalker_points * 7.9
            # Expertise Math
            total_expertise_rating = expertise_rating
            total_expertise = total_expertise_rating / 7.9
            if round(total_expertise) > total_expertise:
                total_expertise = round(total_expertise) - 1
            elif round(total_expertise) <= total_expertise:
                total_expertise = round(total_expertise)
            all_expertise = total_expertise
            if all_expertise * .25 > 6.5:
                all_expertise_dodge = 6.5
            elif all_expertise * .25 <= 6.5:
                all_expertise_dodge = all_expertise
            all_expertise_parry = all_expertise
            if all_expertise * .25 > 14.0:
                all_expertise_parry = 14.0
            elif all_expertise * .25 <= 14.0:
                all_expertise_parry = all_expertise

            # Crit Strike Math
            if dark_conviction_points != 0:
                total_crit_strike += dark_conviction_points * 45.8
            if ebon_plaguebringer_points != 0:
                total_crit_strike += ebon_plaguebringer_points * 45.8
            total_crit = (((total_agi / 62.5) + 3.188 + (total_crit_strike / 45.8)) / 100) + increased_crit

            total_hp = (total_stam * 10) + base_hp + bonus_loop_hp

            hit_from_gear = top_hit_rating + bonus_loop_hit
            spell_magic_hit = 0
            if virtulence_points != 0:
                spell_magic_hit += (virtulence_points * 32.789)
            spell_hit_total = hit_from_gear + hit_from_other + spell_magic_hit
            if item_two_hand == False:
                if nerves_of_cold_steel != 0:
                    spell_hit_total -= (32.789 * nerves_of_cold_steel)

            if use_shattering_throw == True:
                if shattering_throw_time < current_time:
                    if used_shattering == False:
                        used_shattering = True
                        shattering_used_at_time = current_time
                        current_armor -= shattering_throw_armor_reduc_amount
                        if last_sim_run == True:
                            rotation.append("Shattering Throw")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Active")

            if use_shattering_throw == True:
                if used_shattering == True:
                    if shattering_used_at_time + 10 < current_time:
                        if shattering_throw_end == False:
                            shattering_throw_end = True
                            current_armor += shattering_throw_armor_reduc_amount

            # Ghoul
            if master_of_ghouls_points != 0:
                ghoul_strength = strtoap
            if ghoul_buffs_t == 0:
                ghoul_strength_modifier = .7
                if ravenous_dead_points != 0:
                    ghoul_strength_modifier += ghoul_strength_modifier * (ravenous_dead_points * .2)
                if glyph_ghoul == True:
                    ghoul_strength_modifier += .4
                    ghoul_buffs_t += 1
            ghoul_strength = ghoul_strength * ghoul_strength_modifier
            ghoul_haste_outside = total_haste_rating
            ghoul_agi = 856
            if master_of_ghouls_points != 0:
                if raid_buff_gift_of_the_wild == True:
                    ghoul_strength += 37
                    ghoul_agi += 37
                if raid_buff_horn_of_winter == True:
                    ghoul_strength += 155
                    ghoul_agi += 155
                if raid_buff_greater_blessing_of_kings == True:
                    ghoul_strength += ghoul_strength * .1
                    ghoul_agi += ghoul_agi * .1
            ghoul_crit = ((ghoul_agi / 62.5) / 100)
            army_crit = ((856 / 62.5) / 100)
            ghoul_ap = (ghoul_strength - 10) + (ghoul_agi - 10)
            if master_of_ghouls_points != 0:
                if raid_buff_abomination_rage == True:
                    ghoul_ap += ghoul_ap * .1
                if raid_buff_greater_blessing_of_might == True:
                    ghoul_ap += 550
                if raid_buff_imp_greater_blessing_of_might == True:
                    ghoul_ap += (550 * .25)

            # Ghoul Attacks
            # Army
            if army_active == True:
                if current_time == 0 and dk_spec != 1:
                    g_army_attack_speed = 10
                    g_army_attack_speed_haste = (
                                                            ghoul_haste_outside / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                    g_army_attack_speed = g_army_attack_speed * (.1 * (1 - g_army_attack_speed_haste))
                    g_army_to_do_attacks_amount = int((40 / g_army_attack_speed))
                    for army_ghoul_num in range(0, 8):
                        army_time_vari = (random.randint(0, 999))/1000
                        # army_time_vari = army_time_random_value[damage_result_number] / 1000
                        damage_result_number = damage_array_updater(damage_result_number)
                        army_current_time = 0
                        army_current_time += army_time_vari
                        for army_ghoul in range(0, g_army_to_do_attacks_amount):
                            g_army_attack_damage_amount = random.randint(60, 102)
                            # g_army_attack_damage_amount = ghoul_damage_random_value[damage_result_number]
                            damage_result_number = damage_array_updater(damage_result_number)
                            g_army_attack_damage_amount = g_army_attack_damage_amount + (2 * army_ap / 14) - (
                                        army_strength / 45)
                            g_army_attack_damage_amount = g_army_attack_damage_amount * .5
                            armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                            if army_attack_tracker == 4:
                                ghoul_army_attack_table_results = ghoul_attack_table(target_level, ghoul_hit,
                                                                                     ghoul_expertise, True, army_crit,
                                                                                     standard_10k_random_value,
                                                                                     damage_result_number)
                                g_army_attack_damage_amount = g_army_attack_damage_amount * 1.5
                                if ghoul_army_attack_table_results == 0:
                                    if last_sim_run == True:
                                        rotation.append("Army Ghoul - Claw")
                                        rotation_time.append(army_current_time)
                                        rotation_status.append("Miss")
                                    g_army_attack_damage_amount = 0
                                elif ghoul_army_attack_table_results == 1:
                                    if last_sim_run == True:
                                        rotation.append("Army Ghoul - Claw")
                                        rotation_time.append(army_current_time)
                                        rotation_status.append("Dodge")
                                    g_army_attack_damage_amount = 0
                                elif ghoul_army_attack_table_results == 3:
                                    if target_level - 80 == 3:
                                        g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                    g_army_attack_damage_amount * .35) - ((
                                                                                                      g_army_attack_damage_amount - (
                                                                                                          g_army_attack_damage_amount * .35)) * armor_red_amount)
                                    elif target_level - 80 == 2:
                                        g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                    g_army_attack_damage_amount * .15) - ((
                                                                                                      g_army_attack_damage_amount - (
                                                                                                          g_army_attack_damage_amount * .15)) * armor_red_amount)
                                    else:
                                        g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                    g_army_attack_damage_amount * .05) - ((
                                                                                                      g_army_attack_damage_amount - (
                                                                                                          g_army_attack_damage_amount * .05)) * armor_red_amount)
                                    if last_sim_run == True:
                                        rotation.append("Army Ghoul - Claw")
                                        rotation_time.append(army_current_time)
                                        rotation_status.append("Glance")
                                elif ghoul_army_attack_table_results == 5:
                                    g_army_attack_damage_amount = ((g_army_attack_damage_amount) - (
                                                g_army_attack_damage_amount * armor_red_amount)) * 2
                                    if last_sim_run == True:
                                        rotation.append("Army Ghoul - Claw")
                                        rotation_time.append(army_current_time)
                                        rotation_status.append("Crit")
                                elif ghoul_army_attack_table_results == 7:
                                    g_army_attack_damage_amount = (g_army_attack_damage_amount) - (
                                                g_army_attack_damage_amount * armor_red_amount)
                                    if last_sim_run == True:
                                        rotation.append("Army Ghoul - Claw")
                                        rotation_time.append(army_current_time)
                                        rotation_status.append("Hit")
                                if personal_buff_orc_pet_damage == True:
                                    g_army_attack_damage_amount += g_army_attack_damage_amount * .05
                                army_damage_claw += g_army_attack_damage_amount
                                if last_sim_run == True:
                                    rotation_damage.append(g_army_attack_damage_amount)
                                army_attack_tracker = 0
                            ghoul_army_attack_table_results = ghoul_attack_table(target_level, ghoul_hit,
                                                                                 ghoul_expertise, False, army_crit,
                                                                                 standard_10k_random_value,
                                                                                 damage_result_number)
                            if ghoul_army_attack_table_results == 0:
                                if last_sim_run == True:
                                    rotation.append("Army Ghoul - Main hand")
                                    rotation_time.append(army_current_time)
                                    rotation_status.append("Miss")
                                g_army_attack_damage_amount = 0
                            elif ghoul_army_attack_table_results == 1:
                                if last_sim_run == True:
                                    rotation.append("Army Ghoul - Main hand")
                                    rotation_time.append(army_current_time)
                                    rotation_status.append("Dodge")
                                g_army_attack_damage_amount = 0
                            elif ghoul_army_attack_table_results == 3:
                                if target_level - 80 == 3:
                                    g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .35) - ((g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .35)) * armor_red_amount)
                                elif target_level - 80 == 2:
                                    g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .15) - ((g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .15)) * armor_red_amount)
                                else:
                                    g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .05) - ((g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .05)) * armor_red_amount)
                                if last_sim_run == True:
                                    rotation.append("Army Ghoul - Main hand")
                                    rotation_time.append(army_current_time)
                                    rotation_status.append("Glance")
                            elif ghoul_army_attack_table_results == 5:
                                g_army_attack_damage_amount = ((g_army_attack_damage_amount) - (
                                            g_army_attack_damage_amount * armor_red_amount)) * 2
                                if last_sim_run == True:
                                    rotation.append("Army Ghoul - Main hand")
                                    rotation_time.append(army_current_time)
                                    rotation_status.append("Crit")
                            elif ghoul_army_attack_table_results == 7:
                                g_army_attack_damage_amount = (g_army_attack_damage_amount) - (
                                            g_army_attack_damage_amount * armor_red_amount)
                                if last_sim_run == True:
                                    rotation.append("Army Ghoul - Main hand")
                                    rotation_time.append(army_current_time)
                                    rotation_status.append("Hit")
                            if personal_buff_orc_pet_damage == True:
                                g_army_attack_damage_amount += g_army_attack_damage_amount * .05
                            army_damage += g_army_attack_damage_amount
                            if last_sim_run == True:
                                rotation_damage.append(g_army_attack_damage_amount)
                            army_current_time += g_army_attack_speed
                            army_attack_tracker += 1
                elif used_army == True and dk_spec == 1:
                    used_army = False
                    g_army_attack_speed = 10
                    g_army_attack_speed_haste = (
                                                            ghoul_haste_outside / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                    g_army_attack_speed = g_army_attack_speed * (.1 * (1 - g_army_attack_speed_haste))
                    g_army_to_do_attacks_amount = int((40 / g_army_attack_speed))
                    for army_ghoul_num in range(0, 8):
                        army_time_vari = (random.randint(0, 999))/1000
                        # army_time_vari = army_time_random_value[damage_result_number] / 1000
                        damage_result_number = damage_array_updater(damage_result_number)
                        army_current_time = casted_army_time + 4 + ((army_ghoul_num + 1) * .5)
                        army_current_time += army_time_vari
                        for army_ghoul in range(0, g_army_to_do_attacks_amount):
                            g_army_attack_damage_amount = random.randint(60, 102)
                            # g_army_attack_damage_amount = ghoul_damage_random_value[damage_result_number]
                            damage_result_number = damage_array_updater(damage_result_number)
                            g_army_attack_damage_amount = g_army_attack_damage_amount + (2 * army_ap / 14) - (
                                        army_strength / 45)
                            g_army_attack_damage_amount = g_army_attack_damage_amount * .5
                            armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                            if army_attack_tracker == 4:
                                ghoul_army_attack_table_results = ghoul_attack_table(target_level, ghoul_hit,
                                                                                     ghoul_expertise, True, army_crit,
                                                                                     standard_10k_random_value,
                                                                                     damage_result_number)
                                g_army_attack_damage_amount = g_army_attack_damage_amount * 1.5
                                if ghoul_army_attack_table_results == 0:
                                    if last_sim_run == True:
                                        rotation.append("Army Ghoul - Claw")
                                        rotation_time.append(army_current_time)
                                        rotation_status.append("Miss")
                                    g_army_attack_damage_amount = 0
                                elif ghoul_army_attack_table_results == 1:
                                    if last_sim_run == True:
                                        rotation.append("Army Ghoul - Claw")
                                        rotation_time.append(army_current_time)
                                        rotation_status.append("Dodge")
                                    g_army_attack_damage_amount = 0
                                elif ghoul_army_attack_table_results == 3:
                                    if target_level - 80 == 3:
                                        g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                    g_army_attack_damage_amount * .35) - ((
                                                                                                      g_army_attack_damage_amount - (
                                                                                                          g_army_attack_damage_amount * .35)) * armor_red_amount)
                                    elif target_level - 80 == 2:
                                        g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                    g_army_attack_damage_amount * .15) - ((
                                                                                                      g_army_attack_damage_amount - (
                                                                                                          g_army_attack_damage_amount * .15)) * armor_red_amount)
                                    else:
                                        g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                    g_army_attack_damage_amount * .05) - ((
                                                                                                      g_army_attack_damage_amount - (
                                                                                                          g_army_attack_damage_amount * .05)) * armor_red_amount)
                                    if last_sim_run == True:
                                        rotation.append("Army Ghoul - Claw")
                                        rotation_time.append(army_current_time)
                                        rotation_status.append("Glance")
                                elif ghoul_army_attack_table_results == 5:
                                    g_army_attack_damage_amount = ((g_army_attack_damage_amount) - (
                                                g_army_attack_damage_amount * armor_red_amount)) * 2
                                    if last_sim_run == True:
                                        rotation.append("Army Ghoul - Claw")
                                        rotation_time.append(army_current_time)
                                        rotation_status.append("Crit")
                                elif ghoul_army_attack_table_results == 7:
                                    g_army_attack_damage_amount = (g_army_attack_damage_amount) - (
                                                g_army_attack_damage_amount * armor_red_amount)
                                    if last_sim_run == True:
                                        rotation.append("Army Ghoul - Claw")
                                        rotation_time.append(army_current_time)
                                        rotation_status.append("Hit")
                                if personal_buff_orc_pet_damage == True:
                                    g_army_attack_damage_amount += g_army_attack_damage_amount * .05
                                army_damage_claw += g_army_attack_damage_amount
                                if last_sim_run == True:
                                    rotation_damage.append(g_army_attack_damage_amount)
                                army_attack_tracker = 0
                            ghoul_army_attack_table_results = ghoul_attack_table(target_level, ghoul_hit,
                                                                                 ghoul_expertise, False, army_crit,
                                                                                 standard_10k_random_value,
                                                                                 damage_result_number)
                            if ghoul_army_attack_table_results == 0:
                                if last_sim_run == True:
                                    rotation.append("Army Ghoul - Main hand")
                                    rotation_time.append(army_current_time)
                                    rotation_status.append("Miss")
                                g_army_attack_damage_amount = 0
                            elif ghoul_army_attack_table_results == 1:
                                if last_sim_run == True:
                                    rotation.append("Army Ghoul - Main hand")
                                    rotation_time.append(army_current_time)
                                    rotation_status.append("Dodge")
                                g_army_attack_damage_amount = 0
                            elif ghoul_army_attack_table_results == 3:
                                if target_level - 80 == 3:
                                    g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .35) - ((g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .35)) * armor_red_amount)
                                elif target_level - 80 == 2:
                                    g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .15) - ((g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .15)) * armor_red_amount)
                                else:
                                    g_army_attack_damage_amount = g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .05) - ((g_army_attack_damage_amount - (
                                                g_army_attack_damage_amount * .05)) * armor_red_amount)
                                if last_sim_run == True:
                                    rotation.append("Army Ghoul - Main hand")
                                    rotation_time.append(army_current_time)
                                    rotation_status.append("Glance")
                            elif ghoul_army_attack_table_results == 5:
                                g_army_attack_damage_amount = ((g_army_attack_damage_amount) - (
                                            g_army_attack_damage_amount * armor_red_amount)) * 2
                                if last_sim_run == True:
                                    rotation.append("Army Ghoul - Main hand")
                                    rotation_time.append(army_current_time)
                                    rotation_status.append("Crit")
                            elif ghoul_army_attack_table_results == 7:
                                g_army_attack_damage_amount = (g_army_attack_damage_amount) - (
                                            g_army_attack_damage_amount * armor_red_amount)
                                if last_sim_run == True:
                                    rotation.append("Army Ghoul - Main hand")
                                    rotation_time.append(army_current_time)
                                    rotation_status.append("Hit")
                            if personal_buff_orc_pet_damage == True:
                                g_army_attack_damage_amount += g_army_attack_damage_amount * .05
                            army_damage += g_army_attack_damage_amount
                            if last_sim_run == True:
                                rotation_damage.append(g_army_attack_damage_amount)
                            army_current_time += g_army_attack_speed
                            army_attack_tracker += 1

            # ghoul
            if ghoul_active == True:
                if int(current_time - ghoul_last_energy_tick) >= 1:
                    ghoul_diff = int(current_time - ghoul_last_energy_tick)
                    ghoul_energy += (10 * ghoul_diff)
                    if ghoul_energy > 100:
                        ghoul_energy = 100
                    ghoul_last_energy_tick += (1 * ghoul_diff)
                if ghoul_life_length >= current_time:
                    g_attack_speed = 10
                    g_attack_speed_haste = (
                                                       ghoul_haste_outside / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                    g_attack_speed = g_attack_speed * (.1 * (1 - g_attack_speed_haste))
                    if ghoul_frenzy_buff_timer > current_time:
                        g_attack_speed = g_attack_speed / ((25 / 100) + 1)
                    if master_of_ghouls_points != 0:
                        g_attack_speed = g_attack_speed / (1 + melee_haste_bonus) / (1 + melee_haste_bonus2) / (
                                    1 + melee_haste_bonus3) / (1 + melee_haste_bonus4)
                        ghoul_strength = strtoap * ghoul_strength_modifier
                        if raid_buff_gift_of_the_wild == True:
                            ghoul_strength += 37
                        if raid_buff_horn_of_winter == True:
                            ghoul_strength += 155
                        if raid_buff_greater_blessing_of_kings == True:
                            ghoul_strength += ghoul_strength * .1
                        ghoul_ap = (ghoul_strength - 10) + (ghoul_agi - 10)
                        if raid_buff_abomination_rage == True:
                            ghoul_ap += ghoul_ap * .1
                        if raid_buff_greater_blessing_of_might == True:
                            ghoul_ap += 550
                        if raid_buff_imp_greater_blessing_of_might == True:
                            ghoul_ap += (550 * .25)
                        if raid_buff_leader_of_the_pack == True:
                            ghoul_leader_crit = .05
                    g_to_do_attacks_amount = int(
                        (current_time - last_ghoul_attack) / g_attack_speed)  # Might have to divide by 2
                    # g_attack_damage_amount = random.randint(44, 86)
                    # g_attack_damage_amount = g_attack_damage_amount + (ghoul_ap-846)/75 + (g_attack_speed * ghoul_ap / 14)
                    # g_attack_damage_amount = g_attack_damage_amount + (ghoul_ap-846)/75 + (2 * ghoul_ap / 14)
                    # g_attack_damage_amount = random.randint(60, 102)
                    g_attack_damage_amount = ghoul_damage_random_value[damage_result_number]
                    damage_result_number = damage_array_updater(damage_result_number)
                    g_attack_damage_amount = g_attack_damage_amount + (2 * ghoul_ap / 14) - (ghoul_strength / 45)
                    # round(102+(2*current_ap/14)-((current_str/45)))
                    armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                    if g_to_do_attacks_amount != 0:
                        for g_attacks in range(0, g_to_do_attacks_amount):
                            # if ghoul_attack_tracker == 4:
                            if ghoul_energy >= 40:
                                ghoul_energy -= 40
                                ghoul_attack_table_results = ghoul_attack_table(target_level, ghoul_hit,
                                                                                ghoul_expertise, True, ghoul_crit,
                                                                                standard_10k_random_value,
                                                                                damage_result_number, ghoul_leader_crit)
                                g_attack_damage_amount = g_attack_damage_amount * 1.5
                                if ghoul_attack_table_results == 0:
                                    if last_sim_run == True:
                                        rotation.append("Ghoul - Claw")
                                        rotation_time.append(last_ghoul_attack)
                                        rotation_status.append("Miss")
                                    g_attack_damage_amount = 0
                                elif ghoul_attack_table_results == 1:
                                    if last_sim_run == True:
                                        rotation.append("Ghoul - Claw")
                                        rotation_time.append(last_ghoul_attack)
                                        rotation_status.append("Dodge")
                                    g_attack_damage_amount = 0
                                elif ghoul_attack_table_results == 3:
                                    if target_level - 80 == 3:
                                        g_attack_damage_amount = g_attack_damage_amount - (
                                                    g_attack_damage_amount * .35) - ((g_attack_damage_amount - (
                                                    g_attack_damage_amount * .35)) * armor_red_amount)
                                    elif target_level - 80 == 2:
                                        g_attack_damage_amount = g_attack_damage_amount - (
                                                    g_attack_damage_amount * .15) - ((g_attack_damage_amount - (
                                                    g_attack_damage_amount * .15)) * armor_red_amount)
                                    else:
                                        g_attack_damage_amount = g_attack_damage_amount - (
                                                    g_attack_damage_amount * .05) - ((g_attack_damage_amount - (
                                                    g_attack_damage_amount * .05)) * armor_red_amount)
                                    if last_sim_run == True:
                                        rotation.append("Ghoul - Claw")
                                        rotation_time.append(last_ghoul_attack)
                                        rotation_status.append("Glance")
                                elif ghoul_attack_table_results == 5:
                                    g_attack_damage_amount = ((g_attack_damage_amount) - (
                                                g_attack_damage_amount * armor_red_amount)) * 2
                                    if last_sim_run == True:
                                        rotation.append("Ghoul - Claw")
                                        rotation_time.append(last_ghoul_attack)
                                        rotation_status.append("Crit")
                                elif ghoul_attack_table_results == 7:
                                    g_attack_damage_amount = (g_attack_damage_amount) - (
                                                g_attack_damage_amount * armor_red_amount)
                                    if last_sim_run == True:
                                        rotation.append("Ghoul - Claw")
                                        rotation_time.append(last_ghoul_attack)
                                        rotation_status.append("Hit")
                                if personal_buff_orc_pet_damage == True:
                                    g_attack_damage_amount += g_attack_damage_amount * .05
                                ghoul_damage_claw += g_attack_damage_amount
                                if last_sim_run == True:
                                    rotation_damage.append(g_attack_damage_amount)
                                # ghoul_attack_tracker = 0
                            ghoul_attack_table_results = ghoul_attack_table(target_level, ghoul_hit, ghoul_expertise,
                                                                            False, ghoul_crit,
                                                                            standard_10k_random_value,
                                                                            damage_result_number, ghoul_leader_crit)
                            if ghoul_attack_table_results == 0:
                                if last_sim_run == True:
                                    rotation.append("Ghoul - Main hand")
                                    rotation_time.append(last_ghoul_attack)
                                    rotation_status.append("Miss")
                                g_attack_damage_amount = 0
                            elif ghoul_attack_table_results == 1:
                                if last_sim_run == True:
                                    rotation.append("Ghoul - Main hand")
                                    rotation_time.append(last_ghoul_attack)
                                    rotation_status.append("Dodge")
                                g_attack_damage_amount = 0
                            elif ghoul_attack_table_results == 3:
                                if target_level - 80 == 3:
                                    g_attack_damage_amount = g_attack_damage_amount - (g_attack_damage_amount * .35) - (
                                                (g_attack_damage_amount - (
                                                            g_attack_damage_amount * .35)) * armor_red_amount)
                                elif target_level - 80 == 2:
                                    g_attack_damage_amount = g_attack_damage_amount - (g_attack_damage_amount * .15) - (
                                                (g_attack_damage_amount - (
                                                            g_attack_damage_amount * .15)) * armor_red_amount)
                                else:
                                    g_attack_damage_amount = g_attack_damage_amount - (g_attack_damage_amount * .05) - (
                                                (g_attack_damage_amount - (
                                                            g_attack_damage_amount * .05)) * armor_red_amount)
                                if last_sim_run == True:
                                    rotation.append("Ghoul - Main hand")
                                    rotation_time.append(last_ghoul_attack)
                                    rotation_status.append("Glance")
                            elif ghoul_attack_table_results == 5:
                                g_attack_damage_amount = ((g_attack_damage_amount) - (
                                            g_attack_damage_amount * armor_red_amount)) * 2
                                if last_sim_run == True:
                                    rotation.append("Ghoul - Main hand")
                                    rotation_time.append(last_ghoul_attack)
                                    rotation_status.append("Crit")
                            elif ghoul_attack_table_results == 7:
                                g_attack_damage_amount = (g_attack_damage_amount) - (
                                            g_attack_damage_amount * armor_red_amount)
                                if last_sim_run == True:
                                    rotation.append("Ghoul - Main hand")
                                    rotation_time.append(last_ghoul_attack)
                                    rotation_status.append("Hit")
                            if personal_buff_orc_pet_damage == True:
                                g_attack_damage_amount += g_attack_damage_amount * .05
                            ghoul_damage += g_attack_damage_amount
                            if last_sim_run == True:
                                rotation_damage.append(g_attack_damage_amount)
                            last_ghoul_attack = last_ghoul_attack + g_attack_speed
                            # ghoul_attack_tracker += 1
                if ghoul_life_length < current_time:
                    last_ghoul_attack = current_time
                    if ghoul_cd < current_time:
                        ghoul_cd = current_time + 180
                        if night_of_the_dead_points != 0:
                            ghoul_cd -= night_of_the_dead_points * 45
                        ghoul_life_length = current_time + 60
                        last_ghoul_attack = current_time
                        if last_sim_run == True:
                            rotation.append("Raise Dead")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Active")
                        haste_percentage = (total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                        haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                         last_rune_change[castable + 6])
                        if improved_unholy_presence_points != 0:
                            if dk_presence == 2:
                                haste_rune_cd = haste_rune_cd - (
                                            haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                        if dk_presence != 2:
                            gcd = input_gcd / (1 + haste_percentage)
                            if gcd < 1:
                                gcd = 1
                        current_time += gcd
                        used_gcd = True
                        continue
            # Use Bloodlust / Other Specials
            if meta_as_bonus == True:
                if meta_as_bonus_active == False:
                    if meta_as_bonus_cd < current_time:
                        meta_as_bonus_active = True
                        meta_as_bonus_cd = current_time + 46
                        meta_as_bonus_active_time = current_time + 6
                        bonus_loop_haste_rating += 480
                if meta_as_bonus_active == True:
                    if meta_as_bonus_active_time < current_time:
                        meta_as_bonus_active = False
                        bonus_loop_haste_rating -= 480
            if pre_pot_potion == True:
                if current_time > 15:
                    if pre_pot_potion_used == True:
                        if pot_of_speed == True:
                            bonus_loop_haste_rating -= 500
                            pre_pot_potion_used = False
                        elif pot_of_wild_magic == True:
                            bonus_loop_crit_rating -= 200
                            pre_pot_potion_used = False
            if bloodlust_used == False:
                if bloodlust_start_time <= current_time:
                    bloodlust_used = True
                    melee_haste_bonus3 = .3
            if bloodlust_end == False:
                if bloodlust_used == True:
                    if bloodlust_start_time + 30 < current_time:
                        melee_haste_bonus3 = 0
                        bloodlust_end = True
            if berserking_used == False:
                if berserking_start_time_cd <= current_time:
                    berserking_used = True
                    melee_haste_bonus4 = .2
            if berserking_used == True:
                if berserking_start_time_cd + 10 < current_time:
                    melee_haste_bonus4 = 0
                    berserking_start_time_cd = berserking_start_time_cd + 170
                    berserking_used = False
            if bloodfury_used == False:
                if bloodfury_start_time_cd <= current_time:
                    bloodfury_used = True
                    bonus_loop_ap += 322
            if bloodfury_used == True:
                if bloodfury_start_time_cd + 15 < current_time:
                    bonus_loop_ap -= 322
                    bloodfury_start_time_cd = bloodfury_start_time_cd + 105
                    bloodfury_used = False
            if hysteria_used == False:
                if hysteria_start_time <= current_time:
                    hysteria_used = True
                    hysteria_active = True
            if hysteria_end == False:
                if hysteria_used == True:
                    if hysteria_start_time + 30 < current_time:
                        hysteria_end = True
                        hysteria_active = False
            if tricksoftt_used == False:
                if tricks_start_time <= current_time:
                    tricksoftt_used = True
                    tricksoftt_active = True
            if tricksoftt_end == False:
                if tricksoftt_used == True:
                    if tricks_start_time + 30 < current_time:
                        tricksoftt_end = True
                        tricksoftt_active = False
            if pot_of_speed_used == False:
                if pot_of_speed_start_time <= current_time:
                    pot_of_speed_used = True
                    pot_of_speed_active = True
                    bonus_loop_haste_rating += 500
            if pot_of_speed_end == False:
                if pot_of_speed_used == True:
                    if pot_of_speed_start_time + 15 < current_time:
                        pot_of_speed_end = True
                        pot_of_speed_active = False
                        bonus_loop_haste_rating -= 500
            if pot_of_wild_magic_used == False:
                if pot_of_wild_magic_start_time <= current_time:
                    pot_of_wild_magic_used = True
                    pot_of_wild_magic_active = True
                    bonus_loop_crit_rating += 200
            if pot_of_wild_magic_end == False:
                if pot_of_wild_magic_used == True:
                    if pot_of_wild_magic_start_time + 15 < current_time:
                        pot_of_wild_magic_end = True
                        pot_of_wild_magic_active = False
                        bonus_loop_crit_rating -= 200
            if dots[0] > current_time:
                if dots[1] > current_time:
                    if engi_gloves_enchant == True:
                        if engi_gloves_enchant_cd < current_time:
                            if engi_gloves_buff_active == False:
                                if last_sim_run == True:
                                    rotation.append("Hyperspeed Acceleration")
                                    rotation_time.append(current_time)
                                    rotation_damage.append(0)
                                    rotation_status.append("Active")
                                engi_gloves_enchant_cd += 60
                                engi_gloves_enchant_active_timer += 12
                                engi_gloves_buff_active = True
                                bonus_loop_haste_rating += 340
            if engi_gloves_enchant == True:
                if engi_gloves_buff_active == True:
                    if engi_gloves_enchant_active_timer < current_time:
                        engi_gloves_buff_active = False
                        bonus_loop_haste_rating -= 340
            if swordguard_enchant == True:
                if swordguard_enchant_cd < current_time:
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 100) < 25:
                            if swordguard_buff_active == False:
                                swordguard_buff_active = True
                                if last_sim_run == True:
                                    rotation.append("Swordguard Embroidery")
                                    rotation_time.append(current_time)
                                    rotation_damage.append(0)
                                    rotation_status.append("Proc")
                                swordguard_enchant_cd = current_time + 45
                                swordguard_enchant_active_timer = current_time + 15
                                bonus_loop_ap += 400
                        damage_result_number = damage_array_updater(damage_result_number)
            if sword_berserking_enchant == True:
                if sword_berserking_enchant_hand == "mh":
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 10000) / 100 < ((mh_speed * 1.2 / 60) * 100):
                            berskering_buff_active = True
                            if last_sim_run == True:
                                rotation.append("Berskering Enchant")
                                rotation_time.append(current_time)
                                rotation_damage.append(0)
                                rotation_status.append("Proc")
                            berskering_enchant_active_timer = current_time + 15
                            bonus_loop_ap += 400
            if rune_of_the_fallen_crusader == True:
                if rune_of_the_fallen_crusader_hand == "mh":
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 10000) / 100 < ((mh_speed * 2 / 60) * 100):
                            if last_sim_run == True:
                                rotation.append("Rune of the Fallen Crusader")
                                rotation_time.append(current_time)
                                rotation_damage.append(0)
                                rotation_status.append("Proc")
                            runeofthefallencrusdaer_active_cd = current_time + 15
                            if runeofthefallencrusader_buff_active == False:
                                runeofthefallc_str_amount = strtoap * .15
                                bonus_loop_str += runeofthefallc_str_amount
                                runeofthefallencrusader_buff_active = True
                        damage_result_number = damage_array_updater(damage_result_number)
            if rune_of_razorice == True:
                if rune_of_razorice_hand == "mh":
                    if trinket_hit_crit_tracker != 0:
                        rune_of_razorice_damage += (atta_num * .02)
                        if last_sim_run == True:
                            rotation.append("Rune of Razorice")
                            rotation_time.append(current_time)
                            rotation_damage.append(atta_num * .02)
                            rotation_status.append("Active")
            if rune_of_lichbane == True:
                if rune_of_lichbane_hand == "mh":
                    if trinket_hit_crit_tracker != 0:
                        rune_of_lichbane_damage += (atta_num * .02)
                        if last_sim_run == True:
                            rotation.append("Rune of Lichbane")
                            rotation_time.append(current_time)
                            rotation_damage.append(atta_num * .02)
                            rotation_status.append("Active")
            if rune_of_cinderglacier == True:
                if rune_of_cinderglacier_hand == "mh":
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 10000) / 100 < ((mh_speed * 1.5 / 60) * 100):
                            if last_sim_run == True:
                                rotation.append("Rune of Cinderglacier")
                                rotation_time.append(current_time)
                                rotation_damage.append(0)
                                rotation_status.append("Proc")
                            rune_of_cinderglacier_active = True
                            rune_of_cinderglacier_active_count = 0
                        damage_result_number = damage_array_updater(damage_result_number)
            if scourgelords_battlegear_four_set == True:
                if rune_cd_tracker[2] > current_time:
                    if rune_cd_tracker[3] > current_time:
                        if rune_cd_tracker[4] > current_time:
                            if rune_cd_tracker[5] > current_time:
                                if rune_cd_tracker[0] > current_time and rune_cd_tracker[6] > current_time:
                                    if rune_cd_tracker[1] > current_time and rune_cd_tracker[7] > current_time:
                                        if t10_4set_dps_buff == False:
                                            increased_all_damage += .03
                                            if last_sim_run == True:
                                                rotation.append("Scourgelord 4p Bonus")
                                                rotation_time.append(current_time)
                                                rotation_damage.append(0)
                                                rotation_status.append("Active")
                                        t10_4set_dps_buff = True
                                        t10_4set_dps_buff_timer = current_time + 15
            if blood_gorged_points != 0:
                if random.randint(0, 10000) / 100 <= blood_gorged_proc_rate:
                    if blood_gorged_active == False:
                        blood_gorged_active = True
                        increased_all_damage += (blood_gorged_points * 2) / 100
                else:
                    if blood_gorged_active == True:
                        blood_gorged_active = False
                        increased_all_damage -= (blood_gorged_points * 2) / 100
                damage_result_number = damage_array_updater(damage_result_number)
            if bloody_vengeance_points != 0:
                if trinket_hit_crit_tracker == 2:
                    if bloody_vengeance_stacks < 3:
                        bloody_vengeance_stacks += 1
                        bloody_vengeance_timer = current_time + 30
                        increased_physical_damage += bloody_vengeance_points / 100
                        if last_sim_run == True:
                            rotation.append("Bloody Vengeance")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Active")
                    else:
                        bloody_vengeance_timer = current_time + 30
                        if last_sim_run == True:
                            rotation.append("Bloody Vengeance")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Refresh")
            if bone_shield_points == 1:
                if bone_shield_active == True:
                    if bone_shield_buff_applied == False:
                        bone_shield_buff_applied = True
                        increased_all_damage += .02
            if unholy_blight_points == 1:
                if unholy_blight_amount != 0:
                    if unholy_blight_timer >= current_time:
                        atta_num = unholy_blight_amount / 10
                        if glyph_unholy_blight == True:
                            atta_num += atta_num * .4
                        unholy_blight_damage += atta_num
                        if last_sim_run == True:
                            rotation.append("Unholy Blight")
                            rotation_time.append(current_time)
                            rotation_damage.append(atta_num)
                            rotation_status.append("DOT")
                    elif unholy_blight_timer < current_time:
                        unholy_blight_amount = 0
            if fury_of_five_flights_using == True:
                if trinket_hit_crit_tracker == 2 or trinket_hit_crit_tracker == 1:
                    if fury_of_five_flights_stacks < 20:
                        fury_of_five_flights_stacks += 1
                        fury_of_five_flights_timer = current_time + 10
                        bonus_loop_ap += 16
                        if last_sim_run == True:
                            rotation.append("Fury of the Five Flights")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Active")
                    else:
                        fury_of_five_flights_timer = current_time + 10
                        if last_sim_run == True:
                            rotation.append("Fury of the Five Flights")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Refresh")

            # Remove Buffs
            if swordguard_enchant == True:
                if swordguard_buff_active == True:
                    if swordguard_enchant_active_timer < current_time:
                        swordguard_buff_active = False
                        bonus_loop_ap -= 400
            if sword_berserking_enchant == True:
                if berskering_buff_active == True:
                    if berskering_enchant_active_timer < current_time:
                        berskering_buff_active = False
                        bonus_loop_ap -= 400
            if rune_of_the_fallen_crusader == True:
                if runeofthefallencrusader_buff_active == True:
                    if runeofthefallencrusdaer_active_cd < current_time:
                        runeofthefallencrusader_buff_active = False
                        bonus_loop_str -= runeofthefallc_str_amount
            if sigil_of_strife == True:
                if sigil_of_strife_active == True:
                    if sigil_of_strife_timer < current_time:
                        bonus_loop_ap -= sigil_of_strife_amount
                        sigil_of_strife_active = False
            if sigil_of_haunted_dreams == True:
                if sigil_of_haunted_dreams_buff == True:
                    if sigil_of_haunted_dreams_timer < current_time:
                        sigil_of_haunted_dreams_buff = False
                        bonus_loop_crit_rating -= 173
            if sigil_of_virulence == True:
                if sigil_of_virulence_buff == True:
                    if sigil_of_virulence_timer < current_time:
                        sigil_of_virulence_buff = False
                        bonus_loop_str -= 200
            if sigil_of_hanged_man == True:
                if sigil_of_hanged_man_buff == True:
                    if sigil_of_hanged_man_timer < current_time:
                        sigil_of_hanged_man_buff = False
                        bonus_loop_str -= 73 * sigil_of_hanged_man_count
            if t9_dps_two_set == True:
                if t9_bonus == True:
                    if t9_active_timer < current_time:
                        t9_bonus = False
                        bonus_loop_str -= 180
            if scourgelords_battlegear_four_set == True:
                if t10_4set_dps_buff == True:
                    if t10_4set_dps_buff_timer < current_time:
                        increased_all_damage -= .03
                        t10_4set_dps_buff = False
            if desolation_points != 0:
                if desolation_buff == True:
                    if desolation_buff_timer < current_time:
                        increased_all_damage -= (desolation_points / 100)
                        desolation_buff = False
                        if last_sim_run == True:
                            rotation.append("Desolation")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Removed")
            if bloody_vengeance_points != 0:
                if bloody_vengeance_timer < current_time:
                    if bloody_vengeance_stacks > 0:
                        increased_physical_damage -= (bloody_vengeance_points / 100) * bloody_vengeance_stacks
                        bloody_vengeance_stacks = 0
                        if last_sim_run == True:
                            rotation.append("Bloody Vengeance")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Removed")
            if bone_shield_points == 1:
                if bone_shield_active == False:
                    if bone_shield_buff_applied == True:
                        bone_shield_buff_applied = False
                        increased_all_damage -= .02
            if dancing_rune_weapon_points == 1:
                if dancing_rune_weapon_active == True:
                    if dancing_rune_weapon_length < current_time:
                        dancing_rune_weapon_active = False
            if fury_of_five_flights_using == True:
                if fury_of_five_flights_timer < current_time:
                    if fury_of_five_flights_stacks > 0:
                        bonus_loop_ap -= 16 * fury_of_five_flights_stacks
                        fury_of_five_flights_stacks = 0
                        if last_sim_run == True:
                            rotation.append("Fury of the Five Flights")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Removed")

            # Remove Trinket Buffs Here
            if trinket1_used == True:  # Removing Trinket 1 Buff
                if trinket1_buff_time < current_time:
                    trinket1_used = False
                    if trinket1_bonus_type == "Strength":
                        bonus_loop_str -= float(trinket1_bonus_amount)
                    elif trinket1_bonus_type == "Agility":
                        bonus_loop_agility -= float(trinket1_bonus_amount)
                    elif trinket1_bonus_type == "Stamina":
                        bonus_loop_hp -= (float(trinket1_bonus_amount) * 10)
                    elif trinket1_bonus_type == "Intelligence":
                        print("Increased Intel")  # Not even adding this
                    elif trinket1_bonus_type == "Spirit":
                        print("Increased Spirit")  # Not even adding this
                    elif trinket1_bonus_type == "Attack Power":
                        bonus_loop_ap -= float(trinket1_bonus_amount)
                    elif trinket1_bonus_type == "Hit Rating":
                        bonus_loop_hit -= float(trinket1_bonus_amount)
                    elif trinket1_bonus_type == "Crit Rating":
                        bonus_loop_crit_rating -= float(trinket1_bonus_amount)
                    elif trinket1_bonus_type == "Haste Rating":
                        bonus_loop_haste_rating -= float(trinket1_bonus_amount)
                    elif trinket1_bonus_type == "Armor Pen":
                        bonus_loop_armor_pen_rating -= float(trinket1_bonus_amount)
                    elif trinket1_bonus_type == "Expertise Rating":
                        bonus_loop_expertise_rating -= float(trinket1_bonus_amount)
                    elif trinket1_bonus_type == "Armor":
                        print("Increased Armor")  # To be added Later
                    elif trinket1_bonus_type == "Defense Rating":
                        print("Increase Defense Rating")  # To be added Later
                    elif trinket1_bonus_type == "Dodge Rating":
                        print("Increased Dodge Rating")  # To be added Later
                    elif trinket1_bonus_type == "Parry Rating":
                        print("Increased Parry Rating")  # To be added Later
            if trinket2_used == True:  # Removing Trinket 2 Buff
                if trinket2_buff_time < current_time:
                    trinket2_used = False
                    if trinket2_bonus_type == "Strength":
                        bonus_loop_str -= float(trinket2_bonus_amount)
                    elif trinket2_bonus_type == "Agility":
                        bonus_loop_agility -= float(trinket2_bonus_amount)
                    elif trinket2_bonus_type == "Stamina":
                        bonus_loop_hp -= (float(trinket2_bonus_amount) * 10)
                    elif trinket2_bonus_type == "Intelligence":
                        print("Increased Intel")  # Not even adding this
                    elif trinket2_bonus_type == "Spirit":
                        print("Increased Spirit")  # Not even adding this
                    elif trinket2_bonus_type == "Attack Power":
                        bonus_loop_ap -= float(trinket2_bonus_amount)
                    elif trinket2_bonus_type == "Hit Rating":
                        bonus_loop_hit -= float(trinket2_bonus_amount)
                    elif trinket2_bonus_type == "Crit Rating":
                        bonus_loop_crit_rating -= float(trinket2_bonus_amount)
                    elif trinket2_bonus_type == "Haste Rating":
                        bonus_loop_haste_rating -= float(trinket2_bonus_amount)
                    elif trinket2_bonus_type == "Armor Pen":
                        bonus_loop_armor_pen_rating -= float(trinket2_bonus_amount)
                    elif trinket2_bonus_type == "Expertise Rating":
                        bonus_loop_expertise_rating -= float(trinket2_bonus_amount)
                    elif trinket2_bonus_type == "Armor":
                        print("Increased Armor")  # To be added Later
                    elif trinket2_bonus_type == "Defense Rating":
                        print("Increase Defense Rating")  # To be added Later
                    elif trinket2_bonus_type == "Dodge Rating":
                        print("Increased Dodge Rating")  # To be added Later
                    elif trinket2_bonus_type == "Parry Rating":
                        print("Increased Parry Rating")  # To be added Later
            # Trinket Buff Check After Special Attacks
            if trinket_1_use == True:
                if trinket1_type == "Active":
                    if trinket1_use_icd < current_time:
                        trinket1_buff_time = current_time + float(trinket1_length)
                        trinket1_use_icd = current_time + float(trinket1_icd)
                        trinket1_used = True
                        if last_sim_run == True:
                            rotation.append(gear[12])
                            rotation_status.append("Active")
                            rotation_time.append(current_time)
                        if trinket1_bonus_type == "Strength":
                            bonus_loop_str += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Agility":
                            bonus_loop_agility += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Stamina":
                            bonus_loop_hp += (float(trinket1_bonus_amount) * 10)
                        elif trinket1_bonus_type == "Intelligence":
                            print("Increased Intel")  # Not even adding this
                        elif trinket1_bonus_type == "Spirit":
                            print("Increased Spirit")  # Not even adding this
                        elif trinket1_bonus_type == "Attack Power":
                            bonus_loop_ap += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Hit Rating":
                            bonus_loop_hit += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Crit Rating":
                            bonus_loop_crit_rating += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Haste Rating":
                            bonus_loop_hit += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Armor Pen":
                            bonus_loop_armor_pen_rating += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Expertise Rating":
                            bonus_loop_expertise_rating += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Armor":
                            print("Increased Armor")  # To be added Later
                        elif trinket1_bonus_type == "Defense Rating":
                            print("Increase Defense Rating")  # To be added Later
                        elif trinket1_bonus_type == "Dodge Rating":
                            print("Increased Dodge Rating")  # To be added Later
                        elif trinket1_bonus_type == "Parry Rating":
                            print("Increased Parry Rating")  # To be added Later
                        elif trinket1_bonus_type == "Damage":
                            # trinket_bonus_damage = random.randint(trinket1_min_damage, trinket1_max_damage)
                            trinket_bonus_damage = trinket1_random_value[damage_result_number]
                            damage_result_number = damage_array_updater(damage_result_number)
                            if last_sim_run == True:
                                rotation_damage.append(trinket_bonus_damage)
                            trinket1_damage += trinket_bonus_damage
                        if trinket1_bonus_type != "Damage":
                            if last_sim_run == True:
                                rotation_damage.append(0)
                elif trinket1_type == "Proc":
                    if trinket1_chanceon == "Hit":
                        if trinket_hit_crit_tracker == 1 or trinket_hit_crit_tracker == 2:  # trinket_hit_crit_tracker = 0 Null, 1 Hit, 2 Crit
                            if trinket1_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket1_chanceperc) > atta_num:
                                    trinket1_use_icd = current_time + float(trinket1_icd)
                                    trinket1_buff_time = current_time + float(trinket1_length)
                                    trinket1_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[12])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket1_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket1_bonus_amount) * 10)
                                    elif trinket1_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket1_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket1_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket1_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket1_min_damage, trinket1_max_damage)
                                        trinket_bonus_damage = trinket1_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket1_damage += trinket_bonus_damage
                                    if trinket1_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
                    elif trinket1_chanceon == "Crit":
                        if trinket_hit_crit_tracker == 2:
                            if trinket1_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket1_chanceperc) > atta_num:
                                    trinket1_use_icd = current_time + float(trinket1_icd)
                                    trinket1_buff_time = current_time + float(trinket1_length)
                                    trinket1_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[12])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket1_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket1_bonus_amount) * 10)
                                    elif trinket1_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket1_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket1_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket1_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket1_min_damage, trinket1_max_damage)
                                        trinket_bonus_damage = trinket1_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket1_damage += trinket_bonus_damage
                                    if trinket1_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
            if trinket_2_use == True:
                if trinket2_type == "Active":
                    if trinket2_use_icd < current_time:
                        trinket2_buff_time = current_time + float(trinket2_length)
                        trinket2_use_icd = current_time + float(trinket2_icd)
                        trinket2_used = True
                        if last_sim_run == True:
                            rotation.append(gear[13])
                            rotation_time.append(current_time)
                            rotation_status.append("Active")
                        if trinket2_bonus_type == "Strength":
                            bonus_loop_str += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Agility":
                            bonus_loop_agility += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Stamina":
                            bonus_loop_hp += (float(trinket2_bonus_amount) * 10)
                        elif trinket2_bonus_type == "Intelligence":
                            print("Increased Intel")  # Not even adding this
                        elif trinket2_bonus_type == "Spirit":
                            print("Increased Spirit")  # Not even adding this
                        elif trinket2_bonus_type == "Attack Power":
                            bonus_loop_ap += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Hit Rating":
                            bonus_loop_hit += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Crit Rating":
                            bonus_loop_crit_rating += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Haste Rating":
                            bonus_loop_hit += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Armor Pen":
                            bonus_loop_armor_pen_rating += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Expertise Rating":
                            bonus_loop_expertise_rating += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Armor":
                            print("Increased Armor")  # To be added Later
                        elif trinket2_bonus_type == "Defense Rating":
                            print("Increase Defense Rating")  # To be added Later
                        elif trinket2_bonus_type == "Dodge Rating":
                            print("Increased Dodge Rating")  # To be added Later
                        elif trinket2_bonus_type == "Parry Rating":
                            print("Increased Parry Rating")  # To be added Later
                        elif trinket2_bonus_type == "Damage":
                            # trinket_bonus_damage = random.randint(trinket2_min_damage, trinket2_max_damage)
                            trinket_bonus_damage = trinket2_random_value[damage_result_number]
                            damage_result_number = damage_array_updater(damage_result_number)
                            if last_sim_run == True:
                                rotation_damage.append(trinket_bonus_damage)
                            trinket2_damage += trinket_bonus_damage
                        if trinket2_bonus_type != "Damage":
                            if last_sim_run == True:
                                rotation_damage.append(0)
                elif trinket2_type == "Proc":
                    if trinket2_chanceon == "Hit":
                        if trinket_hit_crit_tracker == 1 or trinket_hit_crit_tracker == 2:  # trinket_hit_crit_tracker = 0 Null, 1 Hit, 2 Crit
                            if trinket2_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket2_chanceperc) > atta_num:
                                    trinket2_use_icd = current_time + float(trinket2_icd)
                                    trinket2_buff_time = current_time + float(trinket2_length)
                                    trinket2_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[13])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket2_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket2_bonus_amount) * 10)
                                    elif trinket2_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket2_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket2_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket2_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket2_min_damage, trinket2_max_damage)
                                        trinket_bonus_damage = trinket2_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket2_damage += trinket_bonus_damage
                                    if trinket2_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
                    elif trinket2_chanceon == "Crit":
                        if trinket_hit_crit_tracker == 2:
                            if trinket2_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket2_chanceperc) > atta_num:
                                    trinket2_use_icd = current_time + float(trinket2_icd)
                                    trinket2_buff_time = current_time + float(trinket2_length)
                                    trinket2_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[13])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket2_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket2_bonus_amount) * 10)
                                    elif trinket2_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket2_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket2_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket2_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket2_min_damage, trinket2_max_damage)
                                        trinket_bonus_damage = trinket2_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket2_damage += trinket_bonus_damage
                                    if trinket2_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
            trinket_hit_crit_tracker = 0  # Resetting hit/crit tracker after both trinkets

            # Auto attacks here
            if last_mh_attack_time <= current_time:
                # mh_white_wep_roll = weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)
                mh_white_wep_roll = mh_wep_random_value[damage_result_number]
                damage_result_number = damage_array_updater(damage_result_number)
                haste_percentage = (total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                mh_speed = mh_input_weapon_speed / (1 + haste_percentage) / (1 + melee_haste_bonus) / (
                            1 + melee_haste_bonus2) / (1 + melee_haste_bonus3) / (1 + melee_haste_bonus4)
                if dk_presence == 2:
                    mh_speed = mh_speed / (1 + .15)
                if icy_talons_points != 0:
                    if dots[0] > current_time:
                        mh_speed = mh_speed / (1 + (icy_talons_points * .04))
                mh_white_attack = white_attack(mh_white_wep_roll, mh_input_weapon_speed, current_ap)
                if killing_machine_points != 0:
                    km_proc_chance = (mh_speed * killing_machine_points / 60) * 100
                    km_rand = random.randint(0, 10000) / 100
                    damage_result_number = damage_array_updater(damage_result_number)
                    if km_proc_chance > km_rand:
                        km_procd = True
                attack_table_results = attack_table(0, tanking, H2, True, False, hit_from_gear, hit_from_other,
                                                    target_level, all_expertise_dodge, all_expertise_parry, total_crit,
                                                    standard_10k_random_value, damage_result_number, increased_phy_crit)
                armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                if dancing_rune_weapon_points == 1:
                    if dancing_rune_weapon_active == True:
                        if attack_table_results == 0:
                            atta_num = 0  # No Damage
                            if last_sim_run == True:
                                rotation.append("Dancing Rune Weapon")
                                rotation_time.append(last_mh_attack_time)
                                rotation_status.append("Miss")
                        elif attack_table_results == 1:
                            atta_num = 0  # No Damage
                            if last_sim_run == True:
                                rotation.append("Dancing Rune Weapon")
                                rotation_time.append(last_mh_attack_time)
                                rotation_status.append("Dodge")
                        elif attack_table_results == 2:
                            atta_num = 0  # No Damage
                            if last_sim_run == True:
                                rotation.append("Dancing Rune Weapon")
                                rotation_time.append(last_mh_attack_time)
                                rotation_status.append("Parry")
                        elif attack_table_results == 3:
                            if target_level - 80 == 3:
                                mh_white_attack = mh_white_attack - (mh_white_attack * .35) - (
                                            (mh_white_attack - (mh_white_attack * .35)) * armor_red_amount)
                                trinket_hit_crit_tracker = 1
                            elif target_level - 80 == 2:
                                mh_white_attack = mh_white_attack - (mh_white_attack * .15) - (
                                            (mh_white_attack - (mh_white_attack * .15)) * armor_red_amount)
                                trinket_hit_crit_tracker = 1
                            else:
                                mh_white_attack = mh_white_attack - (mh_white_attack * .05) - (
                                            (mh_white_attack - (mh_white_attack * .05)) * armor_red_amount)
                                trinket_hit_crit_tracker = 1
                            if last_sim_run == True:
                                rotation.append("Dancing Rune Weapon")
                                rotation_time.append(last_mh_attack_time)
                                rotation_status.append("Glance")
                        elif attack_table_results == 4:
                            if target_level - 80 == 3:
                                mh_white_attack = mh_white_attack - 119 - ((mh_white_attack - 119) * armor_red_amount)
                                trinket_hit_crit_tracker = 1
                            else:
                                mh_white_attack = mh_white_attack - 72 - ((mh_white_attack - 72) * armor_red_amount)
                                trinket_hit_crit_tracker = 1
                            if last_sim_run == True:
                                rotation.append("Dancing Rune Weapon")
                                rotation_time.append(last_mh_attack_time)
                                rotation_status.append("Block")
                        elif attack_table_results == 5:
                            atta_num = ((mh_white_attack) - (mh_white_attack * armor_red_amount)) * var_crit_amount
                            trinket_hit_crit_tracker = 2
                            if last_sim_run == True:
                                rotation.append("Dancing Rune Weapon")
                                rotation_time.append(last_mh_attack_time)
                                rotation_status.append("Crit")
                        elif attack_table_results == 7:
                            atta_num = (mh_white_attack) - (mh_white_attack * armor_red_amount)
                            trinket_hit_crit_tracker = 1
                            if last_sim_run == True:
                                rotation.append("Dancing Rune Weapon")
                                rotation_time.append(last_mh_attack_time)
                                rotation_status.append("Hit")
                        if atta_num < 0:
                            atta_num = 0
                        if dk_presence == 0:
                            atta_num = atta_num + (atta_num * .15)
                        if hysteria_active == True:
                            atta_num = atta_num + (atta_num * .2)
                        if tricksoftt_active == True:
                            atta_num = atta_num + (atta_num * .15)
                        atta_num = atta_num + (atta_num * increased_physical_damage) + (atta_num * increased_all_damage)
                        atta_num = atta_num * dancing_rune_weapon_damage_multi
                        dancing_rune_weapon_damage += atta_num
                        if last_sim_run == True:
                            rotation_damage.append(atta_num)
                if attack_table_results == 0:
                    mh_white_attack = 0  # No Damage
                    if last_sim_run == True:
                        rotation.append("Main hand")
                        rotation_time.append(last_mh_attack_time)
                        rotation_status.append("Miss")
                elif attack_table_results == 1:
                    mh_white_attack = 0  # No Damage
                    if last_sim_run == True:
                        rotation.append("Main hand")
                        rotation_time.append(last_mh_attack_time)
                        rotation_status.append("Dodge")
                elif attack_table_results == 2:
                    mh_white_attack = 0  # No Damage
                    if last_sim_run == True:
                        rotation.append("Main hand")
                        rotation_time.append(last_mh_attack_time)
                        rotation_status.append("Parry")
                elif attack_table_results == 3:
                    if target_level - 80 == 3:
                        mh_white_attack = mh_white_attack - (mh_white_attack * .35) - (
                                    (mh_white_attack - (mh_white_attack * .35)) * armor_red_amount)
                        trinket_hit_crit_tracker = 1
                    elif target_level - 80 == 2:
                        mh_white_attack = mh_white_attack - (mh_white_attack * .15) - (
                                    (mh_white_attack - (mh_white_attack * .15)) * armor_red_amount)
                        trinket_hit_crit_tracker = 1
                    else:
                        mh_white_attack = mh_white_attack - (mh_white_attack * .05) - (
                                    (mh_white_attack - (mh_white_attack * .05)) * armor_red_amount)
                        trinket_hit_crit_tracker = 1
                    if last_sim_run == True:
                        rotation.append("Main hand")
                        rotation_time.append(last_mh_attack_time)
                        rotation_status.append("Glance")
                elif attack_table_results == 4:
                    if target_level - 80 == 3:
                        mh_white_attack = mh_white_attack - 119 - ((mh_white_attack - 119) * armor_red_amount)
                        trinket_hit_crit_tracker = 1
                    else:
                        mh_white_attack = mh_white_attack - 72 - ((mh_white_attack - 72) * armor_red_amount)
                        trinket_hit_crit_tracker = 1
                    if last_sim_run == True:
                        rotation.append("Main hand")
                        rotation_time.append(last_mh_attack_time)
                        rotation_status.append("Block")
                elif attack_table_results == 5:
                    mh_white_attack = ((mh_white_attack) - (mh_white_attack * armor_red_amount)) * var_crit_amount
                    trinket_hit_crit_tracker = 2
                    if last_sim_run == True:
                        rotation.append("Main hand")
                        rotation_time.append(last_mh_attack_time)
                        rotation_status.append("Crit")
                elif attack_table_results == 7:
                    mh_white_attack = (mh_white_attack) - (mh_white_attack * armor_red_amount)
                    trinket_hit_crit_tracker = 1
                    if last_sim_run == True:
                        rotation.append("Main hand")
                        rotation_time.append(last_mh_attack_time)
                        rotation_status.append("Hit")
                if mh_white_attack < 0:
                    mh_white_attack = 0
                if dk_presence == 0:
                    mh_white_attack = mh_white_attack + (mh_white_attack * .15)
                if hysteria_active == True:
                    mh_white_attack = mh_white_attack + (mh_white_attack * .2)
                if tricksoftt_active == True:
                    mh_white_attack = mh_white_attack + (mh_white_attack * .15)
                mh_white_attack = mh_white_attack + (mh_white_attack * increased_physical_damage) + (
                            mh_white_attack * increased_all_damage)
                sum_mh_white_attacks += mh_white_attack
                if last_sim_run == True:
                    rotation_damage.append(mh_white_attack)
                last_mh_attack_time = last_mh_attack_time + (mh_speed)
            if necrosis_points != 0:
                if trinket_hit_crit_tracker != 0:
                    atta_num = mh_white_attack * ((necrosis_points * 4) / 100)
                    necrosis_damage += atta_num
                    if last_sim_run == True:
                        rotation.append("Necrosis")
                        rotation_time.append(last_mh_attack_time - mh_speed)
                        rotation_damage.append(atta_num)
                        rotation_status.append("Active")
            if bloodcaked_blades_points != 0:
                if trinket_hit_crit_tracker != 0:
                    if ((random.randint(0, 10000)) / 100) < (bloodcaked_blades_points * 10):
                        attack_table_results = attack_table(1, tanking, H2, True, False, hit_from_gear, hit_from_other,
                                                            target_level, all_expertise_dodge, all_expertise_parry,
                                                            total_crit, standard_10k_random_value, damage_result_number,
                                                            increased_phy_crit)
                        how_many_dots_on_target = 0
                        if dots[0] > current_time:
                            how_many_dots_on_target += 1
                        if dots[1] > current_time:
                            how_many_dots_on_target += 1
                        if dots[2] > current_time:
                            how_many_dots_on_target += 1
                        if attack_table_results == 0:
                            if last_sim_run == True:
                                rotation.append("Blood-Caked Blades")
                                rotation_time.append(last_mh_attack_time - mh_speed)
                                rotation_damage.append(0)
                                rotation_status.append("Miss")
                        if attack_table_results == 1:
                            if last_sim_run == True:
                                rotation.append("Blood-Caked Blades")
                                rotation_time.append(last_mh_attack_time - mh_speed)
                                rotation_damage.append(0)
                                rotation_status.append("Dodge")
                        if attack_table_results == 5:
                            # atta_num = (weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)) * .25
                            atta_num = mh_wep_random_value[damage_result_number] * .25
                            damage_result_number = damage_array_updater(damage_result_number)
                            armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                            atta_num = atta_num + atta_num * (.125 * how_many_dots_on_target)
                            atta_num = atta_num - (atta_num * armor_red_amount)
                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                        atta_num * increased_all_damage)
                            bloodcaked_blades_damage += atta_num
                            if last_sim_run == True:
                                rotation.append("Blood-Caked Blades")
                                rotation_time.append(last_mh_attack_time - mh_speed)
                                rotation_damage.append(atta_num)
                                rotation_status.append("Hit")
                        if attack_table_results == 7:
                            # atta_num = (weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)) * .25
                            atta_num = mh_wep_random_value[damage_result_number] * .25
                            damage_result_number = damage_array_updater(damage_result_number)
                            armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                            atta_num = atta_num + atta_num * (.125 * how_many_dots_on_target)
                            atta_num = atta_num - (atta_num * armor_red_amount)
                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                        atta_num * increased_all_damage)
                            bloodcaked_blades_damage += atta_num
                            if last_sim_run == True:
                                rotation.append("Blood-Caked Blades")
                                rotation_time.append(last_mh_attack_time - mh_speed)
                                rotation_damage.append(atta_num)
                                rotation_status.append("Hit")
                            damage_result_number = damage_array_updater(damage_result_number)

            if swordguard_enchant == True:
                if swordguard_enchant_cd < current_time:
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 100) < 25:
                            if swordguard_buff_active == False:
                                swordguard_buff_active = True
                                if last_sim_run == True:
                                    rotation.append("Swordguard Embroidery")
                                    rotation_time.append(current_time)
                                    rotation_damage.append(0)
                                    rotation_status.append("Proc")
                                swordguard_enchant_cd = current_time + 45
                                swordguard_enchant_active_timer = current_time + 15
                                bonus_loop_ap += 400
                        damage_result_number = damage_array_updater(damage_result_number)
            if sword_berserking_enchant == True:
                if sword_berserking_enchant_hand == "mh":
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 10000) / 100 < ((mh_speed * 1.2 / 60) * 100):
                            berskering_buff_active = True
                            if last_sim_run == True:
                                rotation.append("Berskering Enchant")
                                rotation_time.append(current_time)
                                rotation_damage.append(0)
                                rotation_status.append("Proc")
                            berskering_enchant_active_timer = current_time + 15
                            bonus_loop_ap += 400
                        damage_result_number = damage_array_updater(damage_result_number)
            if rune_of_the_fallen_crusader == True:
                if rune_of_the_fallen_crusader_hand == "mh":
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 10000) / 100 < ((mh_speed * 2 / 60) * 100):
                            if last_sim_run == True:
                                rotation.append("Rune of the Fallen Crusader")
                                rotation_time.append(current_time)
                                rotation_damage.append(0)
                                rotation_status.append("Proc")
                            runeofthefallencrusdaer_active_cd = current_time + 15
                            if runeofthefallencrusader_buff_active == False:
                                runeofthefallc_str_amount = strtoap * .15
                                bonus_loop_str += runeofthefallc_str_amount
                                runeofthefallencrusader_buff_active = True
                        damage_result_number = damage_array_updater(damage_result_number)
            if rune_of_razorice == True:
                if rune_of_razorice_hand == "mh":
                    if trinket_hit_crit_tracker != 0:
                        rune_of_razorice_damage += (mh_white_attack * .02)
                        if last_sim_run == True:
                            rotation.append("Rune of Razoricce")
                            rotation_time.append(current_time)
                            rotation_damage.append(mh_white_attack * .02)
                            rotation_status.append("Active")
            if rune_of_lichbane == True:
                if rune_of_lichbane_hand == "mh":
                    if trinket_hit_crit_tracker != 0:
                        rune_of_lichbane_damage += (mh_white_attack * .02)
                        if last_sim_run == True:
                            rotation.append("Rune of Lichbane")
                            rotation_time.append(current_time)
                            rotation_damage.append(mh_white_attack * .02)
                            rotation_status.append("Active")
            if rune_of_cinderglacier == True:
                if rune_of_cinderglacier_hand == "mh":
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 10000) / 100 < ((mh_speed * 1.5 / 60) * 100):
                            if last_sim_run == True:
                                rotation.append("Rune of Cinderglacier")
                                rotation_time.append(current_time)
                                rotation_damage.append(0)
                                rotation_status.append("Proc")
                            rune_of_cinderglacier_active = True
                            rune_of_cinderglacier_active_count = 0
                        damage_result_number = damage_array_updater(damage_result_number)
            if bloody_vengeance_points != 0:
                if trinket_hit_crit_tracker == 2:
                    if bloody_vengeance_stacks < 3:
                        bloody_vengeance_stacks += 1
                        bloody_vengeance_timer = current_time + 30
                        increased_physical_damage += bloody_vengeance_points / 100
                        if last_sim_run == True:
                            rotation.append("Bloody Vengeance")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Active")
                    else:
                        bloody_vengeance_timer = current_time + 30
                        if last_sim_run == True:
                            rotation.append("Bloody Vengeance")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Refresh")
            # Trinket Buff Check Between MH & OH Swing
            if trinket_1_use == True:
                if trinket1_type == "Active":
                    if trinket1_use_icd < current_time:
                        trinket1_buff_time = current_time + float(trinket1_length)
                        trinket1_use_icd = current_time + float(trinket1_icd)
                        trinket1_used = True
                        if last_sim_run == True:
                            rotation.append(gear[12])
                            rotation_time.append(current_time)
                            rotation_status.append("Active")
                        if trinket1_bonus_type == "Strength":
                            bonus_loop_str += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Agility":
                            bonus_loop_agility += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Stamina":
                            bonus_loop_hp += (float(trinket1_bonus_amount) * 10)
                        elif trinket1_bonus_type == "Intelligence":
                            print("Increased Intel")  # Not even adding this
                        elif trinket1_bonus_type == "Spirit":
                            print("Increased Spirit")  # Not even adding this
                        elif trinket1_bonus_type == "Attack Power":
                            bonus_loop_ap += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Hit Rating":
                            bonus_loop_hit += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Crit Rating":
                            bonus_loop_crit_rating += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Haste Rating":
                            bonus_loop_hit += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Armor Pen":
                            bonus_loop_armor_pen_rating += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Expertise Rating":
                            bonus_loop_expertise_rating += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Armor":
                            print("Increased Armor")  # To be added Later
                        elif trinket1_bonus_type == "Defense Rating":
                            print("Increase Defense Rating")  # To be added Later
                        elif trinket1_bonus_type == "Dodge Rating":
                            print("Increased Dodge Rating")  # To be added Later
                        elif trinket1_bonus_type == "Parry Rating":
                            print("Increased Parry Rating")  # To be added Later
                        elif trinket1_bonus_type == "Damage":
                            # trinket_bonus_damage = random.randint(trinket1_min_damage, trinket1_max_damage)
                            trinket_bonus_damage = trinket1_random_value[damage_result_number]
                            damage_result_number = damage_array_updater(damage_result_number)
                            if last_sim_run == True:
                                rotation_damage.append(trinket_bonus_damage)
                            trinket1_damage += trinket_bonus_damage
                        if trinket1_bonus_type != "Damage":
                            if last_sim_run == True:
                                rotation_damage.append(0)
                elif trinket1_type == "Proc":
                    if trinket1_chanceon == "Hit":
                        if trinket_hit_crit_tracker == 1 or trinket_hit_crit_tracker == 2:  # trinket_hit_crit_tracker = 0 Null, 1 Hit, 2 Crit
                            if trinket1_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket1_chanceperc) > atta_num:
                                    trinket1_use_icd = current_time + float(trinket1_icd)
                                    trinket1_buff_time = current_time + float(trinket1_length)
                                    trinket1_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[12])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket1_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket1_bonus_amount) * 10)
                                    elif trinket1_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket1_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket1_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket1_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket1_min_damage, trinket1_max_damage)
                                        trinket_bonus_damage = trinket1_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket1_damage += trinket_bonus_damage
                                    if trinket1_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
                    elif trinket1_chanceon == "Crit":
                        if trinket_hit_crit_tracker == 2:
                            if trinket1_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket1_chanceperc) > atta_num:
                                    trinket1_use_icd = current_time + float(trinket1_icd)
                                    trinket1_buff_time = current_time + float(trinket1_length)
                                    trinket1_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[12])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket1_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket1_bonus_amount) * 10)
                                    elif trinket1_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket1_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket1_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket1_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket1_min_damage, trinket1_max_damage)
                                        trinket_bonus_damage = trinket1_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket1_damage += trinket_bonus_damage
                                    if trinket1_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
            if trinket_2_use == True:
                if trinket2_type == "Active":
                    if trinket2_use_icd < current_time:
                        trinket2_buff_time = current_time + float(trinket2_length)
                        trinket2_use_icd = current_time + float(trinket2_icd)
                        trinket2_used = True
                        if last_sim_run == True:
                            rotation.append(gear[13])
                            rotation_time.append(current_time)
                            rotation_status.append("Active")
                        if trinket2_bonus_type == "Strength":
                            bonus_loop_str += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Agility":
                            bonus_loop_agility += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Stamina":
                            bonus_loop_hp += (float(trinket2_bonus_amount) * 10)
                        elif trinket2_bonus_type == "Intelligence":
                            print("Increased Intel")  # Not even adding this
                        elif trinket2_bonus_type == "Spirit":
                            print("Increased Spirit")  # Not even adding this
                        elif trinket2_bonus_type == "Attack Power":
                            bonus_loop_ap += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Hit Rating":
                            bonus_loop_hit += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Crit Rating":
                            bonus_loop_crit_rating += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Haste Rating":
                            bonus_loop_hit += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Armor Pen":
                            bonus_loop_armor_pen_rating += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Expertise Rating":
                            bonus_loop_expertise_rating += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Armor":
                            print("Increased Armor")  # To be added Later
                        elif trinket2_bonus_type == "Defense Rating":
                            print("Increase Defense Rating")  # To be added Later
                        elif trinket2_bonus_type == "Dodge Rating":
                            print("Increased Dodge Rating")  # To be added Later
                        elif trinket2_bonus_type == "Parry Rating":
                            print("Increased Parry Rating")  # To be added Later
                        elif trinket2_bonus_type == "Damage":
                            # trinket_bonus_damage = random.randint(trinket2_min_damage, trinket2_max_damage)
                            trinket_bonus_damage = trinket2_random_value[damage_result_number]
                            damage_result_number = damage_array_updater(damage_result_number)
                            if last_sim_run == True:
                                rotation_damage.append(trinket_bonus_damage)
                            trinket2_damage += trinket_bonus_damage
                        if trinket2_bonus_type != "Damage":
                            if last_sim_run == True:
                                rotation_damage.append(0)
                elif trinket2_type == "Proc":
                    if trinket2_chanceon == "Hit":
                        if trinket_hit_crit_tracker == 1 or trinket_hit_crit_tracker == 2:  # trinket_hit_crit_tracker = 0 Null, 1 Hit, 2 Crit
                            if trinket2_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket2_chanceperc) > atta_num:
                                    trinket2_use_icd = current_time + float(trinket2_icd)
                                    trinket2_buff_time = current_time + float(trinket2_length)
                                    trinket2_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[13])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket2_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket2_bonus_amount) * 10)
                                    elif trinket2_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket2_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket2_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket2_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket2_min_damage, trinket2_max_damage)
                                        trinket_bonus_damage = trinket2_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket2_damage += trinket_bonus_damage
                                    if trinket2_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
                    elif trinket2_chanceon == "Crit":
                        if trinket_hit_crit_tracker == 2:
                            if trinket2_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket2_chanceperc) > atta_num:
                                    trinket2_use_icd = current_time + float(trinket2_icd)
                                    trinket2_buff_time = current_time + float(trinket2_length)
                                    trinket2_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[13])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket2_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket2_bonus_amount) * 10)
                                    elif trinket2_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket2_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket2_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket2_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket2_min_damage, trinket2_max_damage)
                                        trinket_bonus_damage = trinket2_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket2_damage += trinket_bonus_damage
                                    if trinket2_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
            trinket_hit_crit_tracker = 0  # Resetting hit/crit tracker after both trinkets
            if H2 == False:
                if last_oh_attack_time <= current_time:
                    # oh_white_wep_roll = weapon_roll(oh_input_lowend_weapon_damage,oh_input_topend_weapon_damage)
                    oh_white_wep_roll = oh_wep_random_value[damage_result_number]
                    damage_result_number = damage_array_updater(damage_result_number)
                    haste_percentage = (total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                    oh_speed = oh_input_weapon_speed / (1 + haste_percentage) / (1 + melee_haste_bonus) / (
                                1 + melee_haste_bonus2) / (1 + melee_haste_bonus3) / (1 + melee_haste_bonus4)
                    if dk_presence == 2:
                        oh_speed = oh_speed / (1 + .15)
                    if icy_talons_points != 0:
                        if dots[0] > current_time:
                            mh_speed = mh_speed / (1 + (icy_talons_points * .04))
                    oh_white_attack = white_attack(oh_white_wep_roll, oh_input_weapon_speed, current_ap)
                    if killing_machine_points != 0:
                        km_proc_chance = (mh_speed * killing_machine_points / 60) * 100
                        km_rand = random.randint(0, 10000) / 100
                        damage_result_number = damage_array_updater(damage_result_number)
                        if km_proc_chance > km_rand:
                            km_procd = True
                    attack_table_results = attack_table(0, tanking, H2, False, True, hit_from_gear, hit_from_other,
                                                        target_level, all_expertise_dodge, all_expertise_parry,
                                                        total_crit, standard_10k_random_value, damage_result_number,
                                                        increased_phy_crit)
                    armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                    if dancing_rune_weapon_points == 1:
                        if dancing_rune_weapon_active == True:
                            if attack_table_results == 0:
                                atta_num = 0  # No Damage
                                if last_sim_run == True:
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(last_oh_attack_time)
                                    rotation_status.append("Miss")
                            elif attack_table_results == 1:
                                atta_num = 0  # No Damage
                                if last_sim_run == True:
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(last_oh_attack_time)
                                    rotation_status.append("Dodge")
                            elif attack_table_results == 2:
                                atta_num = 0  # No Damage
                                if last_sim_run == True:
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(last_oh_attack_time)
                                    rotation_status.append("Parry")
                            elif attack_table_results == 3:
                                if target_level - 80 == 3:
                                    oh_white_attack = oh_white_attack - (oh_white_attack * .35) - (
                                                (oh_white_attack - (oh_white_attack * .35)) * armor_red_amount)
                                    trinket_hit_crit_tracker = 1
                                elif target_level - 80 == 2:
                                    oh_white_attack = oh_white_attack - (oh_white_attack * .15) - (
                                                (oh_white_attack - (oh_white_attack * .15)) * armor_red_amount)
                                    trinket_hit_crit_tracker = 1
                                else:
                                    oh_white_attack = oh_white_attack - (oh_white_attack * .05) - (
                                                (oh_white_attack - (oh_white_attack * .05)) * armor_red_amount)
                                    trinket_hit_crit_tracker = 1
                                if last_sim_run == True:
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(last_oh_attack_time)
                                    rotation_status.append("Glance")
                            elif attack_table_results == 4:
                                if target_level - 80 == 3:
                                    oh_white_attack = oh_white_attack - 119 - (
                                                (oh_white_attack - 119) * armor_red_amount)
                                    trinket_hit_crit_tracker = 1
                                else:
                                    oh_white_attack = oh_white_attack - 72 - ((oh_white_attack - 72) * armor_red_amount)
                                    trinket_hit_crit_tracker = 1
                                if last_sim_run == True:
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(last_oh_attack_time)
                                    rotation_status.append("Block")
                            elif attack_table_results == 5:
                                atta_num = ((oh_white_attack) - (oh_white_attack * armor_red_amount)) * var_crit_amount
                                trinket_hit_crit_tracker = 2
                                if last_sim_run == True:
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(last_oh_attack_time)
                                    rotation_status.append("Crit")
                            elif attack_table_results == 7:
                                atta_num = (oh_white_attack) - (oh_white_attack * armor_red_amount)
                                trinket_hit_crit_tracker = 1
                                if last_sim_run == True:
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(last_oh_attack_time)
                                    rotation_status.append("Hit")
                            if atta_num < 0:
                                atta_num = 0
                            if dk_presence == 0:
                                atta_num = atta_num + (atta_num * .15)
                            if hysteria_active == True:
                                atta_num = atta_num + (atta_num * .2)
                            if tricksoftt_active == True:
                                atta_num = atta_num + (atta_num * .15)
                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                        atta_num * increased_all_damage)
                            atta_num = atta_num * dancing_rune_weapon_damage_multi
                            dancing_rune_weapon_damage += atta_num
                            if last_sim_run == True:
                                rotation_damage.append(atta_num)
                    if attack_table_results == 0:
                        oh_white_attack = 0  # No Damage
                        if last_sim_run == True:
                            rotation.append("Off hand")
                            rotation_time.append(last_oh_attack_time)
                            rotation_status.append("Miss")
                    elif attack_table_results == 1:
                        oh_white_attack = 0  # No Damage
                        if last_sim_run == True:
                            rotation.append("Off hand")
                            rotation_time.append(last_oh_attack_time)
                            rotation_status.append("Dodge")
                    elif attack_table_results == 2:
                        oh_white_attack = 0  # No Damage
                        if last_sim_run == True:
                            rotation.append("Off hand")
                            rotation_time.append(last_oh_attack_time)
                            rotation_status.append("Parry")
                    elif attack_table_results == 3:
                        if target_level - 80 == 3:
                            oh_white_attack = oh_white_attack - (oh_white_attack * .35) - (
                                        (oh_white_attack - (oh_white_attack * .35)) * armor_red_amount)
                            trinket_hit_crit_tracker = 1
                        elif target_level - 80 == 2:
                            oh_white_attack = oh_white_attack - (oh_white_attack * .15) - (
                                        (oh_white_attack - (oh_white_attack * .15)) * armor_red_amount)
                            trinket_hit_crit_tracker = 1
                        else:
                            oh_white_attack = oh_white_attack - (oh_white_attack * .05) - (
                                        (oh_white_attack - (oh_white_attack * .05)) * armor_red_amount)
                            trinket_hit_crit_tracker = 1
                        if last_sim_run == True:
                            rotation.append("Off hand")
                            rotation_time.append(last_oh_attack_time)
                            rotation_status.append("Glance")
                    elif attack_table_results == 4:
                        if target_level - 80 == 3:
                            oh_white_attack = oh_white_attack - 119 - ((oh_white_attack - 119) * armor_red_amount)
                            trinket_hit_crit_tracker = 1
                        else:
                            oh_white_attack = oh_white_attack - 72 - ((oh_white_attack - 72) * armor_red_amount)
                            trinket_hit_crit_tracker = 1
                        if last_sim_run == True:
                            rotation.append("Off hand")
                            rotation_time.append(last_oh_attack_time)
                            rotation_status.append("Block")
                    elif attack_table_results == 5:
                        oh_white_attack = ((oh_white_attack) - (oh_white_attack * armor_red_amount)) * var_crit_amount
                        trinket_hit_crit_tracker = 2
                        if last_sim_run == True:
                            rotation.append("Off hand")
                            rotation_time.append(last_oh_attack_time)
                            rotation_status.append("Crit")
                    elif attack_table_results == 7:
                        oh_white_attack = (oh_white_attack) - (oh_white_attack * armor_red_amount)
                        trinket_hit_crit_tracker = 1
                        if last_sim_run == True:
                            rotation.append("Off hand")
                            rotation_time.append(last_oh_attack_time)
                            rotation_status.append("Hit")
                    if oh_white_attack < 0:
                        oh_white_attack = 0
                    if dk_presence == 0:
                        oh_white_attack = oh_white_attack + (oh_white_attack * .15)
                    oh_white_attack = oh_white_attack * oh_wep_damage_mod
                    if hysteria_active == True:
                        oh_white_attack = oh_white_attack + (oh_white_attack * .2)
                    if tricksoftt_active == True:
                        oh_white_attack = oh_white_attack + (oh_white_attack * .15)
                    oh_white_attack = oh_white_attack + (oh_white_attack * increased_physical_damage) + (
                                oh_white_attack * increased_all_damage)
                    sum_oh_white_attacks += oh_white_attack
                    if last_sim_run == True:
                        rotation_damage.append(oh_white_attack)
                    last_oh_attack_time = last_oh_attack_time + (oh_speed)
            if necrosis_points != 0:
                if trinket_hit_crit_tracker != 0:
                    atta_num = mh_white_attack * ((necrosis_points * 4) / 100)
                    necrosis_damage += atta_num
                    if last_sim_run == True:
                        rotation.append("Necrosis")
                        rotation_time.append(last_oh_attack_time - oh_speed)
                        rotation_damage.append(atta_num)
                        rotation_status.append("Active")
            if bloodcaked_blades_points != 0:
                if trinket_hit_crit_tracker != 0:
                    if ((random.randint(0, 10000)) / 100) < (bloodcaked_blades_points * 10):
                        attack_table_results = attack_table(1, tanking, H2, True, False, hit_from_gear, hit_from_other,
                                                            target_level, all_expertise_dodge, all_expertise_parry,
                                                            total_crit, standard_10k_random_value, damage_result_number,
                                                            increased_phy_crit)
                        how_many_dots_on_target = 0
                        if dots[0] > current_time:
                            how_many_dots_on_target += 1
                        if dots[1] > current_time:
                            how_many_dots_on_target += 1
                        if dots[2] > current_time:
                            how_many_dots_on_target += 1
                        if attack_table_results == 0:
                            if last_sim_run == True:
                                rotation.append("Blood-Caked Blades")
                                rotation_time.append(last_oh_attack_time - oh_speed)
                                rotation_damage.append(0)
                                rotation_status.append("Miss")
                        if attack_table_results == 1:
                            if last_sim_run == True:
                                rotation.append("Blood-Caked Blades")
                                rotation_time.append(last_oh_attack_time - oh_speed)
                                rotation_damage.append(0)
                                rotation_status.append("Dodge")
                        if attack_table_results == 5:
                            # atta_num = (weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)) * .25
                            atta_num = oh_wep_random_value[damage_result_number] * .25
                            damage_result_number = damage_array_updater(damage_result_number)
                            armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                            atta_num = atta_num + atta_num * (.125 * how_many_dots_on_target)
                            atta_num = atta_num - (atta_num * armor_red_amount)
                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                        atta_num * increased_all_damage)
                            bloodcaked_blades_damage += atta_num
                            if last_sim_run == True:
                                rotation.append("Blood-Caked Blades")
                                rotation_time.append(last_oh_attack_time - oh_speed)
                                rotation_damage.append(atta_num)
                                rotation_status.append("Hit")
                        if attack_table_results == 7:
                            # atta_num = (weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)) * .25
                            atta_num = oh_wep_random_value[damage_result_number] * .25
                            damage_result_number = damage_array_updater(damage_result_number)
                            armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                            atta_num = atta_num + atta_num * (.125 * how_many_dots_on_target)
                            atta_num = atta_num - (atta_num * armor_red_amount)
                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                        atta_num * increased_all_damage)
                            bloodcaked_blades_damage += atta_num
                            if last_sim_run == True:
                                rotation.append("Blood-Caked Blades")
                                rotation_time.append(last_oh_attack_time - oh_speed)
                                rotation_damage.append(atta_num)
                                rotation_status.append("Hit")
                    damage_result_number = damage_array_updater(damage_result_number)
            if swordguard_enchant == True:
                if swordguard_enchant_cd < current_time:
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 100) < 25:
                            if swordguard_buff_active == False:
                                swordguard_buff_active = True
                                if last_sim_run == True:
                                    rotation.append("Swordguard Embroidery")
                                    rotation_time.append(current_time)
                                    rotation_damage.append(0)
                                    rotation_status.append("Proc")
                                swordguard_enchant_cd = current_time + 45
                                swordguard_enchant_active_timer = current_time + 15
                                bonus_loop_ap += 400
                        damage_result_number = damage_array_updater(damage_result_number)
            if sword_berserking_enchant == True:
                if sword_berserking_enchant_hand_o == "oh":
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 10000) / 100 < ((oh_speed * 1.2 / 60) * 100):
                            berskering_buff_active = True
                            if last_sim_run == True:
                                rotation.append("Berskering Enchant")
                                rotation_time.append(current_time)
                                rotation_damage.append(0)
                                rotation_status.append("Proc")
                            berskering_enchant_active_timer = current_time + 15
                            bonus_loop_ap += 400
                        damage_result_number = damage_array_updater(damage_result_number)
            if rune_of_the_fallen_crusader == True:
                if rune_of_the_fallen_crusader_hand_o == "oh":
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 10000) / 100 < ((oh_speed * 2 / 60) * 100):
                            if last_sim_run == True:
                                rotation.append("Rune of the Fallen Crusader")
                                rotation_time.append(current_time)
                                rotation_damage.append(0)
                                rotation_status.append("Proc")
                            runeofthefallencrusdaer_active_cd = current_time + 15
                            if runeofthefallencrusader_buff_active == False:
                                runeofthefallc_str_amount = strtoap * .15
                                bonus_loop_str += runeofthefallc_str_amount
                                runeofthefallencrusader_buff_active = True
                        damage_result_number = damage_array_updater(damage_result_number)
            if rune_of_razorice == True:
                if rune_of_razorice_hand_o == "oh":
                    if trinket_hit_crit_tracker != 0:
                        rune_of_razorice_damage += (oh_white_attack * .02)
                        if last_sim_run == True:
                            rotation.append("Rune of Razorice")
                            rotation_time.append(current_time)
                            rotation_damage.append(oh_white_attack * .02)
                            rotation_status.append("Active")
            if rune_of_lichbane == True:
                if rune_of_lichbane_hand_o == "oh":
                    if trinket_hit_crit_tracker != 0:
                        rune_of_lichbane_damage += (oh_white_attack * .02)
                        if last_sim_run == True:
                            rotation.append("Rune of Lichbane")
                            rotation_time.append(current_time)
                            rotation_damage.append(oh_white_attack * .02)
                            rotation_status.append("Active")
            if rune_of_cinderglacier == True:
                if rune_of_cinderglacier_hand_o == "oh":
                    if trinket_hit_crit_tracker != 0:
                        if random.randint(0, 10000) / 100 < ((oh_speed * 1.5 / 60) * 100):
                            if last_sim_run == True:
                                rotation.append("Rune of Cinderglacier")
                                rotation_time.append(current_time)
                                rotation_damage.append(0)
                                rotation_status.append("Proc")
                            rune_of_cinderglacier_active = True
                            rune_of_cinderglacier_active_count = 0
                        damage_result_number = damage_array_updater(damage_result_number)
            if bloody_vengeance_points != 0:
                if trinket_hit_crit_tracker == 2:
                    if bloody_vengeance_stacks < 3:
                        bloody_vengeance_stacks += 1
                        bloody_vengeance_timer = current_time + 30
                        increased_physical_damage += bloody_vengeance_points / 100
                        if last_sim_run == True:
                            rotation.append("Bloody Vengeance")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Active")
                    else:
                        bloody_vengeance_timer = current_time + 30
                        if last_sim_run == True:
                            rotation.append("Bloody Vengeance")
                            rotation_time.append(current_time)
                            rotation_damage.append(0)
                            rotation_status.append("Refresh")
            # Use Trinket After OH Swing
            if trinket_1_use == True:
                if trinket1_type == "Active":
                    if trinket1_use_icd < current_time:
                        trinket1_buff_time = current_time + float(trinket1_length)
                        trinket1_use_icd = current_time + float(trinket1_icd)
                        trinket1_used = True
                        if last_sim_run == True:
                            rotation.append(gear[12])
                            rotation_time.append(current_time)
                            rotation_status.append("Active")
                        if trinket1_bonus_type == "Strength":
                            bonus_loop_str += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Agility":
                            bonus_loop_agility += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Stamina":
                            bonus_loop_hp += (float(trinket1_bonus_amount) * 10)
                        elif trinket1_bonus_type == "Intelligence":
                            print("Increased Intel")  # Not even adding this
                        elif trinket1_bonus_type == "Spirit":
                            print("Increased Spirit")  # Not even adding this
                        elif trinket1_bonus_type == "Attack Power":
                            bonus_loop_ap += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Hit Rating":
                            bonus_loop_hit += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Crit Rating":
                            bonus_loop_crit_rating += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Haste Rating":
                            bonus_loop_hit += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Armor Pen":
                            bonus_loop_armor_pen_rating += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Expertise Rating":
                            bonus_loop_expertise_rating += float(trinket1_bonus_amount)
                        elif trinket1_bonus_type == "Armor":
                            print("Increased Armor")  # To be added Later
                        elif trinket1_bonus_type == "Defense Rating":
                            print("Increase Defense Rating")  # To be added Later
                        elif trinket1_bonus_type == "Dodge Rating":
                            print("Increased Dodge Rating")  # To be added Later
                        elif trinket1_bonus_type == "Parry Rating":
                            print("Increased Parry Rating")  # To be added Later
                        elif trinket1_bonus_type == "Damage":
                            # trinket_bonus_damage = random.randint(trinket1_min_damage, trinket1_max_damage)
                            trinket_bonus_damage = trinket1_random_value[damage_result_number]
                            damage_result_number = damage_array_updater(damage_result_number)
                            if last_sim_run == True:
                                rotation_damage.append(trinket_bonus_damage)
                            trinket1_damage += trinket_bonus_damage
                        if trinket1_bonus_type != "Damage":
                            if last_sim_run == True:
                                rotation_damage.append(0)
                elif trinket1_type == "Proc":
                    if trinket1_chanceon == "Hit":
                        if trinket_hit_crit_tracker == 1 or trinket_hit_crit_tracker == 2:  # trinket_hit_crit_tracker = 0 Null, 1 Hit, 2 Crit
                            if trinket1_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket1_chanceperc) > atta_num:
                                    trinket1_use_icd = current_time + float(trinket1_icd)
                                    trinket1_buff_time = current_time + float(trinket1_length)
                                    trinket1_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[12])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket1_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket1_bonus_amount) * 10)
                                    elif trinket1_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket1_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket1_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket1_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket1_min_damage, trinket1_max_damage)
                                        trinket_bonus_damage = trinket1_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket1_damage += trinket_bonus_damage
                                    if trinket1_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
                    elif trinket1_chanceon == "Crit":
                        if trinket_hit_crit_tracker == 2:
                            if trinket1_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket1_chanceperc) > atta_num:
                                    trinket1_use_icd = current_time + float(trinket1_icd)
                                    trinket1_buff_time = current_time + float(trinket1_length)
                                    trinket1_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[12])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket1_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket1_bonus_amount) * 10)
                                    elif trinket1_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket1_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket1_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket1_bonus_amount)
                                    elif trinket1_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket1_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket1_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket1_min_damage, trinket1_max_damage)
                                        trinket_bonus_damage = trinket1_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket1_damage += trinket_bonus_damage
                                    if trinket1_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
            if trinket_2_use == True:
                if trinket2_type == "Active":
                    if trinket2_use_icd < current_time:
                        trinket2_buff_time = current_time + float(trinket2_length)
                        trinket2_use_icd = current_time + float(trinket2_icd)
                        trinket2_used = True
                        if last_sim_run == True:
                            rotation.append(gear[13])
                            rotation_time.append(current_time)
                            rotation_status.append("Active")
                        if trinket2_bonus_type == "Strength":
                            bonus_loop_str += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Agility":
                            bonus_loop_agility += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Stamina":
                            bonus_loop_hp += (float(trinket2_bonus_amount) * 10)
                        elif trinket2_bonus_type == "Intelligence":
                            print("Increased Intel")  # Not even adding this
                        elif trinket2_bonus_type == "Spirit":
                            print("Increased Spirit")  # Not even adding this
                        elif trinket2_bonus_type == "Attack Power":
                            bonus_loop_ap += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Hit Rating":
                            bonus_loop_hit += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Crit Rating":
                            bonus_loop_crit_rating += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Haste Rating":
                            bonus_loop_hit += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Armor Pen":
                            bonus_loop_armor_pen_rating += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Expertise Rating":
                            bonus_loop_expertise_rating += float(trinket2_bonus_amount)
                        elif trinket2_bonus_type == "Armor":
                            print("Increased Armor")  # To be added Later
                        elif trinket2_bonus_type == "Defense Rating":
                            print("Increase Defense Rating")  # To be added Later
                        elif trinket2_bonus_type == "Dodge Rating":
                            print("Increased Dodge Rating")  # To be added Later
                        elif trinket2_bonus_type == "Parry Rating":
                            print("Increased Parry Rating")  # To be added Later
                        elif trinket2_bonus_type == "Damage":
                            # trinket_bonus_damage = random.randint(trinket2_min_damage, trinket2_max_damage)
                            trinket_bonus_damage = trinket2_random_value[damage_result_number]
                            damage_result_number = damage_array_updater(damage_result_number)
                            if last_sim_run == True:
                                rotation_damage.append(trinket_bonus_damage)
                            trinket2_damage += trinket_bonus_damage
                        if trinket2_bonus_type != "Damage":
                            if last_sim_run == True:
                                rotation_damage.append(0)
                elif trinket2_type == "Proc":
                    if trinket2_chanceon == "Hit":
                        if trinket_hit_crit_tracker == 1 or trinket_hit_crit_tracker == 2:  # trinket_hit_crit_tracker = 0 Null, 1 Hit, 2 Crit
                            if trinket2_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket2_chanceperc) > atta_num:
                                    trinket2_use_icd = current_time + float(trinket2_icd)
                                    trinket2_buff_time = current_time + float(trinket2_length)
                                    trinket2_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[13])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket2_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket2_bonus_amount) * 10)
                                    elif trinket2_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket2_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket2_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket2_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket2_min_damage, trinket2_max_damage)
                                        trinket_bonus_damage = trinket2_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket2_damage += trinket_bonus_damage
                                    if trinket2_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
                    elif trinket2_chanceon == "Crit":
                        if trinket_hit_crit_tracker == 2:
                            if trinket2_use_icd < current_time:
                                atta_num = (random.randint(0, 100) / 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if float(trinket2_chanceperc) > atta_num:
                                    trinket2_use_icd = current_time + float(trinket2_icd)
                                    trinket2_buff_time = current_time + float(trinket2_length)
                                    trinket2_used = True
                                    if last_sim_run == True:
                                        rotation.append(gear[13])
                                        rotation_time.append(current_time)
                                        rotation_status.append("Proc")
                                    if trinket2_bonus_type == "Strength":
                                        bonus_loop_str += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Agility":
                                        bonus_loop_agility += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Stamina":
                                        bonus_loop_hp += (float(trinket2_bonus_amount) * 10)
                                    elif trinket2_bonus_type == "Intelligence":
                                        print("Increased Intel")  # Not even adding this
                                    elif trinket2_bonus_type == "Spirit":
                                        print("Increased Spirit")  # Not even adding this
                                    elif trinket2_bonus_type == "Attack Power":
                                        bonus_loop_ap += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Hit Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Crit Rating":
                                        bonus_loop_crit_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Haste Rating":
                                        bonus_loop_hit += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor Pen":
                                        bonus_loop_armor_pen_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Expertise Rating":
                                        bonus_loop_expertise_rating += float(trinket2_bonus_amount)
                                    elif trinket2_bonus_type == "Armor":
                                        print("Increased Armor")  # To be added Later
                                    elif trinket2_bonus_type == "Defense Rating":
                                        print("Increase Defense Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Dodge Rating":
                                        print("Increased Dodge Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Parry Rating":
                                        print("Increased Parry Rating")  # To be added Later
                                    elif trinket2_bonus_type == "Damage":
                                        # trinket_bonus_damage = random.randint(trinket2_min_damage, trinket2_max_damage)
                                        trinket_bonus_damage = trinket2_random_value[damage_result_number]
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if last_sim_run == True:
                                            rotation_damage.append(trinket_bonus_damage)
                                        trinket2_damage += trinket_bonus_damage
                                    if trinket2_bonus_type != "Damage":
                                        if last_sim_run == True:
                                            rotation_damage.append(0)
            trinket_hit_crit_tracker = 0  # Resetting hit/crit tracker after both trinkets

            if dots[0] >= current_time:  # Frost Fever Damage
                if last_dot0_damage + 3 <= current_time:
                    last_dot0_damage = last_dot0_damage + 3
                    other_frost_fever_damage = 0
                    if amount_of_targets > 1:
                        if multiple_adds_timer >= current_time:
                            dot_multiple_repeate = 1
                            while dot_multiple_repeate < amount_of_targets:
                                atta_num = (current_ap * .055 * 1.15)
                                if black_ice_points == 5:
                                    atta_num = atta_num + (atta_num * .1)
                                elif black_ice_points == 4:
                                    atta_num = atta_num + (atta_num * .08)
                                elif black_ice_points == 3:
                                    atta_num = atta_num + (atta_num * .06)
                                elif black_ice_points == 2:
                                    atta_num = atta_num + (atta_num * .04)
                                elif black_ice_points == 1:
                                    atta_num = atta_num + (atta_num * .02)
                                if glyph_frost_fever == True:
                                    atta_num = atta_num + (atta_num * .20)
                                if crypt_fever_points != 0:
                                    if dots[2] >= current_time:
                                        atta_num += atta_num * disease_bonus_damage_amount
                                atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                            atta_num * increased_all_damage)
                                other_frost_fever_damage += atta_num
                                dot_multiple_repeate += 1
                    atta_num = (current_ap * .055 * 1.15)
                    if black_ice_points == 5:
                        atta_num = atta_num + (atta_num * .1)
                    elif black_ice_points == 4:
                        atta_num = atta_num + (atta_num * .08)
                    elif black_ice_points == 3:
                        atta_num = atta_num + (atta_num * .06)
                    elif black_ice_points == 2:
                        atta_num = atta_num + (atta_num * .04)
                    elif black_ice_points == 1:
                        atta_num = atta_num + (atta_num * .02)
                    if glyph_frost_fever == True:
                        atta_num = atta_num + (atta_num * .20)
                    if crypt_fever_points != 0:
                        if dots[2] >= current_time:
                            atta_num += atta_num * disease_bonus_damage_amount
                    atta_num = atta_num + (atta_num * increased_spell_damage) + (atta_num * increased_all_damage)
                    if last_sim_run == True:
                        rotation.append("Frost Fever")
                        rotation_time.append(last_dot0_damage)
                        rotation_status.append("DOT")
                        rotation_damage.append(atta_num + other_frost_fever_damage)
                    sum_dot0_damage += atta_num + other_frost_fever_damage
                    if wandering_plague_points != 0:
                        if (random.randint(0, 10000)) / 100 < total_crit * 100:
                            if wandering_plague_points == 1:
                                atta_num = atta_num * .33
                            if wandering_plague_points == 2:
                                atta_num = atta_num * .66
                            if wandering_plague_points == 3:
                                atta_num = atta_num
                            atta_num = atta_num * amount_of_targets
                            if last_sim_run == True:
                                rotation.append("Wandering Plague")
                                rotation_time.append(last_dot0_damage)
                                rotation_status.append("Proc")
                                rotation_damage.append(atta_num)
                            wandering_plague_damage += atta_num
                        damage_result_number = damage_array_updater(damage_result_number)

            if dots[1] >= current_time:  # Blood Plague Damage
                if last_dot1_damage + 3 <= current_time:
                    last_dot1_damage = last_dot1_damage + 3
                    other_blood_plague_damage = 0
                    if amount_of_targets > 1:
                        if multiple_adds_timer_bp >= current_time:
                            dot_multiple_repeate = 1
                            while dot_multiple_repeate < amount_of_targets:
                                atta_num = (current_ap * (211 / 3333)) + (0.394 * 80) + 127
                                if t9_dps_four_set == True:
                                    crit = spell_crit((total_crit), spell_hit_total, increased_spell_hit, target_level,
                                                      increased_spell_crit)
                                    if crit == True:
                                        atta_num = atta_num * var_crit_amount
                                if black_ice_points == 5:
                                    atta_num = atta_num + (atta_num * .1)
                                elif black_ice_points == 4:
                                    atta_num = atta_num + (atta_num * .08)
                                elif black_ice_points == 3:
                                    atta_num = atta_num + (atta_num * .06)
                                elif black_ice_points == 2:
                                    atta_num = atta_num + (atta_num * .04)
                                elif black_ice_points == 1:
                                    atta_num = atta_num + (atta_num * .02)
                                if crypt_fever_points != 0:
                                    if dots[2] >= current_time:
                                        atta_num += atta_num * disease_bonus_damage_amount
                                atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                            atta_num * increased_all_damage)
                                other_blood_plague_damage += atta_num
                                dot_multiple_repeate += 1
                    atta_num = (current_ap * (211 / 3333)) + (0.394 * 80) + 127
                    if t9_dps_four_set == True:
                        crit = spell_crit((total_crit), spell_hit_total, increased_spell_hit, target_level,
                                          increased_spell_crit)
                        if crit == True:
                            atta_num = atta_num * var_crit_amount
                            if last_sim_run == True:
                                rotation_status.append("Crit")
                        else:
                            if last_sim_run == True:
                                rotation_status.append("DOT")
                    elif t9_dps_four_set == False:
                        if last_sim_run == True:
                            rotation_status.append("DOT")
                    if black_ice_points == 5:
                        atta_num = atta_num + (atta_num * .1)
                    elif black_ice_points == 4:
                        atta_num = atta_num + (atta_num * .08)
                    elif black_ice_points == 3:
                        atta_num = atta_num + (atta_num * .06)
                    elif black_ice_points == 2:
                        atta_num = atta_num + (atta_num * .04)
                    elif black_ice_points == 1:
                        atta_num = atta_num + (atta_num * .02)
                    if crypt_fever_points != 0:
                        if dots[2] >= current_time:
                            atta_num += atta_num * disease_bonus_damage_amount
                    atta_num = atta_num + (atta_num * increased_spell_damage) + (atta_num * increased_all_damage)
                    if last_sim_run == True:
                        rotation.append("Blood Plague")
                        rotation_time.append(last_dot1_damage)
                        rotation_damage.append(atta_num + other_blood_plague_damage)
                    sum_dot1_damage += atta_num + other_blood_plague_damage
                    if wandering_plague_points != 0:
                        if (random.randint(0, 10000)) / 100 < total_crit * 100:
                            if wandering_plague_points == 1:
                                atta_num = atta_num * .33
                            if wandering_plague_points == 2:
                                atta_num = atta_num * .66
                            if wandering_plague_points == 3:
                                atta_num = atta_num
                            atta_num = atta_num * amount_of_targets
                            if last_sim_run == True:
                                rotation.append("Wandering Plague")
                                rotation_time.append(last_dot1_damage)
                                rotation_status.append("Proc")
                                rotation_damage.append(atta_num)
                            wandering_plague_damage += atta_num
                        damage_result_number = damage_array_updater(damage_result_number)
            if dots[2] >= current_time:  # Crypt Fever
                if last_dot2_damage + 3 <= current_time:
                    if last_sim_run == True:
                        rotation.append("Crypt Fever")
                        rotation_time.append(last_dot2_damage)
                        rotation_status.append("DOT")
                        rotation_damage.append(0)

            # Death and Decay Damage Tick
            while death_n_decay_apply_time >= death_and_decay_last_damage_time:
                death_and_decay_last_damage_time = death_and_decay_last_damage_time + 1
                for dnd_multi in range(amount_of_targets):
                    rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, current_power, gcd, \
                        death_and_decay_damage, death_and_decay_last_damage_time, death_n_decay_apply_time, death_and_decay_cd, damage_result_number = death_and_decay_cast(
                        spell_hit_total, increased_spell_hit, target_level, total_crit, increased_spell_crit,
                        current_time,
                        dk_presence, input_gcd, dots, haste_percentage, current_ap, impurity_points, gcd, used_gcd,
                        death_and_decay_cd, death_and_decay_cd_length,
                        var_crit_amount, black_ice_points, rage_of_rivendale_points, hysteria_active, tricksoftt_active,
                        increased_spell_damage, max_runic, death_n_decay_apply_time,
                        increased_all_damage, current_power, glyph_death_and_decay, scourgelords_plate_two_set,
                        death_and_decay_damage, death_and_decay_last_damage_time, standard_10k_random_value,
                        damage_result_number,
                        initial_hit=False)
                    if last_sim_run == True:
                        rotation.extend(rotation_a)
                        rotation_time.extend(rotation_time_a)
                        rotation_status.extend(rotation_status_a)
                        rotation_damage.extend(rotation_damage_a)
                # death_and_decay_last_damage_time = death_and_decay_last_damage_time + 1

            # Garg Attack
            if gary_active == True:
                for gary_multi in range(6):
                    rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, current_power, gcd, gargoyle_cd, garg_last_damage_cast, garg_damage, \
                        gary_active, garg_summon_time, garg_ap, cast_army, cast_army_timer, damage_result_number = gargoyle_cast(
                        spell_hit_total, increased_spell_hit, target_level, total_crit, increased_spell_crit,
                        current_time, melee_haste_bonus2, melee_haste_bonus3, melee_haste_bonus4,
                        dk_presence, input_gcd, current_ap, gcd, used_gcd, var_crit_amount, black_ice_points, max_runic,
                        castable, melee_haste_bonus, gargoyle_cd, garg_damage,
                        current_power, garg_ap, garg_summon_time, garg_last_damage_cast, total_haste_rating,
                        last_rune_change, improved_unholy_presence_points, personal_buff_orc_pet_damage, cast_army,
                        cast_army_timer,
                        damage_result_number, standard_10k_random_value, gargoyle_random_value, initial_cast=False)
                    if last_sim_run == True:
                        rotation.extend(rotation_a)
                        rotation_time.extend(rotation_time_a)
                        rotation_status.extend(rotation_status_a)
                        rotation_damage.extend(rotation_damage_a)

            # Frost Rotation First
            if dk_spec == 0:  # Frost Spec
                if amount_of_targets == 1:  # Single Target Fight
                    if deathchill_points == 1:
                        if deathchill_active == True:
                            if deathchill_timer < current_time:
                                deathchill_active = False
                        if deathchill_cd < current_time:
                            if dots[0] > current_time:
                                if dots[1] > current_time:
                                    if last_sim_run == True:
                                        rotation.append("Death Chill")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Active")
                                        rotation_damage.append(0)
                                    deathchill_active = True
                                    deathchill_cd = current_time + 120
                                    deathchill_timer = current_time + 30
                    if ua_buff_timer >= current_time:
                        if ua_used == False:
                            ua_used = True
                            bonus_loop_str += ua_strength_increase_amount
                    elif ua_buff_timer < current_time:
                        ua_used = False
                        bonus_loop_str -= ua_strength_increase_amount
                        ua_strength_increase_amount = 0
                    if skip_erw == False:
                        if all_rune_check(blood, current_time, rune_cd_tracker) == 3:  # Empowered Rune Weapon
                            if all_rune_check(frost, current_time, rune_cd_tracker) == 3:
                                if all_rune_check(unholy, current_time, rune_cd_tracker) == 3:
                                    if all_rune_check(death, current_time, rune_cd_tracker) == 3:
                                        if all_rune_check(death_f, current_time, rune_cd_tracker) == 3:
                                            if all_rune_check(death_u, current_time, rune_cd_tracker) == 3:
                                                if erw_cd_timer < current_time:
                                                    if rune_cd_tracker[0] != 10000:
                                                        rune_reset_1 = 0
                                                    else:
                                                        rune_reset_1 = 6
                                                    if rune_cd_tracker[1] != 10000:
                                                        rune_reset_2 = 1
                                                    else:
                                                        rune_reset_2 = 7
                                                    if rune_cd_tracker[2] != 10000:
                                                        rune_reset_3 = 2
                                                    else:
                                                        rune_reset_3 = 8
                                                    if rune_cd_tracker[3] != 10000:
                                                        rune_reset_4 = 3
                                                    else:
                                                        rune_reset_4 = 9
                                                    if rune_cd_tracker[4] != 10000:
                                                        rune_reset_5 = 4
                                                    else:
                                                        rune_reset_5 = 10
                                                    if rune_cd_tracker[5] != 10000:
                                                        rune_reset_6 = 5
                                                    else:
                                                        rune_reset_6 = 11
                                                    if last_sim_run == True:
                                                        rotation.append("Empowered Rune Weapon")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(0)
                                                    current_power = runic_power(25, current_power, max_runic)
                                                    # rune_cd_tracker = [0, 0, 0, 0, 0, 0, 10000, 10000, 10000, 10000, 10000, 10000]
                                                    rune_cd_tracker[rune_reset_1] = 0
                                                    rune_cd_tracker[rune_reset_2] = 0
                                                    rune_cd_tracker[rune_reset_3] = 0
                                                    rune_cd_tracker[rune_reset_4] = 0
                                                    rune_cd_tracker[rune_reset_5] = 0
                                                    rune_cd_tracker[rune_reset_6] = 0
                                                    erw_cd_timer = current_time + 300
                    if current_time >= horn:  # Horn       #Prob set all of these below after like if amount_of_targets >= 1, else run a sim w/ howling blast and stuff
                        if dk_presence != 2:
                            gcd = input_gcd / (1 + haste_percentage)
                            if gcd < 1:
                                gcd = 1
                        current_power = runic_power(10, current_power, max_runic)
                        if last_sim_run == True:
                            rotation.append("Horn of Winter")
                            rotation_time.append(current_time)
                            rotation_status.append("Active")
                            rotation_damage.append(0)
                        horn += horn_timer
                        current_time += gcd
                        used_gcd = True
                        continue

                    if dots[0] > current_time:  # Use Blood Tap
                        if dots[1] > current_time:
                            castable = all_rune_check(blood, current_time, rune_cd_tracker)
                            if castable == 3:
                                if rune_cd_tracker[6] == 10000:
                                    if rune_cd_tracker[7] == 10000:
                                        if blood_tap_cd <= current_time:
                                            blood_tap_cd = current_time + 60
                                            if last_sim_run == True:
                                                rotation.append("Blood Tap")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Active")
                                                rotation_damage.append(0)
                                            haste_percentage = (
                                                                           total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                            haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                             last_rune_change[castable + 6])
                                            if improved_unholy_presence_points != 0:
                                                if dk_presence == 2:
                                                    haste_rune_cd = haste_rune_cd - (haste_rune_cd * (
                                                                (improved_unholy_presence_points * 5) / 100))
                                            if rune_cd_tracker[0] < rune_cd_tracker[1]:
                                                castable = 0
                                                death_castable = castable + death
                                                haste_percentage = (
                                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                                haste_rune_cd = 0
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                            else:
                                                castable = 1
                                                death_castable = castable + death
                                                haste_percentage = (
                                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                                haste_rune_cd = 0
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000

                    if skip_disease == False:
                        if dots[0] <= current_time:  # Cast Icy Touch First Global
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=1, n_unholy=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot0_damage, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, damage_result_number = icy_touch_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    total_crit, rime_points, increased_spell_crit, total_haste_rating,
                                    current_time, last_rune_change, castable, improved_unholy_presence_points,
                                    rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                    sigil_of_the_frozen_conscience, current_ap, impurity_points, var_crit_amount,
                                    improved_icy_touch_points, black_ice_points, glacier_rot_points,
                                    dots, tundra_stalker_points, merciless_combat_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active,
                                    fight_length, fight_sub_35percent, increased_spell_damage, increased_all_damage,
                                    sum_it_attacks, current_power, max_runic,
                                    chill_of_the_grave_points, dot_length, crypt_fever_points,
                                    rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage,
                                    damage_result_number, standard_10k_random_value, icy_touch_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                        if dots[1] <= current_time:  # Plague Strike, Second Global
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=0, n_unholy=1)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot1_damage, \
                                    current_power, dots, gcd, trinket_hit_crit_tracker, sum_ps_attacks, sigil_of_strife_active, sigil_of_strife_timer, bonus_loop_ap, \
                                    sum_oh_ps_attacks, dancing_rune_weapon_damage, damage_result_number = plague_strike_cast(
                                    tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                    all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, scourgeborne_plate_two_set, vicious_strikes_points,
                                    current_armor, armor_penetration, mh_input_lowend_weapon_damage,
                                    mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                    total_haste_rating, current_time, last_rune_change, castable,
                                    improved_unholy_presence_points, dk_presence, input_gcd, dancing_rune_weapon_points,
                                    dancing_rune_weapon_active, var_crit_amount,
                                    tundra_stalker_points, dots, outbreak_points, rage_of_rivendale_points,
                                    glyph_plague_strike, hysteria_active, tricksoftt_active,
                                    increased_physical_damage, increased_all_damage, dancing_rune_weapon_damage_multi,
                                    dancing_rune_weapon_damage, dot_length,
                                    crypt_fever_points, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                    oh_input_topend_weapon_damage,
                                    sum_oh_ps_attacks, oh_wep_damage_mod, rune_cd_tracker, sum_ps_attacks,
                                    current_power,
                                    max_runic, dirge_points, sigil_of_strife, bonus_loop_ap, sigil_of_strife_amount,
                                    sigil_of_strife_active, sigil_of_strife_timer,
                                    trinket_hit_crit_tracker, mh_wep_random_value, oh_wep_random_value,
                                    standard_10k_random_value, damage_result_number, standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue
                    if pestilence_allow_reset == False:
                        if (dots[0] - pestilence_reset_window) > 0 and (
                                dots[0] - pestilence_reset_window) < current_time:  # Refresh Icy Touch
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=1, n_unholy=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot0_damage, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, damage_result_number = icy_touch_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    total_crit, rime_points, increased_spell_crit, total_haste_rating,
                                    current_time, last_rune_change, castable, improved_unholy_presence_points,
                                    rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                    sigil_of_the_frozen_conscience, current_ap, impurity_points, var_crit_amount,
                                    improved_icy_touch_points, black_ice_points, glacier_rot_points,
                                    dots, tundra_stalker_points, merciless_combat_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active,
                                    fight_length, fight_sub_35percent, increased_spell_damage, increased_all_damage,
                                    sum_it_attacks, current_power, max_runic,
                                    chill_of_the_grave_points, dot_length, crypt_fever_points,
                                    rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage,
                                    damage_result_number, standard_10k_random_value, icy_touch_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                        if (dots[1] - pestilence_reset_window) > 0 and (
                                dots[1] - pestilence_reset_window) < current_time:  # Refresh Plague Strike
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=0, n_unholy=1)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot1_damage, \
                                    current_power, dots, gcd, trinket_hit_crit_tracker, sum_ps_attacks, sigil_of_strife_active, sigil_of_strife_timer, bonus_loop_ap, \
                                    sum_oh_ps_attacks, dancing_rune_weapon_damage, damage_result_number = plague_strike_cast(
                                    tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                    all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, scourgeborne_plate_two_set, vicious_strikes_points,
                                    current_armor, armor_penetration, mh_input_lowend_weapon_damage,
                                    mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                    total_haste_rating, current_time, last_rune_change, castable,
                                    improved_unholy_presence_points, dk_presence, input_gcd, dancing_rune_weapon_points,
                                    dancing_rune_weapon_active, var_crit_amount,
                                    tundra_stalker_points, dots, outbreak_points, rage_of_rivendale_points,
                                    glyph_plague_strike, hysteria_active, tricksoftt_active,
                                    increased_physical_damage, increased_all_damage, dancing_rune_weapon_damage_multi,
                                    dancing_rune_weapon_damage, dot_length,
                                    crypt_fever_points, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                    oh_input_topend_weapon_damage,
                                    sum_oh_ps_attacks, oh_wep_damage_mod, rune_cd_tracker, sum_ps_attacks,
                                    current_power,
                                    max_runic, dirge_points, sigil_of_strife, bonus_loop_ap, sigil_of_strife_amount,
                                    sigil_of_strife_active, sigil_of_strife_timer,
                                    trinket_hit_crit_tracker, mh_wep_random_value, oh_wep_random_value,
                                    standard_10k_random_value, damage_result_number, standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                    if (dots[0] - pestilence_reset_window) > 0 and (
                            dots[0] - pestilence_reset_window) < current_time:  # Pestilence
                        if (dots[1] - pestilence_reset_window) > 0 and (
                                dots[1] - pestilence_reset_window) < current_time:
                            if pestilence_allow_reset == True:
                                if current_time - dots[0] == 0:
                                    continue
                                if current_time - dots[1] == 0:
                                    continue
                                able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                    rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                    total_haste_rating, last_rune_change,
                                    n_blood=1, n_frost=0, n_unholy=0)
                                if able_to_cast == 1:
                                    rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                        current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, \
                                        gcd, rune_of_cinderglacier_damage, multiple_adds_timer, multiple_adds_timer_bp, damage_result_number = pestilence_cast(
                                        spell_hit_total, increased_spell_hit, target_level, total_crit,
                                        increased_spell_crit, total_haste_rating, current_time, last_rune_change,
                                        castable, improved_unholy_presence_points, dk_presence, input_gcd,
                                        rune_cd_tracker, dots, dot_length, crypt_fever_points, multiple_adds_timer,
                                        var_crit_amount, black_ice_points, tundra_stalker_points,
                                        rage_of_rivendale_points, hysteria_active, tricksoftt_active,
                                        increased_spell_damage,
                                        increased_all_damage, sum_pest_attacks, current_power, max_runic,
                                        blood_of_the_north_points, just_used_death_rune, death, reaping_points,
                                        rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                        rune_of_cinderglacier_damage, pestilence_allow_reset, multiple_adds_timer_bp,
                                        standard_10k_random_value, damage_result_number, pestilence_random_value,
                                        standard_random_value)
                                    if last_sim_run == True:
                                        rotation.extend(rotation_a)
                                        rotation_time.extend(rotation_time_a)
                                        rotation_status.extend(rotation_status_a)
                                        rotation_damage.extend(rotation_damage_a)
                                    continue

                    if current_time < 10 and frost_def_setup == True:
                        if dots[0] == dots[1] and pestilence_allow_reset == True and blood_tap_cd <= current_time:
                            if current_time - dots[0] == 0:
                                continue
                            if current_time - dots[1] == 0:
                                continue
                            castable = all_rune_check(blood, current_time, rune_cd_tracker)
                            if castable == 3 or castable != 3:
                                if rune_cd_tracker[6] == 10000 or rune_cd_tracker[7] == 10000:
                                    if blood_tap_cd <= current_time:
                                        blood_tap_cd = current_time + 60
                                        if last_sim_run == True:
                                            rotation.append("Blood Tap")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Active")
                                            rotation_damage.append(0)
                                        haste_percentage = (
                                                                   total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                        haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                         last_rune_change[castable + 6])
                                        if improved_unholy_presence_points != 0:
                                            if dk_presence == 2:
                                                haste_rune_cd = haste_rune_cd - (haste_rune_cd * (
                                                        (improved_unholy_presence_points * 5) / 100))
                                        if rune_cd_tracker[0] < rune_cd_tracker[1]:
                                            castable = 0
                                            death_castable = castable + death
                                            haste_percentage = (
                                                                       total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                            haste_rune_cd = 0
                                            rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                            rune_cd_tracker[castable] = 10000
                                        else:
                                            castable = 1
                                            death_castable = castable + death
                                            haste_percentage = (
                                                                       total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                            haste_rune_cd = 0
                                            rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                            rune_cd_tracker[castable] = 10000
                                            # Use bloodtap
                        if unbreakable_armor_points == 1 and skip_ua == False:  # Unbreakable Armor
                            if ua_cd_timer <= current_time:
                                able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                    rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                    total_haste_rating, last_rune_change,
                                    n_blood=0, n_frost=1, n_unholy=0, n_skip=0, n_reset_window=pestilence_reset_window)
                                if able_to_cast == 1:
                                    if last_sim_run == True:
                                        rotation.append("Unbreakable Armor")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Active")
                                        rotation_damage.append(0)
                                    ua_cd_timer = current_time + unbreak_armor_bone_shield_vamp_blood_cd_time
                                    # Rune Hit
                                    haste_percentage = (
                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                    haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                     last_rune_change[castable + 6])
                                    if improved_unholy_presence_points != 0:
                                        if dk_presence == 2:
                                            haste_rune_cd = haste_rune_cd - (
                                                    haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                                    if dk_presence != 2:
                                        gcd = input_gcd / (1 + haste_percentage)
                                        if gcd < 1:
                                            gcd = 1
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                    ua_buff_timer = current_time + 20
                                    ua_strength_increase_amount = (strtoap * .2)
                                    current_power = runic_power(-10, current_power, max_runic)
                                    current_time += gcd
                                    used_gcd = True
                                    continue
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=0, n_frost=1, n_unholy=1, n_skip=0, n_reset_window=0)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, deathchill_active, gcd, dots, \
                                dancing_rune_weapon_damage, trinket_hit_crit_tracker, howling_current_cd, rime_procd, rime_timer, \
                                sigil_of_virulence_timer, sigil_of_virulence_buff, bonus_loop_str, sigil_of_hanged_man_buff, sigil_of_hanged_man_timer, \
                                sigil_of_hanged_man_count, rune_cd_tracker, sum_oh_obil_attacks, current_time, used_gcd, sum_obil_attacks, current_power, damage_result_number = obliterate_cast(
                                deathchill_active, tanking, H2, hit_from_gear, hit_from_other, target_level,
                                all_expertise_dodge, all_expertise_parry, total_crit,
                                annihilation_talent_points, rime_points, increased_phy_crit,
                                scourgeborne_battlegear_two_set, subversion_points, current_armor, armor_penetration,
                                mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage,
                                attack_damage_normalization, current_ap, total_haste_rating, current_time,
                                castable, last_rune_change, dk_presence, improved_unholy_presence_points, input_gcd,
                                dots, dancing_rune_weapon_points, dancing_rune_weapon_active,
                                darkruned_battlegear_four_set, var_crit_amount, guile_of_gorefiend_points,
                                tundra_stalker_points, merciless_combat_points, fight_length, fight_sub_35percent,
                                rage_of_rivendale_points,
                                scourgelords_battlegear_two_set, hysteria_active, tricksoftt_active, extra_obli_damage,
                                increased_physical_damage,
                                increased_all_damage, dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage,
                                sigil_of_virulence, sigil_of_virulence_buff,
                                bonus_loop_str, sigil_of_hanged_man, sigil_of_hanged_man_count,
                                death_rune_mastery_points, just_used_death_rune, castable1, sigil_of_awareness,
                                rune_cd_tracker, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                oh_input_topend_weapon_damage, oh_wep_damage_mod,
                                sum_oh_obil_attacks, current_power, max_runic, sum_obil_attacks,
                                chill_of_the_grave_points, scourgeborne_battlegear_four_set, howling_current_cd,
                                rime_procd, rime_timer, sigil_of_virulence_timer, sigil_of_hanged_man_buff,
                                sigil_of_hanged_man_timer, trinket_hit_crit_tracker,
                                mh_wep_random_value, oh_wep_random_value, standard_10k_random_value,
                                damage_result_number, standard_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue
                        if frost_strike_points == 1:
                            if current_power >= frost_strike_cost:  # Frost Strike
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, \
                                    current_power, dots, gcd, trinket_hit_crit_tracker, km_procd, deathchill_active, sum_oh_fs_attacks, rune_of_cinderglacier_active, \
                                    rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, sum_fs_attacks, sum_oh_fs_attacks, damage_result_number = frost_strike_cast(
                                    km_procd, tanking, H2, hit_from_gear, hit_from_other, target_level,
                                    all_expertise_dodge, all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, darkruned_battlegear_two_set, deathchill_active, current_armor,
                                    armor_penetration, mh_input_lowend_weapon_damage,
                                    mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                    total_haste_rating, current_time, last_rune_change, castable,
                                    improved_unholy_presence_points, dk_presence, input_gcd,
                                    threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                    oh_input_topend_weapon_damage,
                                    var_crit_amount, guile_of_gorefiend_points, sigil_of_vengeful_heart,
                                    black_ice_points, glacier_rot_points, dots, tundra_stalker_points,
                                    merciless_combat_points, blood_of_the_north_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active, sum_oh_fs_attacks,
                                    increased_physical_damage, increased_all_damage, fight_length, fight_sub_35percent,
                                    oh_wep_damage_mod, rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, frost_strike_cost,
                                    current_power, max_runic, sum_fs_attacks, trinket_hit_crit_tracker,
                                    mh_wep_random_value, oh_wep_random_value, standard_10k_random_value,
                                    damage_result_number, standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue
                        if dots[0] != dots[1] and pestilence_allow_reset == True:
                            if current_time - dots[0] == 0:
                                continue
                            if current_time - dots[1] == 0:
                                continue
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=1, n_frost=0, n_unholy=0, n_skip=0, n_reset_window=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, \
                                    gcd, rune_of_cinderglacier_damage, multiple_adds_timer, multiple_adds_timer_bp, damage_result_number = pestilence_cast(
                                    spell_hit_total, increased_spell_hit, target_level, total_crit,
                                    increased_spell_crit, total_haste_rating, current_time, last_rune_change,
                                    castable, improved_unholy_presence_points, dk_presence, input_gcd, rune_cd_tracker,
                                    dots, dot_length, crypt_fever_points, multiple_adds_timer,
                                    var_crit_amount, black_ice_points, tundra_stalker_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active, increased_spell_damage,
                                    increased_all_damage, sum_pest_attacks, current_power, max_runic,
                                    blood_of_the_north_points, just_used_death_rune, death, reaping_points,
                                    rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                    rune_of_cinderglacier_damage, pestilence_allow_reset, multiple_adds_timer_bp,
                                    standard_10k_random_value, damage_result_number, pestilence_random_value,
                                    standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                    if unbreakable_armor_points == 1 and skip_ua == False:  # Unbreakable Armor
                        if ua_cd_timer <= current_time:
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=1, n_unholy=0, n_skip=1, n_reset_window=pestilence_reset_window)
                            if able_to_cast == 1:
                                if last_sim_run == True:
                                    rotation.append("Unbreakable Armor")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Active")
                                    rotation_damage.append(0)
                                ua_cd_timer = current_time + unbreak_armor_bone_shield_vamp_blood_cd_time
                                # Rune Hit
                                haste_percentage = (
                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                 last_rune_change[castable + 6])
                                if improved_unholy_presence_points != 0:
                                    if dk_presence == 2:
                                        haste_rune_cd = haste_rune_cd - (
                                                    haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                                if dk_presence != 2:
                                    gcd = input_gcd / (1 + haste_percentage)
                                    if gcd < 1:
                                        gcd = 1
                                rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                ua_buff_timer = current_time + 20
                                ua_strength_increase_amount = (strtoap * .2)
                                current_power = runic_power(-10, current_power, max_runic)
                                current_time += gcd
                                used_gcd = True
                                continue

                    # Obliterate
                    able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                        rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                        total_haste_rating, last_rune_change,
                        n_blood=0, n_frost=1, n_unholy=1, n_skip=1, n_reset_window=pestilence_reset_window)
                    if able_to_cast == 1:
                        rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, deathchill_active, gcd, dots, \
                            dancing_rune_weapon_damage, trinket_hit_crit_tracker, howling_current_cd, rime_procd, rime_timer, \
                            sigil_of_virulence_timer, sigil_of_virulence_buff, bonus_loop_str, sigil_of_hanged_man_buff, sigil_of_hanged_man_timer, \
                            sigil_of_hanged_man_count, rune_cd_tracker, sum_oh_obil_attacks, current_time, used_gcd, sum_obil_attacks, current_power, damage_result_number = obliterate_cast(
                            deathchill_active, tanking, H2, hit_from_gear, hit_from_other, target_level,
                            all_expertise_dodge, all_expertise_parry, total_crit,
                            annihilation_talent_points, rime_points, increased_phy_crit,
                            scourgeborne_battlegear_two_set, subversion_points, current_armor, armor_penetration,
                            mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage,
                            attack_damage_normalization, current_ap, total_haste_rating, current_time,
                            castable, last_rune_change, dk_presence, improved_unholy_presence_points, input_gcd,
                            dots, dancing_rune_weapon_points, dancing_rune_weapon_active,
                            darkruned_battlegear_four_set, var_crit_amount, guile_of_gorefiend_points,
                            tundra_stalker_points, merciless_combat_points, fight_length, fight_sub_35percent,
                            rage_of_rivendale_points,
                            scourgelords_battlegear_two_set, hysteria_active, tricksoftt_active, extra_obli_damage,
                            increased_physical_damage,
                            increased_all_damage, dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage,
                            sigil_of_virulence, sigil_of_virulence_buff,
                            bonus_loop_str, sigil_of_hanged_man, sigil_of_hanged_man_count,
                            death_rune_mastery_points, just_used_death_rune, castable1, sigil_of_awareness,
                            rune_cd_tracker, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                            oh_input_topend_weapon_damage, oh_wep_damage_mod,
                            sum_oh_obil_attacks, current_power, max_runic, sum_obil_attacks,
                            chill_of_the_grave_points, scourgeborne_battlegear_four_set, howling_current_cd,
                            rime_procd, rime_timer, sigil_of_virulence_timer, sigil_of_hanged_man_buff,
                            sigil_of_hanged_man_timer, trinket_hit_crit_tracker,
                            mh_wep_random_value, oh_wep_random_value, standard_10k_random_value,
                            damage_result_number, standard_random_value)
                        if last_sim_run == True:
                            rotation.extend(rotation_a)
                            rotation_time.extend(rotation_time_a)
                            rotation_status.extend(rotation_status_a)
                            rotation_damage.extend(rotation_damage_a)
                        continue

                    if frost_strike_points == 1:
                        if current_power >= frost_strike_cost:  # Frost Strike
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, \
                                current_power, dots, gcd, trinket_hit_crit_tracker, km_procd, deathchill_active, sum_oh_fs_attacks, rune_of_cinderglacier_active, \
                                rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, sum_fs_attacks, sum_oh_fs_attacks, damage_result_number = frost_strike_cast(
                                km_procd, tanking, H2, hit_from_gear, hit_from_other, target_level,
                                all_expertise_dodge, all_expertise_parry, total_crit, annihilation_talent_points,
                                increased_phy_crit, darkruned_battlegear_two_set, deathchill_active, current_armor,
                                armor_penetration, mh_input_lowend_weapon_damage,
                                mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                total_haste_rating, current_time, last_rune_change, castable,
                                improved_unholy_presence_points, dk_presence, input_gcd,
                                threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                oh_input_topend_weapon_damage,
                                var_crit_amount, guile_of_gorefiend_points, sigil_of_vengeful_heart,
                                black_ice_points, glacier_rot_points, dots, tundra_stalker_points,
                                merciless_combat_points, blood_of_the_north_points, rage_of_rivendale_points,
                                hysteria_active, tricksoftt_active, sum_oh_fs_attacks,
                                increased_physical_damage, increased_all_damage, fight_length, fight_sub_35percent,
                                oh_wep_damage_mod, rune_of_cinderglacier_active,
                                rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, frost_strike_cost,
                                current_power, max_runic, sum_fs_attacks, trinket_hit_crit_tracker,
                                mh_wep_random_value, oh_wep_random_value, standard_10k_random_value,
                                damage_result_number, standard_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    if rime_procd == True:  # Howling Blast on Rime Proc
                        rime_procd = False
                        if rime_timer + 15 > current_time:
                            if howling_blast_points == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, howling_current_cd, sum_hb_attacks, damage_result_number = howling_blast_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    increased_spell_crit, total_haste_rating,
                                    total_crit, current_time, last_rune_change, castable, castable1,
                                    improved_unholy_presence_points, dk_presence, input_gcd, amount_of_targets,
                                    current_ap, impurity_points, var_crit_amount, guile_of_gorefiend_points,
                                    black_ice_points, dots, glacier_rot_points, tundra_stalker_points,
                                    fight_sub_35percent, merciless_combat_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active, increased_spell_damage,
                                    increased_all_damage, rune_of_cinderglacier_active, rune_of_cinderglacier_damage,
                                    rune_of_cinderglacier_active_count,
                                    fight_length, rune_cd_tracker, sum_hb_attacks, chill_of_the_grave_points,
                                    current_power, max_runic, dot_length, glyph_howling_blast,
                                    damage_result_number, standard_10k_random_value, howling_blast_random_value,
                                    free_rime=True)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                    if pestilence_allow_reset == True:
                        # Blood Strike
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0, n_unholy=0, n_skip=1, n_reset_window=pestilence_reset_window)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, current_power, \
                                dots, gcd, trinket_hit_crit_tracker, dancing_rune_weapon_damage, sigil_of_haunted_dreams_buff, sigil_of_haunted_dreams_timer, \
                                total_crit, t9_bonus, t9_cd_timer, t9_active_timer, bonus_loop_str, increased_all_damage, desolation_buff_timer, sudden_doom_damage, \
                                unholy_blight_amount, unholy_blight_timer, rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, \
                                rune_of_cinderglacier_active, sum_bs_attacks, damage_result_number = blood_strike_cast(
                                tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                all_expertise_parry, total_crit, annihilation_talent_points,
                                increased_phy_crit, subversion_points, current_armor, armor_penetration,
                                current_ap, attack_damage_normalization, total_haste_rating, current_time,
                                last_rune_change, castable, dk_presence, improved_unholy_presence_points,
                                dots, input_gcd, dancing_rune_weapon_points, dancing_rune_weapon_active,
                                darkruned_battlegear_four_set, var_crit_amount,
                                guile_of_gorefiend_points, tundra_stalker_points, blood_of_the_north_points,
                                t9_tank_two_set, rage_of_rivendale_points,
                                blood_strikes_points, might_of_mograine_points, hysteria_active, tricksoftt_active,
                                increased_physical_damage, increased_all_damage,
                                dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage, just_used_death_rune,
                                rune_cd_tracker, reaping_points,
                                sigil_of_haunted_dreams, sigil_of_haunted_dreams_buff, t9_dps_two_set, t9_bonus,
                                t9_cd_timer, bonus_loop_str, desolation_points,
                                desolation_buff, desolation_buff_timer, sudden_doom_points, sigil_of_vengeful_heart,
                                spell_hit_total, increased_spell_hit,
                                darkruned_battlegear_two_set, increased_spell_crit, impurity_points,
                                sigil_of_the_wild_buck,
                                black_ice_points, glyph_death_coil, morbitity_points, increased_spell_damage,
                                sudden_doom_damage, unholy_blight_points,
                                rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                rune_of_cinderglacier_damage, death, threat_of_thassarian_points,
                                oh_wep_damage_mod, sum_oh_bs_attacks, current_power, sum_bs_attacks, max_runic,
                                trinket_hit_crit_tracker, sigil_of_haunted_dreams_timer, t9_active_timer,
                                unholy_blight_amount, unholy_blight_timer,
                                damage_result_number, blood_strike_random_value, standard_random_value,
                                standard_10k_random_value, mh_wep_random_value, oh_wep_random_value, 
mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage, oh_input_lowend_weapon_damage, oh_input_topend_weapon_damage)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    if pestilence_allow_reset == False:
                        # Blood Strike
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0, n_unholy=0, n_skip=0, n_reset_window=pestilence_reset_window)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, current_power, \
                                dots, gcd, trinket_hit_crit_tracker, dancing_rune_weapon_damage, sigil_of_haunted_dreams_buff, sigil_of_haunted_dreams_timer, \
                                total_crit, t9_bonus, t9_cd_timer, t9_active_timer, bonus_loop_str, increased_all_damage, desolation_buff_timer, sudden_doom_damage, \
                                unholy_blight_amount, unholy_blight_timer, rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, \
                                rune_of_cinderglacier_active, sum_bs_attacks, damage_result_number = blood_strike_cast(
                                tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                all_expertise_parry, total_crit, annihilation_talent_points,
                                increased_phy_crit, subversion_points, current_armor, armor_penetration,
                                current_ap, attack_damage_normalization, total_haste_rating, current_time,
                                last_rune_change, castable, dk_presence, improved_unholy_presence_points,
                                dots, input_gcd, dancing_rune_weapon_points, dancing_rune_weapon_active,
                                darkruned_battlegear_four_set, var_crit_amount,
                                guile_of_gorefiend_points, tundra_stalker_points, blood_of_the_north_points,
                                t9_tank_two_set, rage_of_rivendale_points,
                                blood_strikes_points, might_of_mograine_points, hysteria_active, tricksoftt_active,
                                increased_physical_damage, increased_all_damage,
                                dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage, just_used_death_rune,
                                rune_cd_tracker, reaping_points,
                                sigil_of_haunted_dreams, sigil_of_haunted_dreams_buff, t9_dps_two_set, t9_bonus,
                                t9_cd_timer, bonus_loop_str, desolation_points,
                                desolation_buff, desolation_buff_timer, sudden_doom_points, sigil_of_vengeful_heart,
                                spell_hit_total, increased_spell_hit,
                                darkruned_battlegear_two_set, increased_spell_crit, impurity_points,
                                sigil_of_the_wild_buck,
                                black_ice_points, glyph_death_coil, morbitity_points, increased_spell_damage,
                                sudden_doom_damage, unholy_blight_points,
                                rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                rune_of_cinderglacier_damage, death, threat_of_thassarian_points,
                                oh_wep_damage_mod, sum_oh_bs_attacks, current_power, sum_bs_attacks, max_runic,
                                trinket_hit_crit_tracker, sigil_of_haunted_dreams_timer, t9_active_timer,
                                unholy_blight_amount, unholy_blight_timer,
                                damage_result_number, blood_strike_random_value, standard_random_value,
                                standard_10k_random_value, mh_wep_random_value, oh_wep_random_value, 
mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage, oh_input_lowend_weapon_damage, oh_input_topend_weapon_damage)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                if amount_of_targets > 1:  # AOE Fight
                    if deathchill_points == 1:
                        if deathchill_active == True:
                            if deathchill_timer < current_time:
                                deathchill_active = False
                        if deathchill_cd < current_time:
                            if dots[0] > current_time:
                                if dots[1] > current_time:
                                    if last_sim_run == True:
                                        rotation.append("Death Chill")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Active")
                                        rotation_damage.append(0)
                                    deathchill_active = True
                                    deathchill_cd = current_time + 120
                                    deathchill_timer = current_time + 30
                    if ua_buff_timer >= current_time:
                        if ua_used == False:
                            ua_used = True
                            bonus_loop_str += ua_strength_increase_amount
                    elif ua_buff_timer < current_time:
                        ua_used = False
                        bonus_loop_str -= ua_strength_increase_amount
                        ua_strength_increase_amount = 0
                    if skip_erw == False:
                        if all_rune_check(blood, current_time, rune_cd_tracker) == 3:  # Empowered Rune Weapon
                            if all_rune_check(frost, current_time, rune_cd_tracker) == 3:
                                if all_rune_check(unholy, current_time, rune_cd_tracker) == 3:
                                    if all_rune_check(death, current_time, rune_cd_tracker) == 3:
                                        if all_rune_check(death_f, current_time, rune_cd_tracker) == 3:
                                            if all_rune_check(death_u, current_time, rune_cd_tracker) == 3:
                                                if erw_cd_timer < current_time:
                                                    if rune_cd_tracker[0] != 10000:
                                                        rune_reset_1 = 0
                                                    else:
                                                        rune_reset_1 = 6
                                                    if rune_cd_tracker[1] != 10000:
                                                        rune_reset_2 = 1
                                                    else:
                                                        rune_reset_2 = 7
                                                    if rune_cd_tracker[2] != 10000:
                                                        rune_reset_3 = 2
                                                    else:
                                                        rune_reset_3 = 8
                                                    if rune_cd_tracker[3] != 10000:
                                                        rune_reset_4 = 3
                                                    else:
                                                        rune_reset_4 = 9
                                                    if rune_cd_tracker[4] != 10000:
                                                        rune_reset_5 = 4
                                                    else:
                                                        rune_reset_5 = 10
                                                    if rune_cd_tracker[5] != 10000:
                                                        rune_reset_6 = 5
                                                    else:
                                                        rune_reset_6 = 11
                                                    if last_sim_run == True:
                                                        rotation.append("Empowered Rune Weapon")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(0)
                                                    current_power = runic_power(25, current_power, max_runic)
                                                    # rune_cd_tracker = [0, 0, 0, 0, 0, 0, 10000, 10000, 10000, 10000, 10000, 10000]
                                                    rune_cd_tracker[rune_reset_1] = 0
                                                    rune_cd_tracker[rune_reset_2] = 0
                                                    rune_cd_tracker[rune_reset_3] = 0
                                                    rune_cd_tracker[rune_reset_4] = 0
                                                    rune_cd_tracker[rune_reset_5] = 0
                                                    rune_cd_tracker[rune_reset_6] = 0
                                                    erw_cd_timer = current_time + 300
                    if current_time >= horn:  # Horn       #Prob set all of these below after like if amount_of_targets >= 1, else run a sim w/ howling blast and stuff
                        if dk_presence != 2:
                            gcd = input_gcd / (1 + haste_percentage)
                            if gcd < 1:
                                gcd = 1
                        current_power = runic_power(10, current_power, max_runic)
                        if last_sim_run == True:
                            rotation.append("Horn of Winter")
                            rotation_time.append(current_time)
                            rotation_status.append("Active")
                            rotation_damage.append(0)
                        horn += horn_timer
                        current_time += gcd
                        used_gcd = True
                        continue

                    if dots[0] > current_time:  # Use Blood Tap
                        if dots[1] > current_time:
                            castable = all_rune_check(blood, current_time, rune_cd_tracker)
                            if castable == 3:
                                if rune_cd_tracker[6] == 10000:
                                    if rune_cd_tracker[7] == 10000:
                                        if blood_tap_cd <= current_time:
                                            blood_tap_cd = current_time + 60
                                            if last_sim_run == True:
                                                rotation.append("Blood Tap")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Active")
                                                rotation_damage.append(0)
                                            haste_percentage = (
                                                                           total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                            haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                             last_rune_change[castable + 6])
                                            if improved_unholy_presence_points != 0:
                                                if dk_presence == 2:
                                                    haste_rune_cd = haste_rune_cd - (haste_rune_cd * (
                                                                (improved_unholy_presence_points * 5) / 100))
                                            if rune_cd_tracker[0] < rune_cd_tracker[1]:
                                                castable = 0
                                                death_castable = castable + death
                                                haste_percentage = (
                                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                                haste_rune_cd = 0
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                            else:
                                                castable = 1
                                                death_castable = castable + death
                                                haste_percentage = (
                                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                                haste_rune_cd = 0
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000

                    if skip_disease == False:
                        if dots[0] <= current_time:  # Cast Icy Touch First Global
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=1, n_unholy=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot0_damage, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, damage_result_number = icy_touch_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    total_crit, rime_points, increased_spell_crit, total_haste_rating,
                                    current_time, last_rune_change, castable, improved_unholy_presence_points,
                                    rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                    sigil_of_the_frozen_conscience, current_ap, impurity_points, var_crit_amount,
                                    improved_icy_touch_points, black_ice_points, glacier_rot_points,
                                    dots, tundra_stalker_points, merciless_combat_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active,
                                    fight_length, fight_sub_35percent, increased_spell_damage, increased_all_damage,
                                    sum_it_attacks, current_power, max_runic,
                                    chill_of_the_grave_points, dot_length, crypt_fever_points,
                                    rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage,
                                    damage_result_number, standard_10k_random_value, icy_touch_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                        if dots[1] <= current_time:  # Plague Strike, Second Global
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=0, n_unholy=1)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot1_damage, \
                                    current_power, dots, gcd, trinket_hit_crit_tracker, sum_ps_attacks, sigil_of_strife_active, sigil_of_strife_timer, bonus_loop_ap, \
                                    sum_oh_ps_attacks, dancing_rune_weapon_damage, damage_result_number = plague_strike_cast(
                                    tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                    all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, scourgeborne_plate_two_set, vicious_strikes_points,
                                    current_armor, armor_penetration, mh_input_lowend_weapon_damage,
                                    mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                    total_haste_rating, current_time, last_rune_change, castable,
                                    improved_unholy_presence_points, dk_presence, input_gcd, dancing_rune_weapon_points,
                                    dancing_rune_weapon_active, var_crit_amount,
                                    tundra_stalker_points, dots, outbreak_points, rage_of_rivendale_points,
                                    glyph_plague_strike, hysteria_active, tricksoftt_active,
                                    increased_physical_damage, increased_all_damage, dancing_rune_weapon_damage_multi,
                                    dancing_rune_weapon_damage, dot_length,
                                    crypt_fever_points, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                    oh_input_topend_weapon_damage,
                                    sum_oh_ps_attacks, oh_wep_damage_mod, rune_cd_tracker, sum_ps_attacks,
                                    current_power,
                                    max_runic, dirge_points, sigil_of_strife, bonus_loop_ap, sigil_of_strife_amount,
                                    sigil_of_strife_active, sigil_of_strife_timer,
                                    trinket_hit_crit_tracker, mh_wep_random_value, oh_wep_random_value,
                                    standard_10k_random_value, damage_result_number, standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue
                    if pestilence_allow_reset == False:
                        if (dots[0] - pestilence_reset_window) > 0 and (
                                dots[0] - pestilence_reset_window) < current_time:  # Refresh Icy Touch
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=1, n_unholy=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot0_damage, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, damage_result_number = icy_touch_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    total_crit, rime_points, increased_spell_crit, total_haste_rating,
                                    current_time, last_rune_change, castable, improved_unholy_presence_points,
                                    rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                    sigil_of_the_frozen_conscience, current_ap, impurity_points, var_crit_amount,
                                    improved_icy_touch_points, black_ice_points, glacier_rot_points,
                                    dots, tundra_stalker_points, merciless_combat_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active,
                                    fight_length, fight_sub_35percent, increased_spell_damage, increased_all_damage,
                                    sum_it_attacks, current_power, max_runic,
                                    chill_of_the_grave_points, dot_length, crypt_fever_points,
                                    rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage,
                                    damage_result_number, standard_10k_random_value, icy_touch_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                    if pestilence_allow_reset == False:
                        if (dots[1] - pestilence_reset_window) > 0 and (
                                dots[1] - pestilence_reset_window) < current_time:  # Refresh Plague Strike
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=0, n_unholy=1)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot1_damage, \
                                    current_power, dots, gcd, trinket_hit_crit_tracker, sum_ps_attacks, sigil_of_strife_active, sigil_of_strife_timer, bonus_loop_ap, \
                                    sum_oh_ps_attacks, dancing_rune_weapon_damage, damage_result_number = plague_strike_cast(
                                    tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                    all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, scourgeborne_plate_two_set, vicious_strikes_points,
                                    current_armor, armor_penetration, mh_input_lowend_weapon_damage,
                                    mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                    total_haste_rating, current_time, last_rune_change, castable,
                                    improved_unholy_presence_points, dk_presence, input_gcd, dancing_rune_weapon_points,
                                    dancing_rune_weapon_active, var_crit_amount,
                                    tundra_stalker_points, dots, outbreak_points, rage_of_rivendale_points,
                                    glyph_plague_strike, hysteria_active, tricksoftt_active,
                                    increased_physical_damage, increased_all_damage, dancing_rune_weapon_damage_multi,
                                    dancing_rune_weapon_damage, dot_length,
                                    crypt_fever_points, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                    oh_input_topend_weapon_damage,
                                    sum_oh_ps_attacks, oh_wep_damage_mod, rune_cd_tracker, sum_ps_attacks,
                                    current_power,
                                    max_runic, dirge_points, sigil_of_strife, bonus_loop_ap, sigil_of_strife_amount,
                                    sigil_of_strife_active, sigil_of_strife_timer,
                                    trinket_hit_crit_tracker, mh_wep_random_value, oh_wep_random_value,
                                    standard_10k_random_value, damage_result_number, standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                    if (dots[0] - pestilence_reset_window) > 0 and (
                            dots[0] - pestilence_reset_window) < current_time:  # Pestilence
                        if (dots[1] - pestilence_reset_window) > 0 and (
                                dots[1] - pestilence_reset_window) < current_time:
                            if pestilence_allow_reset == True:
                                if current_time - dots[0] == 0:
                                    continue
                                if current_time - dots[1] == 0:
                                    continue
                                able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                    rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                    total_haste_rating, last_rune_change,
                                    n_blood=1, n_frost=0, n_unholy=0)
                                if able_to_cast == 1:
                                    rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                        current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, \
                                        gcd, rune_of_cinderglacier_damage, multiple_adds_timer, multiple_adds_timer_bp, damage_result_number = pestilence_cast(
                                        spell_hit_total, increased_spell_hit, target_level, total_crit,
                                        increased_spell_crit, total_haste_rating, current_time, last_rune_change,
                                        castable, improved_unholy_presence_points, dk_presence, input_gcd,
                                        rune_cd_tracker, dots, dot_length, crypt_fever_points, multiple_adds_timer,
                                        var_crit_amount, black_ice_points, tundra_stalker_points,
                                        rage_of_rivendale_points, hysteria_active, tricksoftt_active,
                                        increased_spell_damage,
                                        increased_all_damage, sum_pest_attacks, current_power, max_runic,
                                        blood_of_the_north_points, just_used_death_rune, death, reaping_points,
                                        rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                        rune_of_cinderglacier_damage, pestilence_allow_reset, multiple_adds_timer_bp,
                                        standard_10k_random_value, damage_result_number, pestilence_random_value,
                                        standard_random_value)
                                    if last_sim_run == True:
                                        rotation.extend(rotation_a)
                                        rotation_time.extend(rotation_time_a)
                                        rotation_status.extend(rotation_status_a)
                                        rotation_damage.extend(rotation_damage_a)
                                    continue
                    if (multiple_adds_timer < current_time or multiple_adds_timer_bp < current_time) and (
                            dots[0] - pestilence_reset_window) > 0 and (
                            dots[0] - pestilence_reset_window) < current_time and (
                            dots[1] - pestilence_reset_window) > 0 and (
                            dots[1] - pestilence_reset_window) < current_time:  # Spread Pest, if not on adds
                        if pestilence_allow_reset == True:
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=1, n_frost=0, n_unholy=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, \
                                    gcd, rune_of_cinderglacier_damage, multiple_adds_timer, multiple_adds_timer_bp, damage_result_number = pestilence_cast(
                                    spell_hit_total, increased_spell_hit, target_level, total_crit,
                                    increased_spell_crit, total_haste_rating, current_time, last_rune_change,
                                    castable, improved_unholy_presence_points, dk_presence, input_gcd, rune_cd_tracker,
                                    dots, dot_length, crypt_fever_points, multiple_adds_timer,
                                    var_crit_amount, black_ice_points, tundra_stalker_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active, increased_spell_damage,
                                    increased_all_damage, sum_pest_attacks, current_power, max_runic,
                                    blood_of_the_north_points, just_used_death_rune, death, reaping_points,
                                    rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                    rune_of_cinderglacier_damage, pestilence_allow_reset, multiple_adds_timer_bp,
                                    standard_10k_random_value, damage_result_number, pestilence_random_value,
                                    standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue
                        elif pestilence_allow_reset == False:
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=1, n_frost=0, n_unholy=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, \
                                    gcd, rune_of_cinderglacier_damage, multiple_adds_timer, multiple_adds_timer_bp, damage_result_number = pestilence_cast(
                                    spell_hit_total, increased_spell_hit, target_level, total_crit,
                                    increased_spell_crit, total_haste_rating, current_time, last_rune_change,
                                    castable, improved_unholy_presence_points, dk_presence, input_gcd, rune_cd_tracker,
                                    dots, dot_length, crypt_fever_points, multiple_adds_timer,
                                    var_crit_amount, black_ice_points, tundra_stalker_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active, increased_spell_damage,
                                    increased_all_damage, sum_pest_attacks, current_power, max_runic,
                                    blood_of_the_north_points, just_used_death_rune, death, reaping_points,
                                    rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                    rune_of_cinderglacier_damage, pestilence_allow_reset, multiple_adds_timer_bp,
                                    standard_10k_random_value, damage_result_number, pestilence_random_value,
                                    standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                    if current_time < 10 and frost_def_setup == True:
                        if dots[0] == dots[1] and pestilence_allow_reset == True and blood_tap_cd <= current_time:
                            if current_time - dots[0] == 0:
                                continue
                            if current_time - dots[1] == 0:
                                continue
                            castable = all_rune_check(blood, current_time, rune_cd_tracker)
                            if castable == 3 or castable != 3:
                                if rune_cd_tracker[6] == 10000 or rune_cd_tracker[7] == 10000:
                                    if blood_tap_cd <= current_time:
                                        blood_tap_cd = current_time + 60
                                        if last_sim_run == True:
                                            rotation.append("Blood Tap")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Active")
                                            rotation_damage.append(0)
                                        haste_percentage = (
                                                                   total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                        haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                         last_rune_change[castable + 6])
                                        if improved_unholy_presence_points != 0:
                                            if dk_presence == 2:
                                                haste_rune_cd = haste_rune_cd - (haste_rune_cd * (
                                                        (improved_unholy_presence_points * 5) / 100))
                                        if rune_cd_tracker[0] < rune_cd_tracker[1]:
                                            castable = 0
                                            death_castable = castable + death
                                            haste_percentage = (
                                                                       total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                            haste_rune_cd = 0
                                            rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                            rune_cd_tracker[castable] = 10000
                                        else:
                                            castable = 1
                                            death_castable = castable + death
                                            haste_percentage = (
                                                                       total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                            haste_rune_cd = 0
                                            rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                            rune_cd_tracker[castable] = 10000
                                            # Use bloodtap
                        if unbreakable_armor_points == 1 and skip_ua == False:  # Unbreakable Armor
                            if ua_cd_timer <= current_time:
                                able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                    rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                    total_haste_rating, last_rune_change,
                                    n_blood=0, n_frost=1, n_unholy=0, n_skip=0, n_reset_window=pestilence_reset_window)
                                if able_to_cast == 1:
                                    if last_sim_run == True:
                                        rotation.append("Unbreakable Armor")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Active")
                                        rotation_damage.append(0)
                                    ua_cd_timer = current_time + unbreak_armor_bone_shield_vamp_blood_cd_time
                                    # Rune Hit
                                    haste_percentage = (
                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                    haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                     last_rune_change[castable + 6])
                                    if improved_unholy_presence_points != 0:
                                        if dk_presence == 2:
                                            haste_rune_cd = haste_rune_cd - (
                                                    haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                                    if dk_presence != 2:
                                        gcd = input_gcd / (1 + haste_percentage)
                                        if gcd < 1:
                                            gcd = 1
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                    ua_buff_timer = current_time + 20
                                    ua_strength_increase_amount = (strtoap * .2)
                                    current_power = runic_power(-10, current_power, max_runic)
                                    current_time += gcd
                                    used_gcd = True
                                    continue
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=0, n_frost=1, n_unholy=1, n_skip=0, n_reset_window=0)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, deathchill_active, gcd, dots, \
                                dancing_rune_weapon_damage, trinket_hit_crit_tracker, howling_current_cd, rime_procd, rime_timer, \
                                sigil_of_virulence_timer, sigil_of_virulence_buff, bonus_loop_str, sigil_of_hanged_man_buff, sigil_of_hanged_man_timer, \
                                sigil_of_hanged_man_count, rune_cd_tracker, sum_oh_obil_attacks, current_time, used_gcd, sum_obil_attacks, current_power, damage_result_number = obliterate_cast(
                                deathchill_active, tanking, H2, hit_from_gear, hit_from_other, target_level,
                                all_expertise_dodge, all_expertise_parry, total_crit,
                                annihilation_talent_points, rime_points, increased_phy_crit,
                                scourgeborne_battlegear_two_set, subversion_points, current_armor, armor_penetration,
                                mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage,
                                attack_damage_normalization, current_ap, total_haste_rating, current_time,
                                castable, last_rune_change, dk_presence, improved_unholy_presence_points, input_gcd,
                                dots, dancing_rune_weapon_points, dancing_rune_weapon_active,
                                darkruned_battlegear_four_set, var_crit_amount, guile_of_gorefiend_points,
                                tundra_stalker_points, merciless_combat_points, fight_length, fight_sub_35percent,
                                rage_of_rivendale_points,
                                scourgelords_battlegear_two_set, hysteria_active, tricksoftt_active, extra_obli_damage,
                                increased_physical_damage,
                                increased_all_damage, dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage,
                                sigil_of_virulence, sigil_of_virulence_buff,
                                bonus_loop_str, sigil_of_hanged_man, sigil_of_hanged_man_count,
                                death_rune_mastery_points, just_used_death_rune, castable1, sigil_of_awareness,
                                rune_cd_tracker, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                oh_input_topend_weapon_damage, oh_wep_damage_mod,
                                sum_oh_obil_attacks, current_power, max_runic, sum_obil_attacks,
                                chill_of_the_grave_points, scourgeborne_battlegear_four_set, howling_current_cd,
                                rime_procd, rime_timer, sigil_of_virulence_timer, sigil_of_hanged_man_buff,
                                sigil_of_hanged_man_timer, trinket_hit_crit_tracker,
                                mh_wep_random_value, oh_wep_random_value, standard_10k_random_value,
                                damage_result_number, standard_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue
                        if frost_strike_points == 1:
                            if current_power >= frost_strike_cost:  # Frost Strike
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, \
                                    current_power, dots, gcd, trinket_hit_crit_tracker, km_procd, deathchill_active, sum_oh_fs_attacks, rune_of_cinderglacier_active, \
                                    rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, sum_fs_attacks, sum_oh_fs_attacks, damage_result_number = frost_strike_cast(
                                    km_procd, tanking, H2, hit_from_gear, hit_from_other, target_level,
                                    all_expertise_dodge, all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, darkruned_battlegear_two_set, deathchill_active, current_armor,
                                    armor_penetration, mh_input_lowend_weapon_damage,
                                    mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                    total_haste_rating, current_time, last_rune_change, castable,
                                    improved_unholy_presence_points, dk_presence, input_gcd,
                                    threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                    oh_input_topend_weapon_damage,
                                    var_crit_amount, guile_of_gorefiend_points, sigil_of_vengeful_heart,
                                    black_ice_points, glacier_rot_points, dots, tundra_stalker_points,
                                    merciless_combat_points, blood_of_the_north_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active, sum_oh_fs_attacks,
                                    increased_physical_damage, increased_all_damage, fight_length, fight_sub_35percent,
                                    oh_wep_damage_mod, rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, frost_strike_cost,
                                    current_power, max_runic, sum_fs_attacks, trinket_hit_crit_tracker,
                                    mh_wep_random_value, oh_wep_random_value, standard_10k_random_value,
                                    damage_result_number, standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue
                        if dots[0] != dots[1] and pestilence_allow_reset == True:
                            if current_time - dots[0] == 0:
                                continue
                            if current_time - dots[1] == 0:
                                continue
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=1, n_frost=0, n_unholy=0, n_skip=0, n_reset_window=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, \
                                    gcd, rune_of_cinderglacier_damage, multiple_adds_timer, multiple_adds_timer_bp, damage_result_number = pestilence_cast(
                                    spell_hit_total, increased_spell_hit, target_level, total_crit,
                                    increased_spell_crit, total_haste_rating, current_time, last_rune_change,
                                    castable, improved_unholy_presence_points, dk_presence, input_gcd, rune_cd_tracker,
                                    dots, dot_length, crypt_fever_points, multiple_adds_timer,
                                    var_crit_amount, black_ice_points, tundra_stalker_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active, increased_spell_damage,
                                    increased_all_damage, sum_pest_attacks, current_power, max_runic,
                                    blood_of_the_north_points, just_used_death_rune, death, reaping_points,
                                    rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                    rune_of_cinderglacier_damage, pestilence_allow_reset, multiple_adds_timer_bp,
                                    standard_10k_random_value, damage_result_number, pestilence_random_value,
                                    standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                    if death_and_decay_skip == False:  # Death & Decay
                        if death_and_decay_cd == 0:
                            if death_and_decay_cd < current_time:
                                able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                    rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                    total_haste_rating, last_rune_change,
                                    n_blood=1, n_frost=1, n_unholy=1)
                                if able_to_cast == 1:
                                    rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, current_power, gcd, \
                                        death_and_decay_damage, death_and_decay_last_damage_time, death_n_decay_apply_time, death_and_decay_cd, damage_result_number = death_and_decay_cast(
                                        spell_hit_total, increased_spell_hit, target_level, total_crit,
                                        increased_spell_crit,
                                        current_time,
                                        dk_presence, input_gcd, dots, haste_percentage, current_ap, impurity_points,
                                        gcd, used_gcd,
                                        death_and_decay_cd, death_and_decay_cd_length,
                                        var_crit_amount, black_ice_points, rage_of_rivendale_points, hysteria_active,
                                        tricksoftt_active,
                                        increased_spell_damage, max_runic, death_n_decay_apply_time,
                                        increased_all_damage, current_power, glyph_death_and_decay,
                                        scourgelords_plate_two_set,
                                        death_and_decay_damage, death_and_decay_last_damage_time,
                                        standard_10k_random_value, damage_result_number,
                                        initial_hit=True)
                                    if last_sim_run == True:
                                        rotation.extend(rotation_a)
                                        rotation_time.extend(rotation_time_a)
                                        rotation_status.extend(rotation_status_a)
                                        rotation_damage.extend(rotation_damage_a)
                                    for dnd_multi in range(1, amount_of_targets):
                                        rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, current_power, gcd, \
                                            death_and_decay_damage, death_and_decay_last_damage_time, death_n_decay_apply_time, death_and_decay_cd, damage_result_number = death_and_decay_cast(
                                            spell_hit_total, increased_spell_hit, target_level, total_crit,
                                            increased_spell_crit,
                                            current_time,
                                            dk_presence, input_gcd, dots, haste_percentage, current_ap, impurity_points,
                                            gcd, used_gcd,
                                            death_and_decay_cd, death_and_decay_cd_length,
                                            var_crit_amount, black_ice_points, rage_of_rivendale_points,
                                            hysteria_active, tricksoftt_active,
                                            increased_spell_damage, max_runic, death_n_decay_apply_time,
                                            increased_all_damage, current_power, glyph_death_and_decay,
                                            scourgelords_plate_two_set,
                                            death_and_decay_damage, death_and_decay_last_damage_time,
                                            standard_10k_random_value, damage_result_number,
                                            initial_hit=False)
                                        if last_sim_run == True:
                                            rotation.extend(rotation_a)
                                            rotation_time.extend(rotation_time_a)
                                            rotation_status.extend(rotation_status_a)
                                            rotation_damage.extend(rotation_damage_a)
                                    continue

                    if unbreakable_armor_points == 1 and skip_ua == False:  # Unbreakable Armor
                        if ua_cd_timer <= current_time:
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=1, n_unholy=0, n_skip=1, n_reset_window=pestilence_reset_window)
                            if able_to_cast == 1:
                                if last_sim_run == True:
                                    rotation.append("Unbreakable Armor")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Active")
                                    rotation_damage.append(0)
                                ua_cd_timer = current_time + unbreak_armor_bone_shield_vamp_blood_cd_time
                                # Rune Hit
                                haste_percentage = (
                                                           total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                 last_rune_change[castable + 6])
                                if improved_unholy_presence_points != 0:
                                    if dk_presence == 2:
                                        haste_rune_cd = haste_rune_cd - (
                                                haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                                if dk_presence != 2:
                                    gcd = input_gcd / (1 + haste_percentage)
                                    if gcd < 1:
                                        gcd = 1
                                rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                ua_buff_timer = current_time + 20
                                ua_strength_increase_amount = (strtoap * .2)
                                current_power = runic_power(-10, current_power, max_runic)
                                current_time += gcd
                                used_gcd = True
                                continue
                    if rime_procd == True:  # Howling Blast on Rime Proc
                        rime_procd = False
                        if rime_timer + 15 > current_time:
                            if howling_blast_points == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, howling_current_cd, sum_hb_attacks, damage_result_number = howling_blast_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    increased_spell_crit, total_haste_rating,
                                    total_crit, current_time, last_rune_change, castable, castable1,
                                    improved_unholy_presence_points, dk_presence, input_gcd, amount_of_targets,
                                    current_ap, impurity_points, var_crit_amount, guile_of_gorefiend_points,
                                    black_ice_points, dots, glacier_rot_points, tundra_stalker_points,
                                    fight_sub_35percent, merciless_combat_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active, increased_spell_damage,
                                    increased_all_damage, rune_of_cinderglacier_active, rune_of_cinderglacier_damage,
                                    rune_of_cinderglacier_active_count,
                                    fight_length, rune_cd_tracker, sum_hb_attacks, chill_of_the_grave_points,
                                    current_power, max_runic, dot_length, glyph_howling_blast,
                                    damage_result_number, standard_10k_random_value, howling_blast_random_value,
                                    free_rime=True)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                    if use_obliterate_over_howling_blast == False:  # Regular Howling Blast
                        if howling_blast_points == 1:
                            if howling_current_cd < current_time:
                                able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                    rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                    total_haste_rating, last_rune_change,
                                    n_blood=0, n_frost=1, n_unholy=1, n_skip=1, n_reset_window=pestilence_reset_window)
                                if able_to_cast == 1:
                                    rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                        current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, km_procd, \
                                        deathchill_active, gcd, rune_of_cinderglacier_damage, howling_current_cd, sum_hb_attacks, damage_result_number = howling_blast_cast(
                                        spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                        increased_spell_crit, total_haste_rating,
                                        total_crit, current_time, last_rune_change, castable, castable1,
                                        improved_unholy_presence_points, dk_presence, input_gcd, amount_of_targets,
                                        current_ap, impurity_points, var_crit_amount, guile_of_gorefiend_points,
                                        black_ice_points, dots, glacier_rot_points, tundra_stalker_points,
                                        fight_sub_35percent, merciless_combat_points, rage_of_rivendale_points,
                                        hysteria_active, tricksoftt_active, increased_spell_damage,
                                        increased_all_damage, rune_of_cinderglacier_active,
                                        rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count,
                                        fight_length, rune_cd_tracker, sum_hb_attacks, chill_of_the_grave_points,
                                        current_power, max_runic, dot_length, glyph_howling_blast,
                                        damage_result_number, standard_10k_random_value, howling_blast_random_value,
                                        free_rime=False)
                                    if last_sim_run == True:
                                        rotation.extend(rotation_a)
                                        rotation_time.extend(rotation_time_a)
                                        rotation_status.extend(rotation_status_a)
                                        rotation_damage.extend(rotation_damage_a)
                                    continue
                    if use_obliterate_over_howling_blast == True:
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=0, n_frost=1, n_unholy=1, n_skip=1, n_reset_window=pestilence_reset_window)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, deathchill_active, gcd, dots, \
                                dancing_rune_weapon_damage, trinket_hit_crit_tracker, howling_current_cd, rime_procd, rime_timer, \
                                sigil_of_virulence_timer, sigil_of_virulence_buff, bonus_loop_str, sigil_of_hanged_man_buff, sigil_of_hanged_man_timer, \
                                sigil_of_hanged_man_count, rune_cd_tracker, sum_oh_obil_attacks, current_time, used_gcd, sum_obil_attacks, current_power, damage_result_number = obliterate_cast(
                                deathchill_active, tanking, H2, hit_from_gear, hit_from_other, target_level,
                                all_expertise_dodge, all_expertise_parry, total_crit,
                                annihilation_talent_points, rime_points, increased_phy_crit,
                                scourgeborne_battlegear_two_set, subversion_points, current_armor, armor_penetration,
                                mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage,
                                attack_damage_normalization, current_ap, total_haste_rating, current_time,
                                castable, last_rune_change, dk_presence, improved_unholy_presence_points, input_gcd,
                                dots, dancing_rune_weapon_points, dancing_rune_weapon_active,
                                darkruned_battlegear_four_set, var_crit_amount, guile_of_gorefiend_points,
                                tundra_stalker_points, merciless_combat_points, fight_length, fight_sub_35percent,
                                rage_of_rivendale_points,
                                scourgelords_battlegear_two_set, hysteria_active, tricksoftt_active, extra_obli_damage,
                                increased_physical_damage,
                                increased_all_damage, dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage,
                                sigil_of_virulence, sigil_of_virulence_buff,
                                bonus_loop_str, sigil_of_hanged_man, sigil_of_hanged_man_count,
                                death_rune_mastery_points, just_used_death_rune, castable1, sigil_of_awareness,
                                rune_cd_tracker, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                oh_input_topend_weapon_damage, oh_wep_damage_mod,
                                sum_oh_obil_attacks, current_power, max_runic, sum_obil_attacks,
                                chill_of_the_grave_points, scourgeborne_battlegear_four_set, howling_current_cd,
                                rime_procd, rime_timer, sigil_of_virulence_timer, sigil_of_hanged_man_buff,
                                sigil_of_hanged_man_timer, trinket_hit_crit_tracker,
                                mh_wep_random_value, oh_wep_random_value, standard_10k_random_value,
                                damage_result_number, standard_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    if howling_current_cd > min(rune_cd_tracker[2], rune_cd_tracker[3], rune_cd_tracker[4],
                                                rune_cd_tracker[5], rune_cd_tracker[8], rune_cd_tracker[9],
                                                rune_cd_tracker[10], rune_cd_tracker[11]):
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=0, n_frost=1, n_unholy=1, n_skip=1, n_reset_window=pestilence_reset_window)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, deathchill_active, gcd, dots, \
                                dancing_rune_weapon_damage, trinket_hit_crit_tracker, howling_current_cd, rime_procd, rime_timer, \
                                sigil_of_virulence_timer, sigil_of_virulence_buff, bonus_loop_str, sigil_of_hanged_man_buff, sigil_of_hanged_man_timer, \
                                sigil_of_hanged_man_count, rune_cd_tracker, sum_oh_obil_attacks, current_time, used_gcd, sum_obil_attacks, current_power, damage_result_number = obliterate_cast(
                                deathchill_active, tanking, H2, hit_from_gear, hit_from_other, target_level,
                                all_expertise_dodge, all_expertise_parry, total_crit,
                                annihilation_talent_points, rime_points, increased_phy_crit,
                                scourgeborne_battlegear_two_set, subversion_points, current_armor, armor_penetration,
                                mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage,
                                attack_damage_normalization, current_ap, total_haste_rating, current_time,
                                castable, last_rune_change, dk_presence, improved_unholy_presence_points, input_gcd,
                                dots, dancing_rune_weapon_points, dancing_rune_weapon_active,
                                darkruned_battlegear_four_set, var_crit_amount, guile_of_gorefiend_points,
                                tundra_stalker_points, merciless_combat_points, fight_length, fight_sub_35percent,
                                rage_of_rivendale_points,
                                scourgelords_battlegear_two_set, hysteria_active, tricksoftt_active, extra_obli_damage,
                                increased_physical_damage,
                                increased_all_damage, dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage,
                                sigil_of_virulence, sigil_of_virulence_buff,
                                bonus_loop_str, sigil_of_hanged_man, sigil_of_hanged_man_count,
                                death_rune_mastery_points, just_used_death_rune, castable1, sigil_of_awareness,
                                rune_cd_tracker, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                oh_input_topend_weapon_damage, oh_wep_damage_mod,
                                sum_oh_obil_attacks, current_power, max_runic, sum_obil_attacks,
                                chill_of_the_grave_points, scourgeborne_battlegear_four_set, howling_current_cd,
                                rime_procd, rime_timer, sigil_of_virulence_timer, sigil_of_hanged_man_buff,
                                sigil_of_hanged_man_timer, trinket_hit_crit_tracker,
                                mh_wep_random_value, oh_wep_random_value, standard_10k_random_value,
                                damage_result_number, standard_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    if frost_strike_points == 1:
                        if current_power >= frost_strike_cost:  # Frost Strike
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, \
                                current_power, dots, gcd, trinket_hit_crit_tracker, km_procd, deathchill_active, sum_oh_fs_attacks, rune_of_cinderglacier_active, \
                                rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, sum_fs_attacks, sum_oh_fs_attacks, damage_result_number = frost_strike_cast(
                                km_procd, tanking, H2, hit_from_gear, hit_from_other, target_level,
                                all_expertise_dodge, all_expertise_parry, total_crit, annihilation_talent_points,
                                increased_phy_crit, darkruned_battlegear_two_set, deathchill_active, current_armor,
                                armor_penetration, mh_input_lowend_weapon_damage,
                                mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                total_haste_rating, current_time, last_rune_change, castable,
                                improved_unholy_presence_points, dk_presence, input_gcd,
                                threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                oh_input_topend_weapon_damage,
                                var_crit_amount, guile_of_gorefiend_points, sigil_of_vengeful_heart,
                                black_ice_points, glacier_rot_points, dots, tundra_stalker_points,
                                merciless_combat_points, blood_of_the_north_points, rage_of_rivendale_points,
                                hysteria_active, tricksoftt_active, sum_oh_fs_attacks,
                                increased_physical_damage, increased_all_damage, fight_length, fight_sub_35percent,
                                oh_wep_damage_mod, rune_of_cinderglacier_active,
                                rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, frost_strike_cost,
                                current_power, max_runic, sum_fs_attacks, trinket_hit_crit_tracker,
                                mh_wep_random_value, oh_wep_random_value, standard_10k_random_value,
                                damage_result_number, standard_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    if use_blood_strike_over_blood_boil == False:  # Use Blood Boil
                        # Blood Strike
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0, n_unholy=0, n_skip=1, n_reset_window=pestilence_reset_window)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                deathchill_active, gcd, rune_of_cinderglacier_damage, blood_boil_damage, damage_result_number = blood_boil_cast(
                                spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                total_crit, increased_spell_crit, total_haste_rating,
                                current_time, last_rune_change, castable, improved_unholy_presence_points,
                                rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                current_ap, impurity_points, var_crit_amount, black_ice_points,
                                might_of_mograine_points, blood_strikes_points, blood_boil_damage,
                                dots, tundra_stalker_points, rage_of_rivendale_points, hysteria_active,
                                tricksoftt_active,
                                increased_spell_damage, increased_all_damage, sum_it_attacks, current_power,
                                rune_of_cinderglacier_active,
                                rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage, amount_of_targets,
                                damage_result_number, blood_boil_random_value, standard_10k_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    if use_blood_strike_over_blood_boil == True:  # Use Blood Strike
                        # Blood Strike
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0, n_unholy=0, n_skip=1, n_reset_window=pestilence_reset_window)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, current_power, \
                                dots, gcd, trinket_hit_crit_tracker, dancing_rune_weapon_damage, sigil_of_haunted_dreams_buff, sigil_of_haunted_dreams_timer, \
                                total_crit, t9_bonus, t9_cd_timer, t9_active_timer, bonus_loop_str, increased_all_damage, desolation_buff_timer, sudden_doom_damage, \
                                unholy_blight_amount, unholy_blight_timer, rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, \
                                rune_of_cinderglacier_active, sum_bs_attacks, damage_result_number = blood_strike_cast(
                                tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                all_expertise_parry, total_crit, annihilation_talent_points,
                                increased_phy_crit, subversion_points, current_armor, armor_penetration,
                                current_ap, attack_damage_normalization, total_haste_rating, current_time,
                                last_rune_change, castable, dk_presence, improved_unholy_presence_points,
                                dots, input_gcd, dancing_rune_weapon_points, dancing_rune_weapon_active,
                                darkruned_battlegear_four_set, var_crit_amount,
                                guile_of_gorefiend_points, tundra_stalker_points, blood_of_the_north_points,
                                t9_tank_two_set, rage_of_rivendale_points,
                                blood_strikes_points, might_of_mograine_points, hysteria_active, tricksoftt_active,
                                increased_physical_damage, increased_all_damage,
                                dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage, just_used_death_rune,
                                rune_cd_tracker, reaping_points,
                                sigil_of_haunted_dreams, sigil_of_haunted_dreams_buff, t9_dps_two_set, t9_bonus,
                                t9_cd_timer, bonus_loop_str, desolation_points,
                                desolation_buff, desolation_buff_timer, sudden_doom_points, sigil_of_vengeful_heart,
                                spell_hit_total, increased_spell_hit,
                                darkruned_battlegear_two_set, increased_spell_crit, impurity_points,
                                sigil_of_the_wild_buck,
                                black_ice_points, glyph_death_coil, morbitity_points, increased_spell_damage,
                                sudden_doom_damage, unholy_blight_points,
                                rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                rune_of_cinderglacier_damage, death, threat_of_thassarian_points,
                                oh_wep_damage_mod, sum_oh_bs_attacks, current_power, sum_bs_attacks, max_runic,
                                trinket_hit_crit_tracker, sigil_of_haunted_dreams_timer, t9_active_timer,
                                unholy_blight_amount, unholy_blight_timer,
                                damage_result_number, blood_strike_random_value, standard_random_value,
                                standard_10k_random_value, mh_wep_random_value, oh_wep_random_value, 
mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage, oh_input_lowend_weapon_damage, oh_input_topend_weapon_damage)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    if pestilence_allow_reset == False:
                        if use_blood_strike_over_blood_boil == False:  # Use Blood boil
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=1, n_frost=0, n_unholy=0, n_skip=0, n_reset_window=pestilence_reset_window)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, blood_boil_damage, damage_result_number = blood_boil_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    total_crit, increased_spell_crit, total_haste_rating,
                                    current_time, last_rune_change, castable, improved_unholy_presence_points,
                                    rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                    current_ap, impurity_points, var_crit_amount, black_ice_points,
                                    might_of_mograine_points, blood_strikes_points, blood_boil_damage,
                                    dots, tundra_stalker_points, rage_of_rivendale_points, hysteria_active,
                                    tricksoftt_active,
                                    increased_spell_damage, increased_all_damage, sum_it_attacks, current_power,
                                    rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage, amount_of_targets,
                                    damage_result_number, blood_boil_random_value, standard_10k_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                    if pestilence_allow_reset == False:
                        if use_blood_strike_over_blood_boil == True:  # Use Blood Strike
                            # Blood Strike
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=1, n_frost=0, n_unholy=0, n_skip=0, n_reset_window=pestilence_reset_window)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, current_power, \
                                    dots, gcd, trinket_hit_crit_tracker, dancing_rune_weapon_damage, sigil_of_haunted_dreams_buff, sigil_of_haunted_dreams_timer, \
                                    total_crit, t9_bonus, t9_cd_timer, t9_active_timer, bonus_loop_str, increased_all_damage, desolation_buff_timer, sudden_doom_damage, \
                                    unholy_blight_amount, unholy_blight_timer, rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, \
                                    rune_of_cinderglacier_active, sum_bs_attacks, damage_result_number = blood_strike_cast(
                                    tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                    all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, subversion_points, current_armor, armor_penetration,
                                    current_ap, attack_damage_normalization, total_haste_rating, current_time,
                                    last_rune_change, castable, dk_presence, improved_unholy_presence_points,
                                    dots, input_gcd, dancing_rune_weapon_points, dancing_rune_weapon_active,
                                    darkruned_battlegear_four_set, var_crit_amount,
                                    guile_of_gorefiend_points, tundra_stalker_points, blood_of_the_north_points,
                                    t9_tank_two_set, rage_of_rivendale_points,
                                    blood_strikes_points, might_of_mograine_points, hysteria_active, tricksoftt_active,
                                    increased_physical_damage, increased_all_damage,
                                    dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage, just_used_death_rune,
                                    rune_cd_tracker, reaping_points,
                                    sigil_of_haunted_dreams, sigil_of_haunted_dreams_buff, t9_dps_two_set, t9_bonus,
                                    t9_cd_timer, bonus_loop_str, desolation_points,
                                    desolation_buff, desolation_buff_timer, sudden_doom_points, sigil_of_vengeful_heart,
                                    spell_hit_total, increased_spell_hit,
                                    darkruned_battlegear_two_set, increased_spell_crit, impurity_points,
                                    sigil_of_the_wild_buck,
                                    black_ice_points, glyph_death_coil, morbitity_points, increased_spell_damage,
                                    sudden_doom_damage, unholy_blight_points,
                                    rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                    rune_of_cinderglacier_damage, death, threat_of_thassarian_points,
                                    oh_wep_damage_mod, sum_oh_bs_attacks, current_power, sum_bs_attacks, max_runic,
                                    trinket_hit_crit_tracker, sigil_of_haunted_dreams_timer, t9_active_timer,
                                    unholy_blight_amount, unholy_blight_timer,
                                    damage_result_number, blood_strike_random_value, standard_random_value,
                                    standard_10k_random_value, mh_wep_random_value, oh_wep_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

            if dk_spec == 1:  # Unholy Spec
                if amount_of_targets != 0:  # Unholy Fight Logic Is Only 1 thing, but with changed inside
                    if deathchill_points == 1:
                        if deathchill_active == True:
                            if deathchill_timer < current_time:
                                deathchill_active = False
                        if deathchill_cd < current_time:
                            if dots[0] > current_time:
                                if dots[1] > current_time:
                                    if last_sim_run == True:
                                        rotation.append("Death Chill")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Active")
                                        rotation_damage.append(0)
                                    deathchill_active = True
                                    deathchill_cd = current_time + 120
                                    deathchill_timer = current_time + 30
                    if ua_buff_timer >= current_time:
                        if ua_used == False:
                            ua_used = True
                            bonus_loop_str += ua_strength_increase_amount
                    elif ua_buff_timer < current_time:
                        ua_used = False
                        bonus_loop_str -= ua_strength_increase_amount
                        ua_strength_increase_amount = 0
                    if skip_erw == False:
                        if all_rune_check(blood, current_time, rune_cd_tracker) == 3:  # Empowered Rune Weapon
                            if all_rune_check(frost, current_time, rune_cd_tracker) == 3:
                                if all_rune_check(unholy, current_time, rune_cd_tracker) == 3:
                                    if all_rune_check(death, current_time, rune_cd_tracker) == 3:
                                        if all_rune_check(death_f, current_time, rune_cd_tracker) == 3:
                                            if all_rune_check(death_u, current_time, rune_cd_tracker) == 3:
                                                if erw_cd_timer < current_time and gargoyle_use_timer < current_time:
                                                    if rune_cd_tracker[0] != 10000:
                                                        rune_reset_1 = 0
                                                    else:
                                                        rune_reset_1 = 6
                                                    if rune_cd_tracker[1] != 10000:
                                                        rune_reset_2 = 1
                                                    else:
                                                        rune_reset_2 = 7
                                                    if rune_cd_tracker[2] != 10000:
                                                        rune_reset_3 = 2
                                                    else:
                                                        rune_reset_3 = 8
                                                    if rune_cd_tracker[3] != 10000:
                                                        rune_reset_4 = 3
                                                    else:
                                                        rune_reset_4 = 9
                                                    if rune_cd_tracker[4] != 10000:
                                                        rune_reset_5 = 4
                                                    else:
                                                        rune_reset_5 = 10
                                                    if rune_cd_tracker[5] != 10000:
                                                        rune_reset_6 = 5
                                                    else:
                                                        rune_reset_6 = 11
                                                    if last_sim_run == True:
                                                        rotation.append("Empowered Rune Weapon")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(0)
                                                    current_power = runic_power(25, current_power, max_runic)
                                                    # rune_cd_tracker = [0, 0, 0, 0, 0, 0, 10000, 10000, 10000, 10000, 10000, 10000]
                                                    rune_cd_tracker[rune_reset_1] = 0
                                                    rune_cd_tracker[rune_reset_2] = 0
                                                    rune_cd_tracker[rune_reset_3] = 0
                                                    rune_cd_tracker[rune_reset_4] = 0
                                                    rune_cd_tracker[rune_reset_5] = 0
                                                    rune_cd_tracker[rune_reset_6] = 0
                                                    erw_cd_timer = current_time + 300
                    if current_time >= horn:  # Horn
                        if dk_presence != 2:
                            gcd = input_gcd / (1 + haste_percentage)
                            if gcd < 1:
                                gcd = 1
                        current_power = runic_power(10, current_power, max_runic)
                        if last_sim_run == True:
                            rotation.append("Horn of Winter")
                            rotation_time.append(current_time)
                            rotation_status.append("Active")
                            rotation_damage.append(0)
                        horn += horn_timer
                        current_time += gcd
                        used_gcd = True
                        continue

                    if dots[0] > current_time:  # Use Blood Tap
                        if dots[1] > current_time:
                            castable = all_rune_check(blood, current_time, rune_cd_tracker)
                            if castable == 3:
                                if rune_cd_tracker[6] == 10000:
                                    if rune_cd_tracker[7] == 10000:
                                        if blood_tap_cd <= current_time:
                                            blood_tap_cd = current_time + 60
                                            if last_sim_run == True:
                                                rotation.append("Blood Tap")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Active")
                                                rotation_damage.append(0)
                                            haste_percentage = (
                                                                           total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                            haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                             last_rune_change[castable + 6])
                                            if improved_unholy_presence_points != 0:
                                                if dk_presence == 2:
                                                    haste_rune_cd = haste_rune_cd - (haste_rune_cd * (
                                                                (improved_unholy_presence_points * 5) / 100))
                                            if rune_cd_tracker[0] < rune_cd_tracker[1]:
                                                castable = 0
                                                death_castable = castable + death
                                                haste_percentage = (
                                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                                haste_rune_cd = 0
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                            else:
                                                castable = 1
                                                death_castable = castable + death
                                                haste_percentage = (
                                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                                haste_rune_cd = 0
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                    if bone_shield_points == 1:  # Activate Bone Shield
                        if bone_shield_active == True:
                            if random.randint(0, 100) > 100 - bone_shield_bone_consumption_rate:
                                if bone_shield_last_damage + 1 < current_time:
                                    bone_shield_stacks -= 1
                                    bone_shield_last_damage = current_time
                                    if bone_shield_stacks == 0:
                                        bone_shield_active = False
                                        if last_sim_run == True:
                                            rotation.append("Bone Shield")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Fades")
                                            rotation_damage.append(0)
                            damage_result_number = damage_array_updater(damage_result_number)
                            bone_shield_last_damage = current_time
                            if current_time > bone_shield_length:
                                bone_shield_active = False
                                if last_sim_run == True:
                                    rotation.append("Bone Shield")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Fades")
                                    rotation_damage.append(0)
                        if bone_shield_active == False:
                            if bone_shield_cd < current_time:
                                able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                    rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                    total_haste_rating, last_rune_change,
                                    n_blood=0, n_frost=0, n_unholy=1, n_skip=1, n_reset_window=death_and_decay_cd,
                                    dk_spec=1)
                                if able_to_cast == 1:
                                    bone_shield_cd = current_time + unbreak_armor_bone_shield_vamp_blood_cd_time
                                    bone_shield_length = current_time + 300
                                    bone_shield_stacks = 3 + glyph_of_bone_shield
                                    bone_shield_active = True
                                    current_power = runic_power(10, current_power, max_runic)
                                    if last_sim_run == True:
                                        rotation.append("Bone Shield")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Active")
                                        rotation_damage.append(0)
                                    current_time += gcd
                                    used_gcd = True
                                    continue

                    if gargoyle_stance_dance == True:  # Removing Stancedance for Garg
                        if gargoyle_cd > 1:
                            if dk_presence != garg_dk_presence:
                                if garg_dk_presence == 0:
                                    able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                        rune_cd_tracker, current_time, dots, improved_unholy_presence_points,
                                        dk_presence,
                                        total_haste_rating, last_rune_change,
                                        n_blood=1, n_frost=0, n_unholy=0, n_skip=1, n_reset_window=death_and_decay_cd,
                                        dk_spec=1)
                                    if able_to_cast == 1:
                                        dk_presence = 0
                                        if last_sim_run == True:
                                            rotation.append("Blood Presence")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Active")
                                            rotation_damage.append(0)
                                elif garg_dk_presence == 1:
                                    able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                        rune_cd_tracker, current_time, dots, improved_unholy_presence_points,
                                        dk_presence,
                                        total_haste_rating, last_rune_change,
                                        n_blood=0, n_frost=1, n_unholy=0, n_skip=1, n_reset_window=death_and_decay_cd,
                                        dk_spec=1)
                                    if able_to_cast == 1:
                                        dk_presence = 1
                                        if last_sim_run == True:
                                            rotation.append("Frost Presence")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Active")
                                            rotation_damage.append(0)
                    if gargoyle_use_timer < current_time:  # Garg
                        if gargoyle_cd < current_time:
                            if gargoyle_stance_dance == True:
                                if dk_presence != 2:  # Garg stancedance
                                    able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                        rune_cd_tracker, current_time, dots, improved_unholy_presence_points,
                                        dk_presence,
                                        total_haste_rating, last_rune_change,
                                        n_blood=0, n_frost=0, n_unholy=1)
                                    if able_to_cast == 1:
                                        garg_dk_presence = dk_presence
                                        dk_presence = 2
                                        if last_sim_run == True:
                                            rotation.append("Unholy Presence")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Active")
                                            rotation_damage.append(0)
                            if current_power >= 60:
                                if gargoyle_stance_dance == True:
                                    if dk_presence != 2:  # Garg stancedance
                                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points,
                                            dk_presence,
                                            total_haste_rating, last_rune_change,
                                            n_blood=0, n_frost=0, n_unholy=1)
                                        if able_to_cast == 1:
                                            garg_dk_presence = dk_presence
                                            dk_presence = 2
                                            if last_sim_run == True:
                                                rotation.append("Unholy Presence")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Active")
                                                rotation_damage.append(0)
                                if gargoyle_stance_dance == False or dk_presence == 2:
                                    rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, current_power, gcd, gargoyle_cd, garg_last_damage_cast, garg_damage, \
                                        gary_active, garg_summon_time, garg_ap, cast_army, cast_army_timer, damage_result_number = gargoyle_cast(
                                        spell_hit_total, increased_spell_hit, target_level, total_crit,
                                        increased_spell_crit, current_time, melee_haste_bonus2, melee_haste_bonus3,
                                        melee_haste_bonus4,
                                        dk_presence, input_gcd, current_ap, gcd, used_gcd, var_crit_amount,
                                        black_ice_points, max_runic, castable, melee_haste_bonus, gargoyle_cd,
                                        garg_damage,
                                        current_power, garg_ap, garg_summon_time, garg_last_damage_cast,
                                        total_haste_rating, last_rune_change, improved_unholy_presence_points,
                                        personal_buff_orc_pet_damage, cast_army, cast_army_timer,
                                        damage_result_number, standard_10k_random_value, gargoyle_random_value,
                                        initial_cast=True)
                                    if last_sim_run == True:
                                        rotation.extend(rotation_a)
                                        rotation_time.extend(rotation_time_a)
                                        rotation_status.extend(rotation_status_a)
                                        rotation_damage.extend(rotation_damage_a)
                                    continue
                    if cast_army == True and only_one_army == 0:
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points,
                            dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=1, n_unholy=1)
                        if able_to_cast != 1 and erw_cd_timer < current_time and cast_army_timer < current_time:
                            if rune_cd_tracker[0] != 10000:
                                rune_reset_1 = 0
                            else:
                                rune_reset_1 = 6
                            if rune_cd_tracker[1] != 10000:
                                rune_reset_2 = 1
                            else:
                                rune_reset_2 = 7
                            if rune_cd_tracker[2] != 10000:
                                rune_reset_3 = 2
                            else:
                                rune_reset_3 = 8
                            if rune_cd_tracker[3] != 10000:
                                rune_reset_4 = 3
                            else:
                                rune_reset_4 = 9
                            if rune_cd_tracker[4] != 10000:
                                rune_reset_5 = 4
                            else:
                                rune_reset_5 = 10
                            if rune_cd_tracker[5] != 10000:
                                rune_reset_6 = 5
                            else:
                                rune_reset_6 = 11
                            if last_sim_run == True:
                                rotation.append("Empowered Rune Weapon")
                                rotation_time.append(current_time)
                                rotation_status.append("Active")
                                rotation_damage.append(0)
                            current_power = runic_power(25, current_power, max_runic)
                            # rune_cd_tracker = [0, 0, 0, 0, 0, 0, 10000, 10000, 10000, 10000, 10000, 10000]
                            rune_cd_tracker[rune_reset_1] = 0
                            rune_cd_tracker[rune_reset_2] = 0
                            rune_cd_tracker[rune_reset_3] = 0
                            rune_cd_tracker[rune_reset_4] = 0
                            rune_cd_tracker[rune_reset_5] = 0
                            rune_cd_tracker[rune_reset_6] = 0
                            erw_cd_timer = current_time + 300
                        elif able_to_cast == 1:
                            used_army = True
                            casted_army_time = current_time
                            cast_army = False
                            only_one_army += 1
                            if last_sim_run == True:
                                rotation.append("Army of the Dead")
                                rotation_time.append(current_time)
                                rotation_status.append("Cast")
                                rotation_damage.append(0)
                            gcd = 4
                            current_time += gcd
                            used_gcd = True
                            continue

                    # Should also make this dynamic, aka if procs active then cast garg, else wait for timer
                    # you want 3 buffs, greatness (if equipped), fallen crusader and the sigil if equipped
                    # TODO: Add watcher for if about to cast gary, then dont use runic power
                    # also if dk spec == unholy
                    # and using pot of speed, set timer to like 150000; and then change timer to = current_time after pop
                    # also do the same thing with engi gloves if equipped
                    #
                    #
                    # count cds before dynamically popping gary
                    # bloodlust
                    # rune of whatever if equipped
                    # sigil if equipped
                    # greatness card if equipped
                    #
                    #
                    # i guess actually make a thing like
                    # if current equipped trinket in this list:
                    # and then a list of strength proc trinkets
                    # +=1 to whatever this counter for gary is
                    # and if spec == unholy

                    if current_time < 10:
                        if dots[0] <= current_time:  # Cast Icy Touch First Global
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=1, n_unholy=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot0_damage, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, damage_result_number = icy_touch_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    total_crit, rime_points, increased_spell_crit, total_haste_rating,
                                    current_time, last_rune_change, castable, improved_unholy_presence_points,
                                    rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                    sigil_of_the_frozen_conscience, current_ap, impurity_points, var_crit_amount,
                                    improved_icy_touch_points, black_ice_points, glacier_rot_points,
                                    dots, tundra_stalker_points, merciless_combat_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active,
                                    fight_length, fight_sub_35percent, increased_spell_damage, increased_all_damage,
                                    sum_it_attacks, current_power, max_runic,
                                    chill_of_the_grave_points, dot_length, crypt_fever_points,
                                    rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage,
                                    damage_result_number, standard_10k_random_value, icy_touch_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                        if dots[1] <= current_time:  # Plague Strike, Second Global
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=0, n_unholy=1)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot1_damage, \
                                    current_power, dots, gcd, trinket_hit_crit_tracker, sum_ps_attacks, sigil_of_strife_active, sigil_of_strife_timer, bonus_loop_ap, \
                                    sum_oh_ps_attacks, dancing_rune_weapon_damage, damage_result_number = plague_strike_cast(
                                    tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                    all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, scourgeborne_plate_two_set, vicious_strikes_points,
                                    current_armor, armor_penetration, mh_input_lowend_weapon_damage,
                                    mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                    total_haste_rating, current_time, last_rune_change, castable,
                                    improved_unholy_presence_points, dk_presence, input_gcd, dancing_rune_weapon_points,
                                    dancing_rune_weapon_active, var_crit_amount,
                                    tundra_stalker_points, dots, outbreak_points, rage_of_rivendale_points,
                                    glyph_plague_strike, hysteria_active, tricksoftt_active,
                                    increased_physical_damage, increased_all_damage, dancing_rune_weapon_damage_multi,
                                    dancing_rune_weapon_damage, dot_length,
                                    crypt_fever_points, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                    oh_input_topend_weapon_damage,
                                    sum_oh_ps_attacks, oh_wep_damage_mod, rune_cd_tracker, sum_ps_attacks,
                                    current_power,
                                    max_runic, dirge_points, sigil_of_strife, bonus_loop_ap, sigil_of_strife_amount,
                                    sigil_of_strife_active, sigil_of_strife_timer,
                                    trinket_hit_crit_tracker, mh_wep_random_value, oh_wep_random_value,
                                    standard_10k_random_value, damage_result_number, standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue
                    if death_and_decay_cd < current_time:
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=1, n_unholy=1)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, current_power, gcd, \
                                death_and_decay_damage, death_and_decay_last_damage_time, death_n_decay_apply_time, death_and_decay_cd, damage_result_number = death_and_decay_cast(
                                spell_hit_total, increased_spell_hit, target_level, total_crit, increased_spell_crit,
                                current_time,
                                dk_presence, input_gcd, dots, haste_percentage, current_ap, impurity_points, gcd,
                                used_gcd,
                                death_and_decay_cd, death_and_decay_cd_length,
                                var_crit_amount, black_ice_points, rage_of_rivendale_points, hysteria_active,
                                tricksoftt_active,
                                increased_spell_damage, max_runic, death_n_decay_apply_time,
                                increased_all_damage, current_power, glyph_death_and_decay, scourgelords_plate_two_set,
                                death_and_decay_damage, death_and_decay_last_damage_time, standard_10k_random_value,
                                damage_result_number,
                                initial_hit=True)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            for dnd_multi in range(1, amount_of_targets):
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, current_power, gcd, \
                                    death_and_decay_damage, death_and_decay_last_damage_time, death_n_decay_apply_time, death_and_decay_cd, damage_result_number = death_and_decay_cast(
                                    spell_hit_total, increased_spell_hit, target_level, total_crit,
                                    increased_spell_crit,
                                    current_time,
                                    dk_presence, input_gcd, dots, haste_percentage, current_ap, impurity_points, gcd,
                                    used_gcd,
                                    death_and_decay_cd, death_and_decay_cd_length,
                                    var_crit_amount, black_ice_points, rage_of_rivendale_points, hysteria_active,
                                    tricksoftt_active,
                                    increased_spell_damage, max_runic, death_n_decay_apply_time,
                                    increased_all_damage, current_power, glyph_death_and_decay,
                                    scourgelords_plate_two_set,
                                    death_and_decay_damage, death_and_decay_last_damage_time, standard_10k_random_value,
                                    damage_result_number,
                                    initial_hit=False)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                            continue
                        elif able_to_cast != 1:
                            if how_cd < current_time:
                                if last_sim_run == True:
                                    rotation.append("Horn of Winter")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Active")
                                    rotation_damage.append(0)
                                how_cd = current_time + 20
                                current_power = runic_power(10, current_power, max_runic)
                                current_time += gcd
                                used_gcd = True
                                continue
                            current_time += unable_to_do_anything
                            continue
                    # Cast Icy Touch First Global
                    able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                        rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                        total_haste_rating, last_rune_change,
                        n_blood=0, n_frost=1, n_unholy=0, n_skip=1, n_reset_window=death_and_decay_cd, dk_spec=1)
                    if able_to_cast == 1:
                        rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot0_damage, \
                            current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                            deathchill_active, gcd, rune_of_cinderglacier_damage, damage_result_number = icy_touch_cast(
                            spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active, total_crit,
                            rime_points, increased_spell_crit, total_haste_rating,
                            current_time, last_rune_change, castable, improved_unholy_presence_points, rune_grade_timer,
                            dk_presence, input_gcd, rune_cd_tracker,
                            sigil_of_the_frozen_conscience, current_ap, impurity_points, var_crit_amount,
                            improved_icy_touch_points, black_ice_points, glacier_rot_points,
                            dots, tundra_stalker_points, merciless_combat_points, rage_of_rivendale_points,
                            hysteria_active, tricksoftt_active,
                            fight_length, fight_sub_35percent, increased_spell_damage, increased_all_damage,
                            sum_it_attacks, current_power, max_runic,
                            chill_of_the_grave_points, dot_length, crypt_fever_points, rune_of_cinderglacier_active,
                            rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage, damage_result_number,
                            standard_10k_random_value, icy_touch_random_value)
                        if last_sim_run == True:
                            rotation.extend(rotation_a)
                            rotation_time.extend(rotation_time_a)
                            rotation_status.extend(rotation_status_a)
                            rotation_damage.extend(rotation_damage_a)
                        continue

                    # Plague Strike, Second Global
                    able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                        rune_cd_tracker, current_time, dots, improved_unholy_presence_points,
                        dk_presence,
                        total_haste_rating, last_rune_change,
                        n_blood=0, n_frost=0, n_unholy=1, n_skip=1, n_reset_window=death_and_decay_cd, dk_spec=1)
                    if able_to_cast == 1:
                        rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot1_damage, \
                            current_power, dots, gcd, trinket_hit_crit_tracker, sum_ps_attacks, sigil_of_strife_active, sigil_of_strife_timer, bonus_loop_ap, \
                            sum_oh_ps_attacks, dancing_rune_weapon_damage, damage_result_number = plague_strike_cast(
                            tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                            all_expertise_parry, total_crit, annihilation_talent_points,
                            increased_phy_crit, scourgeborne_plate_two_set, vicious_strikes_points, current_armor,
                            armor_penetration, mh_input_lowend_weapon_damage,
                            mh_input_topend_weapon_damage, attack_damage_normalization, current_ap, total_haste_rating,
                            current_time, last_rune_change, castable,
                            improved_unholy_presence_points, dk_presence, input_gcd, dancing_rune_weapon_points,
                            dancing_rune_weapon_active, var_crit_amount,
                            tundra_stalker_points, dots, outbreak_points, rage_of_rivendale_points, glyph_plague_strike,
                            hysteria_active, tricksoftt_active,
                            increased_physical_damage, increased_all_damage, dancing_rune_weapon_damage_multi,
                            dancing_rune_weapon_damage, dot_length,
                            crypt_fever_points, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                            oh_input_topend_weapon_damage,
                            sum_oh_ps_attacks, oh_wep_damage_mod, rune_cd_tracker, sum_ps_attacks, current_power,
                            max_runic, dirge_points, sigil_of_strife, bonus_loop_ap, sigil_of_strife_amount,
                            sigil_of_strife_active, sigil_of_strife_timer,
                            trinket_hit_crit_tracker, mh_wep_random_value, oh_wep_random_value,
                            standard_10k_random_value, damage_result_number, standard_random_value)
                        if last_sim_run == True:
                            rotation.extend(rotation_a)
                            rotation_time.extend(rotation_time_a)
                            rotation_status.extend(rotation_status_a)
                            rotation_damage.extend(rotation_damage_a)
                        continue

                    if scourge_strike_points == 1 and (sigil_of_virulence == True or sigil_of_hanged_man == True) and (
                            sigil_of_virulence_buff == False and sigil_of_hanged_man_buff == False):
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=0, n_frost=1, n_unholy=1, n_skip=0, n_reset_window=0)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, gcd, dots, \
                                trinket_hit_crit_tracker, sigil_of_virulence_timer, sigil_of_virulence_buff, bonus_loop_str, sigil_of_hanged_man_buff, \
                                sigil_of_hanged_man_count, rune_cd_tracker, current_time, used_gcd, current_power, sum_scourge_strikes_attacks, \
                                bonus_loop_str, sigil_of_virulence_buff, sigil_of_hanged_man_count, scourge_strike_dot0_counter, scourge_strike_dot1_counter, \
                                sigil_of_hanged_man_timer, damage_result_number = scourge_strike_cast(tanking, H2,
                                                                                                      hit_from_gear,
                                                                                                      hit_from_other,
                                                                                                      target_level,
                                                                                                      all_expertise_dodge,
                                                                                                      all_expertise_parry,
                                                                                                      total_crit,
                                                                                                      annihilation_talent_points,
                                                                                                      increased_phy_crit,
                                                                                                      scourgeborne_battlegear_two_set,
                                                                                                      subversion_points,
                                                                                                      current_armor,
                                                                                                      armor_penetration,
                                                                                                      mh_input_lowend_weapon_damage,
                                                                                                      mh_input_topend_weapon_damage,
                                                                                                      attack_damage_normalization,
                                                                                                      current_ap,
                                                                                                      total_haste_rating,
                                                                                                      current_time,
                                                                                                      castable,
                                                                                                      last_rune_change,
                                                                                                      dk_presence,
                                                                                                      improved_unholy_presence_points,
                                                                                                      input_gcd, dots,
                                                                                                      vicious_strikes_points,
                                                                                                      outbreak_points,
                                                                                                      darkruned_battlegear_four_set,
                                                                                                      var_crit_amount,
                                                                                                      rage_of_rivendale_points,
                                                                                                      sum_scourge_strikes_attacks,
                                                                                                      dirge_points,
                                                                                                      sigil_of_hanged_man_buff,
                                                                                                      scourgelords_battlegear_two_set,
                                                                                                      hysteria_active,
                                                                                                      tricksoftt_active,
                                                                                                      increased_physical_damage,
                                                                                                      glyph_scourge_strike,
                                                                                                      increased_all_damage,
                                                                                                      sigil_of_virulence,
                                                                                                      sigil_of_virulence_buff,
                                                                                                      scourge_strike_dot0_counter,
                                                                                                      scourge_strike_dot1_counter,
                                                                                                      bonus_loop_str,
                                                                                                      sigil_of_hanged_man,
                                                                                                      sigil_of_hanged_man_count,
                                                                                                      castable1,
                                                                                                      sigil_of_awareness,
                                                                                                      gcd,
                                                                                                      sigil_of_hanged_man_timer,
                                                                                                      rune_cd_tracker,
                                                                                                      current_power,
                                                                                                      max_runic,
                                                                                                      scourgeborne_battlegear_four_set,
                                                                                                      sigil_of_virulence_timer,
                                                                                                      trinket_hit_crit_tracker,
                                                                                                      mh_wep_random_value,
                                                                                                      standard_10k_random_value,
                                                                                                      damage_result_number,
                                                                                                      standard_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    if (multiple_adds_timer < current_time or multiple_adds_timer_bp < current_time) and (
                            dots[0] - pestilence_reset_window) > 0 and (
                            dots[0] - pestilence_reset_window) < current_time and (
                            dots[1] - pestilence_reset_window) > 0 and (dots[
                                                                            1] - pestilence_reset_window) < current_time and amount_of_targets > 1:  # Spread Pest, if not on adds
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0, n_unholy=0, n_skip=1, n_reset_window=death_and_decay_cd, dk_spec=1)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, \
                                gcd, rune_of_cinderglacier_damage, multiple_adds_timer, multiple_adds_timer_bp, damage_result_number = pestilence_cast(
                                spell_hit_total, increased_spell_hit, target_level, total_crit, increased_spell_crit,
                                total_haste_rating, current_time, last_rune_change,
                                castable, improved_unholy_presence_points, dk_presence, input_gcd, rune_cd_tracker,
                                dots, dot_length, crypt_fever_points, multiple_adds_timer,
                                var_crit_amount, black_ice_points, tundra_stalker_points, rage_of_rivendale_points,
                                hysteria_active, tricksoftt_active, increased_spell_damage,
                                increased_all_damage, sum_pest_attacks, current_power, max_runic,
                                blood_of_the_north_points, just_used_death_rune, death, reaping_points,
                                rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                rune_of_cinderglacier_damage, pestilence_allow_reset, multiple_adds_timer_bp,
                                standard_10k_random_value, damage_result_number, pestilence_random_value,
                                standard_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue
                    if ghoul_frenzy_points == 1:
                        if dots[0] > current_time:
                            if dots[1] > current_time:
                                if ghoul_frenzy_buff_timer < current_time:
                                    able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                        rune_cd_tracker, current_time, dots, improved_unholy_presence_points,
                                        dk_presence,
                                        total_haste_rating, last_rune_change,
                                        n_blood=0, n_frost=0, n_unholy=1, n_skip=1, n_reset_window=death_and_decay_cd,
                                        dk_spec=1)
                                    if able_to_cast == 1:
                                        # Rune Hit
                                        haste_percentage = (
                                                                       total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                        haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                         last_rune_change[castable + 6])
                                        if improved_unholy_presence_points != 0:
                                            if dk_presence == 2:
                                                haste_rune_cd = haste_rune_cd - (haste_rune_cd * (
                                                            (improved_unholy_presence_points * 5) / 100))
                                        if dk_presence != 2:
                                            gcd = input_gcd / (1 + haste_percentage)
                                            if gcd < 1:
                                                gcd = 1
                                        ghoul_frenzy_buff_timer = current_time + 30
                                        rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                        current_power = runic_power(10, current_power, max_runic)
                                        if last_sim_run == True:
                                            rotation.append("Ghoul Frenzy")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Active")
                                            rotation_damage.append(0)
                                        current_time += gcd
                                        used_gcd = True
                                        continue
                    if use_blood_strike_over_blood_boil == True:
                        # Blood Strike
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0, n_unholy=0, n_skip=1, n_reset_window=death_and_decay_cd, dk_spec=1)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, current_power, \
                                dots, gcd, trinket_hit_crit_tracker, dancing_rune_weapon_damage, sigil_of_haunted_dreams_buff, sigil_of_haunted_dreams_timer, \
                                total_crit, t9_bonus, t9_cd_timer, t9_active_timer, bonus_loop_str, increased_all_damage, desolation_buff_timer, sudden_doom_damage, \
                                unholy_blight_amount, unholy_blight_timer, rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, \
                                rune_of_cinderglacier_active, sum_bs_attacks, damage_result_number = blood_strike_cast(
                                tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                all_expertise_parry, total_crit, annihilation_talent_points,
                                increased_phy_crit, subversion_points, current_armor, armor_penetration,
                                current_ap, attack_damage_normalization, total_haste_rating, current_time,
                                last_rune_change, castable, dk_presence, improved_unholy_presence_points,
                                dots, input_gcd, dancing_rune_weapon_points, dancing_rune_weapon_active,
                                darkruned_battlegear_four_set, var_crit_amount,
                                guile_of_gorefiend_points, tundra_stalker_points, blood_of_the_north_points,
                                t9_tank_two_set, rage_of_rivendale_points,
                                blood_strikes_points, might_of_mograine_points, hysteria_active, tricksoftt_active,
                                increased_physical_damage, increased_all_damage,
                                dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage, just_used_death_rune,
                                rune_cd_tracker, reaping_points,
                                sigil_of_haunted_dreams, sigil_of_haunted_dreams_buff, t9_dps_two_set, t9_bonus,
                                t9_cd_timer, bonus_loop_str, desolation_points,
                                desolation_buff, desolation_buff_timer, sudden_doom_points, sigil_of_vengeful_heart,
                                spell_hit_total, increased_spell_hit,
                                darkruned_battlegear_two_set, increased_spell_crit, impurity_points,
                                sigil_of_the_wild_buck,
                                black_ice_points, glyph_death_coil, morbitity_points, increased_spell_damage,
                                sudden_doom_damage, unholy_blight_points,
                                rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                rune_of_cinderglacier_damage, death, threat_of_thassarian_points,
                                oh_wep_damage_mod, sum_oh_bs_attacks, current_power, sum_bs_attacks, max_runic,
                                trinket_hit_crit_tracker, sigil_of_haunted_dreams_timer, t9_active_timer,
                                unholy_blight_amount, unholy_blight_timer,
                                damage_result_number, blood_strike_random_value, standard_random_value,
                                standard_10k_random_value, mh_wep_random_value, oh_wep_random_value, 
mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage, oh_input_lowend_weapon_damage, oh_input_topend_weapon_damage)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue
                    if use_blood_strike_over_blood_boil == False:  # Use Blood Boil
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0, n_unholy=0, n_skip=1, n_reset_window=death_and_decay_cd, dk_spec=1)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                deathchill_active, gcd, rune_of_cinderglacier_damage, blood_boil_damage, damage_result_number = blood_boil_cast(
                                spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                total_crit, increased_spell_crit, total_haste_rating,
                                current_time, last_rune_change, castable, improved_unholy_presence_points,
                                rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                current_ap, impurity_points, var_crit_amount, black_ice_points,
                                might_of_mograine_points, blood_strikes_points, blood_boil_damage,
                                dots, tundra_stalker_points, rage_of_rivendale_points, hysteria_active,
                                tricksoftt_active,
                                increased_spell_damage, increased_all_damage, sum_it_attacks, current_power,
                                rune_of_cinderglacier_active,
                                rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage, amount_of_targets,
                                damage_result_number, blood_boil_random_value, standard_10k_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue
                    # if gargoyle_cd < current_time:
                    if current_power >= death_coil_cost:  # Death Coil
                        rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                            current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, gcd, \
                            rune_of_cinderglacier_damage, multiple_adds_timer, unholy_blight_amount, unholy_blight_timer, death_coil_damage, damage_result_number = death_coil_cast(
                            spell_hit_total, increased_spell_hit, target_level, total_crit, increased_spell_crit,
                            current_time, death_coil_cost, darkruned_battlegear_two_set, unholy_blight_amount,
                            unholy_blight_timer,
                            dk_presence, input_gcd, rune_cd_tracker, dots, multiple_adds_timer, haste_percentage,
                            current_ap, impurity_points, sigil_of_vengeful_heart, death_coil_damage,
                            var_crit_amount, black_ice_points, tundra_stalker_points, rage_of_rivendale_points,
                            hysteria_active, tricksoftt_active, increased_spell_damage,
                            increased_all_damage, sum_pest_attacks, current_power, max_runic, sigil_of_the_wild_buck,
                            glyph_death_coil, morbitity_points, unholy_blight_points,
                            rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                            rune_of_cinderglacier_damage, standard_10k_random_value, damage_result_number,
                            death_coil_random_value, free_dc=False)
                        if last_sim_run == True:
                            rotation.extend(rotation_a)
                            rotation_time.extend(rotation_time_a)
                            rotation_status.extend(rotation_status_a)
                            rotation_damage.extend(rotation_damage_a)
                        continue

            if dk_spec == 2:  # Blood Spec
                if amount_of_targets == 1:  # Single Target Fight - Blood
                    if deathchill_points == 1:
                        if deathchill_active == True:
                            if deathchill_timer < current_time:
                                deathchill_active = False
                        if deathchill_cd < current_time:
                            if dots[0] > current_time:
                                if dots[1] > current_time:
                                    if last_sim_run == True:
                                        rotation.append("Death Chill")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Active")
                                        rotation_damage.append(0)
                                    deathchill_active = True
                                    deathchill_cd = current_time + 120
                                    deathchill_timer = current_time + 30
                    if ua_buff_timer >= current_time:
                        if ua_used == False:
                            ua_used = True
                            bonus_loop_str += ua_strength_increase_amount
                    elif ua_buff_timer < current_time:
                        ua_used = False
                        bonus_loop_str -= ua_strength_increase_amount
                        ua_strength_increase_amount = 0
                    if skip_erw == False:
                        if all_rune_check(blood, current_time, rune_cd_tracker) == 3:  # Empowered Rune Weapon
                            if all_rune_check(frost, current_time, rune_cd_tracker) == 3:
                                if all_rune_check(unholy, current_time, rune_cd_tracker) == 3:
                                    if all_rune_check(death, current_time, rune_cd_tracker) == 3:
                                        if all_rune_check(death_f, current_time, rune_cd_tracker) == 3:
                                            if all_rune_check(death_u, current_time, rune_cd_tracker) == 3:
                                                if erw_cd_timer < current_time:
                                                    if rune_cd_tracker[0] != 10000:
                                                        rune_reset_1 = 0
                                                    else:
                                                        rune_reset_1 = 6
                                                    if rune_cd_tracker[1] != 10000:
                                                        rune_reset_2 = 1
                                                    else:
                                                        rune_reset_2 = 7
                                                    if rune_cd_tracker[2] != 10000:
                                                        rune_reset_3 = 2
                                                    else:
                                                        rune_reset_3 = 8
                                                    if rune_cd_tracker[3] != 10000:
                                                        rune_reset_4 = 3
                                                    else:
                                                        rune_reset_4 = 9
                                                    if rune_cd_tracker[4] != 10000:
                                                        rune_reset_5 = 4
                                                    else:
                                                        rune_reset_5 = 10
                                                    if rune_cd_tracker[5] != 10000:
                                                        rune_reset_6 = 5
                                                    else:
                                                        rune_reset_6 = 11
                                                    if last_sim_run == True:
                                                        rotation.append("Empowered Rune Weapon")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(0)
                                                    current_power = runic_power(25, current_power, max_runic)
                                                    # rune_cd_tracker = [0, 0, 0, 0, 0, 0, 10000, 10000, 10000, 10000, 10000, 10000]
                                                    rune_cd_tracker[rune_reset_1] = 0
                                                    rune_cd_tracker[rune_reset_2] = 0
                                                    rune_cd_tracker[rune_reset_3] = 0
                                                    rune_cd_tracker[rune_reset_4] = 0
                                                    rune_cd_tracker[rune_reset_5] = 0
                                                    rune_cd_tracker[rune_reset_6] = 0
                                                    erw_cd_timer = current_time + 300
                    if current_time >= horn:  # Horn       #Prob set all of these below after like if amount_of_targets >= 1, else run a sim w/ howling blast and stuff
                        if dk_presence != 2:
                            gcd = input_gcd / (1 + haste_percentage)
                            if gcd < 1:
                                gcd = 1
                        current_power = runic_power(10, current_power, max_runic)
                        if last_sim_run == True:
                            rotation.append("Horn of Winter")
                            rotation_time.append(current_time)
                            rotation_status.append("Active")
                            rotation_damage.append(0)
                        horn += horn_timer
                        current_time += gcd
                        used_gcd = True
                        continue

                    if dots[0] > current_time:  # Use Blood Tap
                        if dots[1] > current_time:
                            castable = all_rune_check(blood, current_time, rune_cd_tracker)
                            if castable == 3:
                                if rune_cd_tracker[6] == 10000:
                                    if rune_cd_tracker[7] == 10000:
                                        if blood_tap_cd <= current_time:
                                            blood_tap_cd = current_time + 60
                                            if last_sim_run == True:
                                                rotation.append("Blood Tap")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Active")
                                                rotation_damage.append(0)
                                            haste_percentage = (
                                                                           total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                            haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                             last_rune_change[castable + 6])
                                            if improved_unholy_presence_points != 0:
                                                if dk_presence == 2:
                                                    haste_rune_cd = haste_rune_cd - (haste_rune_cd * (
                                                                (improved_unholy_presence_points * 5) / 100))
                                            if rune_cd_tracker[0] < rune_cd_tracker[1]:
                                                castable = 0
                                                death_castable = castable + death
                                                haste_percentage = (
                                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                                haste_rune_cd = 0
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                            else:
                                                castable = 1
                                                death_castable = castable + death
                                                haste_percentage = (
                                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                                haste_rune_cd = 0
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000

                    if skip_disease == False:
                        if dots[0] <= current_time:  # Cast Icy Touch First Global
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=1, n_unholy=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot0_damage, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, damage_result_number = icy_touch_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    total_crit, rime_points, increased_spell_crit, total_haste_rating,
                                    current_time, last_rune_change, castable, improved_unholy_presence_points,
                                    rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                    sigil_of_the_frozen_conscience, current_ap, impurity_points, var_crit_amount,
                                    improved_icy_touch_points, black_ice_points, glacier_rot_points,
                                    dots, tundra_stalker_points, merciless_combat_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active,
                                    fight_length, fight_sub_35percent, increased_spell_damage, increased_all_damage,
                                    sum_it_attacks, current_power, max_runic,
                                    chill_of_the_grave_points, dot_length, crypt_fever_points,
                                    rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage,
                                    damage_result_number, standard_10k_random_value, icy_touch_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                        if dots[1] <= current_time:  # Plague Strike, Second Global
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=0, n_unholy=1)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot1_damage, \
                                    current_power, dots, gcd, trinket_hit_crit_tracker, sum_ps_attacks, sigil_of_strife_active, sigil_of_strife_timer, bonus_loop_ap, \
                                    sum_oh_ps_attacks, dancing_rune_weapon_damage, damage_result_number = plague_strike_cast(
                                    tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                    all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, scourgeborne_plate_two_set, vicious_strikes_points,
                                    current_armor, armor_penetration, mh_input_lowend_weapon_damage,
                                    mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                    total_haste_rating, current_time, last_rune_change, castable,
                                    improved_unholy_presence_points, dk_presence, input_gcd, dancing_rune_weapon_points,
                                    dancing_rune_weapon_active, var_crit_amount,
                                    tundra_stalker_points, dots, outbreak_points, rage_of_rivendale_points,
                                    glyph_plague_strike, hysteria_active, tricksoftt_active,
                                    increased_physical_damage, increased_all_damage, dancing_rune_weapon_damage_multi,
                                    dancing_rune_weapon_damage, dot_length,
                                    crypt_fever_points, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                    oh_input_topend_weapon_damage,
                                    sum_oh_ps_attacks, oh_wep_damage_mod, rune_cd_tracker, sum_ps_attacks,
                                    current_power,
                                    max_runic, dirge_points, sigil_of_strife, bonus_loop_ap, sigil_of_strife_amount,
                                    sigil_of_strife_active, sigil_of_strife_timer,
                                    trinket_hit_crit_tracker, mh_wep_random_value, oh_wep_random_value,
                                    standard_10k_random_value, damage_result_number, standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue
                    if pestilence_allow_reset == False:
                        if (dots[0] - pestilence_reset_window) > 0 and (
                                dots[0] - pestilence_reset_window) < current_time:  # Refresh Icy Touch
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=1, n_unholy=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot0_damage, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, damage_result_number = icy_touch_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    total_crit, rime_points, increased_spell_crit, total_haste_rating,
                                    current_time, last_rune_change, castable, improved_unholy_presence_points,
                                    rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                    sigil_of_the_frozen_conscience, current_ap, impurity_points, var_crit_amount,
                                    improved_icy_touch_points, black_ice_points, glacier_rot_points,
                                    dots, tundra_stalker_points, merciless_combat_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active,
                                    fight_length, fight_sub_35percent, increased_spell_damage, increased_all_damage,
                                    sum_it_attacks, current_power, max_runic,
                                    chill_of_the_grave_points, dot_length, crypt_fever_points,
                                    rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage,
                                    damage_result_number, standard_10k_random_value, icy_touch_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                        if (dots[1] - pestilence_reset_window) > 0 and (
                                dots[1] - pestilence_reset_window) < current_time:  # Refresh Plague Strike
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=0, n_unholy=1)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot1_damage, \
                                    current_power, dots, gcd, trinket_hit_crit_tracker, sum_ps_attacks, sigil_of_strife_active, sigil_of_strife_timer, bonus_loop_ap, \
                                    sum_oh_ps_attacks, dancing_rune_weapon_damage, damage_result_number = plague_strike_cast(
                                    tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                    all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, scourgeborne_plate_two_set, vicious_strikes_points,
                                    current_armor, armor_penetration, mh_input_lowend_weapon_damage,
                                    mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                    total_haste_rating, current_time, last_rune_change, castable,
                                    improved_unholy_presence_points, dk_presence, input_gcd, dancing_rune_weapon_points,
                                    dancing_rune_weapon_active, var_crit_amount,
                                    tundra_stalker_points, dots, outbreak_points, rage_of_rivendale_points,
                                    glyph_plague_strike, hysteria_active, tricksoftt_active,
                                    increased_physical_damage, increased_all_damage, dancing_rune_weapon_damage_multi,
                                    dancing_rune_weapon_damage, dot_length,
                                    crypt_fever_points, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                    oh_input_topend_weapon_damage,
                                    sum_oh_ps_attacks, oh_wep_damage_mod, rune_cd_tracker, sum_ps_attacks,
                                    current_power,
                                    max_runic, dirge_points, sigil_of_strife, bonus_loop_ap, sigil_of_strife_amount,
                                    sigil_of_strife_active, sigil_of_strife_timer,
                                    trinket_hit_crit_tracker, mh_wep_random_value, oh_wep_random_value,
                                    standard_10k_random_value, damage_result_number, standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                            if (dots[0] - pestilence_reset_window) > 0 and (
                                    dots[0] - pestilence_reset_window) < current_time:  # Pestilence
                                if (dots[1] - pestilence_reset_window) > 0 and (
                                        dots[1] - pestilence_reset_window) < current_time:
                                    if pestilence_allow_reset == True:
                                        if current_time - dots[0] == 0:
                                            continue
                                        if current_time - dots[1] == 0:
                                            continue
                                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points,
                                            dk_presence,
                                            total_haste_rating, last_rune_change,
                                            n_blood=1, n_frost=0, n_unholy=0)
                                        if able_to_cast == 1:
                                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                                current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, \
                                                gcd, rune_of_cinderglacier_damage, multiple_adds_timer, multiple_adds_timer_bp, damage_result_number = pestilence_cast(
                                                spell_hit_total, increased_spell_hit, target_level, total_crit,
                                                increased_spell_crit, total_haste_rating, current_time,
                                                last_rune_change,
                                                castable, improved_unholy_presence_points, dk_presence, input_gcd,
                                                rune_cd_tracker, dots, dot_length, crypt_fever_points,
                                                multiple_adds_timer,
                                                var_crit_amount, black_ice_points, tundra_stalker_points,
                                                rage_of_rivendale_points, hysteria_active, tricksoftt_active,
                                                increased_spell_damage,
                                                increased_all_damage, sum_pest_attacks, current_power, max_runic,
                                                blood_of_the_north_points, just_used_death_rune, death, reaping_points,
                                                rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                                rune_of_cinderglacier_damage, pestilence_allow_reset,
                                                multiple_adds_timer_bp,
                                                standard_10k_random_value, damage_result_number,
                                                pestilence_random_value, standard_random_value)
                                            if last_sim_run == True:
                                                rotation.extend(rotation_a)
                                                rotation_time.extend(rotation_time_a)
                                                rotation_status.extend(rotation_status_a)
                                                rotation_damage.extend(rotation_damage_a)
                                            continue

                    if dancing_rune_weapon_points == 1:
                        if dancing_rune_weapon_active == False:
                            if dancing_rune_weapon_cd < current_time:
                                dancing_rune_weapon_active = True
                                dancing_rune_weapon_length = current_time + 12
                                if glyph_dancing_rune_weapon == True:
                                    dancing_rune_weapon_length += 5
                                dancing_rune_weapon_cd = current_time + 90

                    if heart_strike_points == 1:  # TODO: Might have to add a skip or reset window to this function
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0, n_unholy=0)  # , n_skip=0, n_reset_window=pestilence_reset_window)
                        if able_to_cast == 1:
                            if amount_of_targets > 1:
                                attack_table_results = attack_table(1, tanking, H2, True, False, hit_from_gear,
                                                                    hit_from_other, target_level, all_expertise_dodge,
                                                                    all_expertise_parry, total_crit,
                                                                    standard_10k_random_value, damage_result_number, (
                                                                                annihilation_talent_points / 100) + increased_phy_crit + (
                                                                                (subversion_points * 3) / 100))
                                armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                                # wep_roll = weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)
                                wep_roll = mh_wep_random_value[damage_result_number]
                                damage_result_number = damage_array_updater(damage_result_number)
                                wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                                # Rune Hit
                                haste_percentage = (
                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                 last_rune_change[castable + 6])
                                if improved_unholy_presence_points != 0:
                                    if dk_presence == 2:
                                        haste_rune_cd = haste_rune_cd - (
                                                    haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                                if dk_presence != 2:
                                    gcd = input_gcd / (1 + haste_percentage)
                                    if gcd < 1:
                                        gcd = 1
                                ##Rune Miss
                                haste_rune_cd_miss = 1
                                how_many_dots_on_target = 0
                                if dots[0] > current_time:
                                    how_many_dots_on_target += 1
                                if dots[1] > current_time:
                                    how_many_dots_on_target += 1
                                if dots[2] > current_time:
                                    how_many_dots_on_target += 1
                                if multiple_adds_timer < current_time:
                                    how_many_dots_on_target = 0
                                if dancing_rune_weapon_points == 1:
                                    if dancing_rune_weapon_active == True:
                                        if attack_table_results == 0:
                                            atta_num = 0
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Miss")
                                            rotation_damage.append(atta_num)
                                        elif attack_table_results == 1:
                                            atta_num = 0
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Dodge")
                                            rotation_damage.append(atta_num)
                                        elif attack_table_results == 5:
                                            atta_num = (((0 + (wep_roll * .25)) + (
                                                        (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                                     (0 + (wep_roll * .25)) * (
                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                    ((0 + (wep_roll * .25)) + (
                                                                                (0 + (wep_roll * .25)) * (
                                                                                    .1 * how_many_dots_on_target)) + (
                                                                                 (0 + (wep_roll * .25)) * (
                                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                           var_crit_amount)
                                            if dk_presence == 0:
                                                atta_num = atta_num + (atta_num * .15)
                                            if t9_tank_two_set == True:
                                                atta_num = atta_num + (atta_num * .05)
                                            if blood_strikes_points != 0:
                                                atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                            if might_of_mograine_points != 0:
                                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                            if scourgelords_battlegear_two_set == True:
                                                atta_num = atta_num + (atta_num * .07)
                                            if hysteria_active == True:
                                                atta_num = atta_num + (atta_num * .2)
                                            if tricksoftt_active == True:
                                                atta_num = atta_num + (atta_num * .15)
                                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                        atta_num * increased_all_damage)
                                            atta_num = atta_num * dancing_rune_weapon_damage_multi
                                            dancing_rune_weapon_damage += atta_num
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Crit")
                                            rotation_damage.append(atta_num)
                                            trinket_hit_crit_tracker = 2
                                            if sigil_of_haunted_dreams == True:
                                                if random.randint(0, 100) < 15:
                                                    if sigil_of_haunted_dreams_buff == False:
                                                        sigil_of_haunted_dreams_buff = True
                                                        sigil_of_haunted_dreams_timer = current_time + 10
                                                        total_crit = total_crit + ((173 / 45.8) / 100)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                            if t9_dps_two_set == True:
                                                if t9_bonus == False:
                                                    if t9_cd_timer < current_time:
                                                        if (random.randint(0, 10000) / 100) < 50:
                                                            t9_bonus = True
                                                            t9_cd_timer = current_time + 45
                                                            t9_active_timer = current_time + 15
                                                            bonus_loop_str += 180
                                                            rotation.append("T9 DPS 2p Bonus")
                                                            rotation_time.append(current_time)
                                                            rotation_damage.append(0)
                                                            rotation_status.append("Proc")
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                            if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                if (standard_10k_random_value[
                                                        damage_result_number] / 100) < sudden_doom_points * 5:
                                                    hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                    standard_10k_random_value, damage_result_number)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    crit = spell_crit(
                                                        (total_crit + (darkruned_battlegear_two_set / 100)),
                                                        spell_hit_total, increased_spell_hit, target_level,
                                                        standard_10k_random_value, damage_result_number,
                                                        increased_spell_crit)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    if hit == True:
                                                        if crit == True:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            damage_result_number = damage_array_updater(
                                                                damage_result_number)
                                                            atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                             impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Crit")
                                                            rotation_damage.append(atta_num)
                                                        else:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            damage_result_number = damage_array_updater(
                                                                damage_result_number)
                                                            atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                        (impurity_points * 4) / 100))) * 0))
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Hit")
                                                            rotation_damage.append(atta_num)
                                                    if hit == False:
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Miss")
                                                        rotation_damage.append(0)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                        elif attack_table_results == 7:
                                            atta_num = (((0 + (wep_roll * .25)) + (
                                                        (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                                     (0 + (wep_roll * .25)) * (
                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                    ((0 + (wep_roll * .25)) + (
                                                                                (0 + (wep_roll * .25)) * (
                                                                                    .1 * how_many_dots_on_target)) + (
                                                                                 (0 + (wep_roll * .25)) * (
                                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                            if dk_presence == 0:
                                                atta_num = atta_num + (atta_num * .15)
                                            if t9_tank_two_set == True:
                                                atta_num = atta_num + (atta_num * .05)
                                            if blood_strikes_points != 0:
                                                atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                            if might_of_mograine_points != 0:
                                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                            if scourgelords_battlegear_two_set == True:
                                                atta_num = atta_num + (atta_num * .07)
                                            if hysteria_active == True:
                                                atta_num = atta_num + (atta_num * .2)
                                            if tricksoftt_active == True:
                                                atta_num = atta_num + (atta_num * .15)
                                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                        atta_num * increased_all_damage)
                                            atta_num = atta_num * dancing_rune_weapon_damage_multi
                                            dancing_rune_weapon_damage += atta_num
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Hit")
                                            rotation_damage.append(atta_num)
                                            trinket_hit_crit_tracker = 1
                                            if sigil_of_haunted_dreams == True:
                                                if random.randint(0, 100) < 15:
                                                    if sigil_of_haunted_dreams_buff == False:
                                                        sigil_of_haunted_dreams_buff = True
                                                        sigil_of_haunted_dreams_timer = current_time + 10
                                                        total_crit = total_crit + ((173 / 45.8) / 100)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                            if t9_dps_two_set == True:
                                                if t9_bonus == False:
                                                    if t9_cd_timer < current_time:
                                                        if (random.randint(0, 10000) / 100) < 50:
                                                            t9_bonus = True
                                                            t9_cd_timer = current_time + 45
                                                            t9_active_timer = current_time + 15
                                                            bonus_loop_str += 180
                                                            rotation.append("T9 DPS 2p Bonus")
                                                            rotation_time.append(current_time)
                                                            rotation_damage.append(0)
                                                            rotation_status.append("Proc")
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                            if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                if (standard_10k_random_value[
                                                        damage_result_number] / 100) < sudden_doom_points * 5:
                                                    hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                    standard_10k_random_value, damage_result_number)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    crit = spell_crit(
                                                        (total_crit + (darkruned_battlegear_two_set / 100)),
                                                        spell_hit_total, increased_spell_hit, target_level,
                                                        standard_10k_random_value, damage_result_number,
                                                        increased_spell_crit)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    if hit == True:
                                                        if crit == True:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            damage_result_number = damage_array_updater(
                                                                damage_result_number)
                                                            atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                             impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Crit")
                                                            rotation_damage.append(atta_num)
                                                        else:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            damage_result_number = damage_array_updater(
                                                                damage_result_number)
                                                            atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                        (impurity_points * 4) / 100))) * 0))
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Hit")
                                                            rotation_damage.append(atta_num)
                                                    if hit == False:
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Miss")
                                                        rotation_damage.append(0)
                                if attack_table_results == 0:
                                    atta_num = 0
                                    rotation.append("Heart Strike - Second Target")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Miss")
                                    rotation_damage.append(atta_num)
                                elif attack_table_results == 1:
                                    atta_num = 0
                                    rotation.append("Heart Strike - Second Target")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Dodge")
                                    rotation_damage.append(atta_num)
                                elif attack_table_results == 5:
                                    # crit attack
                                    atta_num = (((0 + (wep_roll * .25)) + (
                                                (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                             (0 + (wep_roll * .25)) * (
                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                            ((0 + (wep_roll * .25)) + ((0 + (wep_roll * .25)) * (
                                                                        .1 * how_many_dots_on_target)) + (
                                                                         (0 + (wep_roll * .25)) * (
                                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                   var_crit_amount)
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if t9_tank_two_set == True:
                                        atta_num = atta_num + (atta_num * .05)
                                    if blood_strikes_points != 0:
                                        atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                    if might_of_mograine_points != 0:
                                        atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                    if scourgelords_battlegear_two_set == True:
                                        atta_num = atta_num + (atta_num * .07)
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    sum_heart_strike_attacks += atta_num
                                    trinket_hit_crit_tracker = 2
                                    if sigil_of_haunted_dreams == True:
                                        if random.randint(0, 100) < 15:
                                            if sigil_of_haunted_dreams_buff == False:
                                                sigil_of_haunted_dreams_buff = True
                                                sigil_of_haunted_dreams_timer = current_time + 10
                                                total_crit = total_crit + ((173 / 45.8) / 100)
                                        damage_result_number = damage_array_updater(damage_result_number)
                                    if t9_dps_two_set == True:
                                        if t9_bonus == False:
                                            if t9_cd_timer < current_time:
                                                if (random.randint(0, 10000) / 100) < 50:
                                                    t9_bonus = True
                                                    t9_cd_timer = current_time + 45
                                                    t9_active_timer = current_time + 15
                                                    bonus_loop_str += 180
                                                    rotation.append("T9 DPS 2p Bonus")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Proc")
                                                damage_result_number = damage_array_updater(damage_result_number)
                                    if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                        if (standard_10k_random_value[
                                                damage_result_number] / 100) < sudden_doom_points * 5:
                                            hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                              spell_hit_total, increased_spell_hit, target_level,
                                                              standard_10k_random_value, damage_result_number,
                                                              increased_spell_crit)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            if hit == True:
                                                if crit == True:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                (impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Crit")
                                                    rotation_damage.append(atta_num)
                                                else:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    atta_num = (atta_num + ((current_ap + (
                                                                current_ap * ((impurity_points * 4) / 100))) * 0))
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Hit")
                                                    rotation_damage.append(atta_num)
                                            if hit == False:
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Miss")
                                                rotation_damage.append(0)
                                        damage_result_number = damage_array_updater(damage_result_number)
                                    rotation.append("Heart Strike - Second Target")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Crit")
                                    rotation_damage.append(atta_num)
                                elif attack_table_results == 7:
                                    # normal attack
                                    atta_num = (((0 + (wep_roll * .25)) + (
                                                (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                             (0 + (wep_roll * .25)) * (
                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                            ((0 + (wep_roll * .25)) + ((0 + (wep_roll * .25)) * (
                                                                        .1 * how_many_dots_on_target)) + (
                                                                         (0 + (wep_roll * .25)) * (
                                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if t9_tank_two_set == True:
                                        atta_num = atta_num + (atta_num * .05)
                                    if blood_strikes_points != 0:
                                        atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                    if might_of_mograine_points != 0:
                                        atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                    if scourgelords_battlegear_two_set == True:
                                        atta_num = atta_num + (atta_num * .07)
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    sum_heart_strike_attacks += atta_num
                                    trinket_hit_crit_tracker = 1
                                    if sigil_of_haunted_dreams == True:
                                        if random.randint(0, 100) < 15:
                                            if sigil_of_haunted_dreams_buff == False:
                                                sigil_of_haunted_dreams_buff = True
                                                sigil_of_haunted_dreams_timer = current_time + 10
                                                total_crit = total_crit + ((173 / 45.8) / 100)
                                        damage_result_number = damage_array_updater(damage_result_number)
                                    if t9_dps_two_set == True:
                                        if t9_bonus == False:
                                            if t9_cd_timer < current_time:
                                                if (random.randint(0, 10000) / 100) < 50:
                                                    t9_bonus = True
                                                    t9_cd_timer = current_time + 45
                                                    t9_active_timer = current_time + 15
                                                    bonus_loop_str += 180
                                                    rotation.append("T9 DPS 2p Bonus")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Proc")
                                                damage_result_number = damage_array_updater(damage_result_number)
                                    if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                        if (standard_10k_random_value[
                                                damage_result_number] / 100) < sudden_doom_points * 5:
                                            hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                              spell_hit_total, increased_spell_hit, target_level,
                                                              standard_10k_random_value, damage_result_number,
                                                              increased_spell_crit)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            if hit == True:
                                                if crit == True:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                (impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Crit")
                                                    rotation_damage.append(atta_num)
                                                else:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    atta_num = (atta_num + ((current_ap + (
                                                                current_ap * ((impurity_points * 4) / 100))) * 0))
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Hit")
                                                    rotation_damage.append(atta_num)
                                            if hit == False:
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Miss")
                                                rotation_damage.append(0)
                                        damage_result_number = damage_array_updater(damage_result_number)
                                    rotation.append("Heart Strike - Second Target")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Hit")
                                    rotation_damage.append(atta_num)
                            attack_table_results = attack_table(1, tanking, H2, True, False, hit_from_gear,
                                                                hit_from_other, target_level, all_expertise_dodge,
                                                                all_expertise_parry, total_crit,
                                                                standard_10k_random_value, damage_result_number, (
                                                                            annihilation_talent_points / 100) + increased_phy_crit + (
                                                                            (subversion_points * 3) / 100))
                            armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                            # wep_roll = weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)
                            wep_roll = mh_wep_random_value[damage_result_number]
                            damage_result_number = damage_array_updater(damage_result_number)
                            wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                            # Rune Hit
                            haste_percentage = (
                                                           total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                            haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                             last_rune_change[castable + 6])
                            if improved_unholy_presence_points != 0:
                                if dk_presence == 2:
                                    haste_rune_cd = haste_rune_cd - (
                                                haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                            if dk_presence != 2:
                                gcd = input_gcd / (1 + haste_percentage)
                                if gcd < 1:
                                    gcd = 1
                            ##Rune Miss
                            haste_rune_cd_miss = 1
                            how_many_dots_on_target = 0
                            if dots[0] > current_time:
                                how_many_dots_on_target += 1
                            if dots[1] > current_time:
                                how_many_dots_on_target += 1
                            if dots[2] > current_time:
                                how_many_dots_on_target += 1
                            if dancing_rune_weapon_points == 1:
                                if dancing_rune_weapon_active == True:
                                    if attack_table_results == 0:
                                        atta_num = 0
                                        rotation.append("Dancing Rune Weapon")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Miss")
                                        rotation_damage.append(atta_num)
                                    elif attack_table_results == 1:
                                        atta_num = 0
                                        rotation.append("Dancing Rune Weapon")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Dodge")
                                        rotation_damage.append(atta_num)
                                    elif attack_table_results == 5:
                                        atta_num = (((0 + (wep_roll * .5)) + (
                                                    (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                                 (0 + (wep_roll * .5)) * (
                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                            .1 * how_many_dots_on_target)) + (
                                                                             (0 + (wep_roll * .5)) * (
                                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                       var_crit_amount)
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if t9_tank_two_set == True:
                                            atta_num = atta_num + (atta_num * .05)
                                        if blood_strikes_points != 0:
                                            atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if scourgelords_battlegear_two_set == True:
                                            atta_num = atta_num + (atta_num * .07)
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                    atta_num * increased_all_damage)
                                        atta_num = atta_num * dancing_rune_weapon_damage_multi
                                        dancing_rune_weapon_damage += atta_num
                                        rotation.append("Dancing Rune Weapon")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Crit")
                                        rotation_damage.append(atta_num)
                                        trinket_hit_crit_tracker = 2
                                        if sigil_of_haunted_dreams == True:
                                            if random.randint(0, 100) < 15:
                                                if sigil_of_haunted_dreams_buff == False:
                                                    sigil_of_haunted_dreams_buff = True
                                                    sigil_of_haunted_dreams_timer = current_time + 10
                                                    total_crit = total_crit + ((173 / 45.8) / 100)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                        if t9_dps_two_set == True:
                                            if t9_bonus == False:
                                                if t9_cd_timer < current_time:
                                                    if (random.randint(0, 10000) / 100) < 50:
                                                        t9_bonus = True
                                                        t9_cd_timer = current_time + 45
                                                        t9_active_timer = current_time + 15
                                                        bonus_loop_str += 180
                                                        rotation.append("T9 DPS 2p Bonus")
                                                        rotation_time.append(current_time)
                                                        rotation_damage.append(0)
                                                        rotation_status.append("Proc")
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                        if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                            if (standard_10k_random_value[
                                                    damage_result_number] / 100) < sudden_doom_points * 5:
                                                hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                standard_10k_random_value, damage_result_number)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                                  spell_hit_total, increased_spell_hit, target_level,
                                                                  standard_10k_random_value, damage_result_number,
                                                                  increased_spell_crit)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                if hit == True:
                                                    if crit == True:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                         impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Crit")
                                                        rotation_damage.append(atta_num)
                                                    else:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        atta_num = (atta_num + ((current_ap + (
                                                                    current_ap * ((impurity_points * 4) / 100))) * 0))
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Hit")
                                                        rotation_damage.append(atta_num)
                                                if hit == False:
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Miss")
                                                    rotation_damage.append(0)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                    elif attack_table_results == 7:
                                        atta_num = (((0 + (wep_roll * .5)) + (
                                                    (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                                 (0 + (wep_roll * .5)) * (
                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                            .1 * how_many_dots_on_target)) + (
                                                                             (0 + (wep_roll * .5)) * (
                                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if t9_tank_two_set == True:
                                            atta_num = atta_num + (atta_num * .05)
                                        if blood_strikes_points != 0:
                                            atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if scourgelords_battlegear_two_set == True:
                                            atta_num = atta_num + (atta_num * .07)
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                    atta_num * increased_all_damage)
                                        atta_num = atta_num * dancing_rune_weapon_damage_multi
                                        dancing_rune_weapon_damage += atta_num
                                        rotation.append("Dancing Rune Weapon")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Hit")
                                        rotation_damage.append(atta_num)
                                        trinket_hit_crit_tracker = 1
                                        if sigil_of_haunted_dreams == True:
                                            if random.randint(0, 100) < 15:
                                                if sigil_of_haunted_dreams_buff == False:
                                                    sigil_of_haunted_dreams_buff = True
                                                    sigil_of_haunted_dreams_timer = current_time + 10
                                                    total_crit = total_crit + ((173 / 45.8) / 100)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                        if t9_dps_two_set == True:
                                            if t9_bonus == False:
                                                if t9_cd_timer < current_time:
                                                    if (random.randint(0, 10000) / 100) < 50:
                                                        t9_bonus = True
                                                        t9_cd_timer = current_time + 45
                                                        t9_active_timer = current_time + 15
                                                        bonus_loop_str += 180
                                                        rotation.append("T9 DPS 2p Bonus")
                                                        rotation_time.append(current_time)
                                                        rotation_damage.append(0)
                                                        rotation_status.append("Proc")
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                        if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                            if (standard_10k_random_value[
                                                    damage_result_number] / 100) < sudden_doom_points * 5:
                                                hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                standard_10k_random_value, damage_result_number)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                                  spell_hit_total, increased_spell_hit, target_level,
                                                                  standard_10k_random_value, damage_result_number,
                                                                  increased_spell_crit)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                if hit == True:
                                                    if crit == True:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                         impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Crit")
                                                        rotation_damage.append(atta_num)
                                                    else:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        atta_num = (atta_num + ((current_ap + (
                                                                    current_ap * ((impurity_points * 4) / 100))) * 0))
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Hit")
                                                        rotation_damage.append(atta_num)
                                                if hit == False:
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Miss")
                                                    rotation_damage.append(0)
                                            damage_result_number = damage_array_updater(damage_result_number)
                            if attack_table_results == 0:
                                atta_num = 0
                                rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                                rotation.append("Heart Strike")
                                rotation_time.append(current_time)
                                rotation_status.append("Miss")
                                rotation_damage.append(atta_num)
                                current_time = current_time + gcd
                                used_gcd = True
                                continue
                            elif attack_table_results == 1:
                                atta_num = 0
                                rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                                rotation.append("Heart Strike")
                                rotation_time.append(current_time)
                                rotation_status.append("Dodge")
                                rotation_damage.append(atta_num)
                                current_time = current_time + gcd
                                used_gcd = True
                                continue
                            elif attack_table_results == 5:
                                # crit attack
                                rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                atta_num = (((0 + (wep_roll * .5)) + (
                                            (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                         (0 + (wep_roll * .5)) * (
                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                        ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                    .1 * how_many_dots_on_target)) + (
                                                                     (0 + (wep_roll * .5)) * (
                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                               var_crit_amount)
                                if dk_presence == 0:
                                    atta_num = atta_num + (atta_num * .15)
                                if t9_tank_two_set == True:
                                    atta_num = atta_num + (atta_num * .05)
                                if blood_strikes_points != 0:
                                    atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                if might_of_mograine_points != 0:
                                    atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                if scourgelords_battlegear_two_set == True:
                                    atta_num = atta_num + (atta_num * .07)
                                if hysteria_active == True:
                                    atta_num = atta_num + (atta_num * .2)
                                if tricksoftt_active == True:
                                    atta_num = atta_num + (atta_num * .15)
                                atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                            atta_num * increased_all_damage)
                                sum_heart_strike_attacks += atta_num
                                current_power = runic_power(10, current_power, max_runic)
                                trinket_hit_crit_tracker = 2
                                if sigil_of_haunted_dreams == True:
                                    if random.randint(0, 100) < 15:
                                        if sigil_of_haunted_dreams_buff == False:
                                            sigil_of_haunted_dreams_buff = True
                                            sigil_of_haunted_dreams_timer = current_time + 10
                                            total_crit = total_crit + ((173 / 45.8) / 100)
                                    damage_result_number = damage_array_updater(damage_result_number)
                                if t9_dps_two_set == True:
                                    if t9_bonus == False:
                                        if t9_cd_timer < current_time:
                                            if (random.randint(0, 10000) / 100) < 50:
                                                t9_bonus = True
                                                t9_cd_timer = current_time + 45
                                                t9_active_timer = current_time + 15
                                                bonus_loop_str += 180
                                                rotation.append("T9 DPS 2p Bonus")
                                                rotation_time.append(current_time)
                                                rotation_damage.append(0)
                                                rotation_status.append("Proc")
                                            damage_result_number = damage_array_updater(damage_result_number)
                                if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                    if (random.randint(0, 10000) / 100) < sudden_doom_points * 5:
                                        hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                        standard_10k_random_value, damage_result_number)
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                          spell_hit_total, increased_spell_hit, target_level,
                                                          standard_10k_random_value, damage_result_number,
                                                          increased_spell_crit)
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if hit == True:
                                            if crit == True:
                                                atta_num = death_coil_random_value[damage_result_number]
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                atta_num = (atta_num + ((current_ap + (current_ap * (
                                                            (impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                if sigil_of_vengeful_heart == True:
                                                    atta_num + 380
                                                if sigil_of_the_wild_buck == True:
                                                    atta_num += 80
                                                if black_ice_points == 5:
                                                    atta_num = atta_num + (atta_num * .1)
                                                elif black_ice_points == 4:
                                                    atta_num = atta_num + (atta_num * .08)
                                                elif black_ice_points == 3:
                                                    atta_num = atta_num + (atta_num * .06)
                                                elif black_ice_points == 2:
                                                    atta_num = atta_num + (atta_num * .04)
                                                elif black_ice_points == 1:
                                                    atta_num = atta_num + (atta_num * .02)
                                                if dk_presence == 0:
                                                    atta_num = atta_num + (atta_num * .15)
                                                if tundra_stalker_points != 0:
                                                    if dots[0] > current_time:
                                                        atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                                if glyph_death_coil == True:
                                                    atta_num += atta_num * .15
                                                if rage_of_rivendale_points != 0:
                                                    if dots[1] > current_time:
                                                        atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                                if morbitity_points != 0:
                                                    atta_num += ((morbitity_points * 5) / 100)
                                                if hysteria_active == True:
                                                    atta_num = atta_num + (atta_num * .2)
                                                if tricksoftt_active == True:
                                                    atta_num = atta_num + (atta_num * .15)
                                                atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                            atta_num * increased_all_damage)
                                                sudden_doom_damage += atta_num
                                                if unholy_blight_points == 1:
                                                    unholy_blight_amount = atta_num / 10
                                                    unholy_blight_timer = current_time + 10
                                                if rune_of_cinderglacier_active == True:
                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                    rune_of_cinderglacier_active_count += 1
                                                    rotation.append("Rune of Cinderglacier")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Active")
                                                    rotation_damage.append(atta_num * .2)
                                                    if rune_of_cinderglacier_active_count == 2:
                                                        rune_of_cinderglacier_active = False
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Crit")
                                                rotation_damage.append(atta_num)
                                            else:
                                                atta_num = death_coil_random_value[damage_result_number]
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                atta_num = (atta_num + ((current_ap + (
                                                            current_ap * ((impurity_points * 4) / 100))) * 0))
                                                if sigil_of_vengeful_heart == True:
                                                    atta_num + 380
                                                if sigil_of_the_wild_buck == True:
                                                    atta_num += 80
                                                if black_ice_points == 5:
                                                    atta_num = atta_num + (atta_num * .1)
                                                elif black_ice_points == 4:
                                                    atta_num = atta_num + (atta_num * .08)
                                                elif black_ice_points == 3:
                                                    atta_num = atta_num + (atta_num * .06)
                                                elif black_ice_points == 2:
                                                    atta_num = atta_num + (atta_num * .04)
                                                elif black_ice_points == 1:
                                                    atta_num = atta_num + (atta_num * .02)
                                                if dk_presence == 0:
                                                    atta_num = atta_num + (atta_num * .15)
                                                if tundra_stalker_points != 0:
                                                    if dots[0] > current_time:
                                                        atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                                if glyph_death_coil == True:
                                                    atta_num += atta_num * .15
                                                if rage_of_rivendale_points != 0:
                                                    if dots[1] > current_time:
                                                        atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                                if morbitity_points != 0:
                                                    atta_num += ((morbitity_points * 5) / 100)
                                                if hysteria_active == True:
                                                    atta_num = atta_num + (atta_num * .2)
                                                if tricksoftt_active == True:
                                                    atta_num = atta_num + (atta_num * .15)
                                                atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                            atta_num * increased_all_damage)
                                                sudden_doom_damage += atta_num
                                                if unholy_blight_points == 1:
                                                    unholy_blight_amount = atta_num / 10
                                                    unholy_blight_timer = current_time + 10
                                                if rune_of_cinderglacier_active == True:
                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                    rune_of_cinderglacier_active_count += 1
                                                    rotation.append("Rune of Cinderglacier")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Active")
                                                    rotation_damage.append(atta_num * .2)
                                                    if rune_of_cinderglacier_active_count == 2:
                                                        rune_of_cinderglacier_active = False
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Hit")
                                                rotation_damage.append(atta_num)
                                        if hit == False:
                                            rotation.append("Sudden Doom")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Miss")
                                            rotation_damage.append(0)
                                    damage_result_number = damage_array_updater(damage_result_number)
                                rotation.append("Heart Strike")
                                rotation_time.append(current_time)
                                rotation_status.append("Crit")
                                rotation_damage.append(atta_num)
                                current_time += gcd
                                used_gcd = True
                                continue
                            elif attack_table_results == 7:
                                # normal attack
                                rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                atta_num = (((0 + (wep_roll * .5)) + (
                                            (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                         (0 + (wep_roll * .5)) * (
                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                        ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                    .1 * how_many_dots_on_target)) + (
                                                                     (0 + (wep_roll * .5)) * (
                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                if dk_presence == 0:
                                    atta_num = atta_num + (atta_num * .15)
                                if t9_tank_two_set == True:
                                    atta_num = atta_num + (atta_num * .05)
                                if blood_strikes_points != 0:
                                    atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                if might_of_mograine_points != 0:
                                    atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                if scourgelords_battlegear_two_set == True:
                                    atta_num = atta_num + (atta_num * .07)
                                if hysteria_active == True:
                                    atta_num = atta_num + (atta_num * .2)
                                if tricksoftt_active == True:
                                    atta_num = atta_num + (atta_num * .15)
                                atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                            atta_num * increased_all_damage)
                                sum_heart_strike_attacks += atta_num
                                current_power = runic_power(10, current_power, max_runic)
                                trinket_hit_crit_tracker = 1
                                if sigil_of_haunted_dreams == True:
                                    if random.randint(0, 100) < 15:
                                        if sigil_of_haunted_dreams_buff == False:
                                            sigil_of_haunted_dreams_buff = True
                                            sigil_of_haunted_dreams_timer = current_time + 10
                                            total_crit = total_crit + ((173 / 45.8) / 100)
                                    damage_result_number = damage_array_updater(damage_result_number)
                                if t9_dps_two_set == True:
                                    if t9_bonus == False:
                                        if t9_cd_timer < current_time:
                                            if (random.randint(0, 10000) / 100) < 50:
                                                t9_bonus = True
                                                t9_cd_timer = current_time + 45
                                                t9_active_timer = current_time + 15
                                                bonus_loop_str += 180
                                                rotation.append("T9 DPS 2p Bonus")
                                                rotation_time.append(current_time)
                                                rotation_damage.append(0)
                                                rotation_status.append("Proc")
                                            damage_result_number = damage_array_updater(damage_result_number)
                                if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                    if (random.randint(0, 10000) / 100) < sudden_doom_points * 5:
                                        hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                        standard_10k_random_value, damage_result_number)
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                          spell_hit_total, increased_spell_hit, target_level,
                                                          standard_10k_random_value, damage_result_number,
                                                          increased_spell_crit)
                                        damage_result_number = damage_array_updater(damage_result_number)
                                        if hit == True:
                                            if crit == True:
                                                atta_num = death_coil_random_value[damage_result_number]
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                atta_num = (atta_num + ((current_ap + (current_ap * (
                                                            (impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                if sigil_of_vengeful_heart == True:
                                                    atta_num + 380
                                                if sigil_of_the_wild_buck == True:
                                                    atta_num += 80
                                                if black_ice_points == 5:
                                                    atta_num = atta_num + (atta_num * .1)
                                                elif black_ice_points == 4:
                                                    atta_num = atta_num + (atta_num * .08)
                                                elif black_ice_points == 3:
                                                    atta_num = atta_num + (atta_num * .06)
                                                elif black_ice_points == 2:
                                                    atta_num = atta_num + (atta_num * .04)
                                                elif black_ice_points == 1:
                                                    atta_num = atta_num + (atta_num * .02)
                                                if dk_presence == 0:
                                                    atta_num = atta_num + (atta_num * .15)
                                                if tundra_stalker_points != 0:
                                                    if dots[0] > current_time:
                                                        atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                                if glyph_death_coil == True:
                                                    atta_num += atta_num * .15
                                                if rage_of_rivendale_points != 0:
                                                    if dots[1] > current_time:
                                                        atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                                if morbitity_points != 0:
                                                    atta_num += ((morbitity_points * 5) / 100)
                                                if hysteria_active == True:
                                                    atta_num = atta_num + (atta_num * .2)
                                                if tricksoftt_active == True:
                                                    atta_num = atta_num + (atta_num * .15)
                                                atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                            atta_num * increased_all_damage)
                                                sudden_doom_damage += atta_num
                                                if unholy_blight_points == 1:
                                                    unholy_blight_amount = atta_num / 10
                                                    unholy_blight_timer = current_time + 10
                                                if rune_of_cinderglacier_active == True:
                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                    rune_of_cinderglacier_active_count += 1
                                                    rotation.append("Rune of Cinderglacier")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Active")
                                                    rotation_damage.append(atta_num * .2)
                                                    if rune_of_cinderglacier_active_count == 2:
                                                        rune_of_cinderglacier_active = False
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Crit")
                                                rotation_damage.append(atta_num)
                                            else:
                                                atta_num = death_coil_random_value[damage_result_number]
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                atta_num = (atta_num + ((current_ap + (
                                                            current_ap * ((impurity_points * 4) / 100))) * 0))
                                                if sigil_of_vengeful_heart == True:
                                                    atta_num + 380
                                                if sigil_of_the_wild_buck == True:
                                                    atta_num += 80
                                                if black_ice_points == 5:
                                                    atta_num = atta_num + (atta_num * .1)
                                                elif black_ice_points == 4:
                                                    atta_num = atta_num + (atta_num * .08)
                                                elif black_ice_points == 3:
                                                    atta_num = atta_num + (atta_num * .06)
                                                elif black_ice_points == 2:
                                                    atta_num = atta_num + (atta_num * .04)
                                                elif black_ice_points == 1:
                                                    atta_num = atta_num + (atta_num * .02)
                                                if dk_presence == 0:
                                                    atta_num = atta_num + (atta_num * .15)
                                                if tundra_stalker_points != 0:
                                                    if dots[0] > current_time:
                                                        atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                                if glyph_death_coil == True:
                                                    atta_num += atta_num * .15
                                                if rage_of_rivendale_points != 0:
                                                    if dots[1] > current_time:
                                                        atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                                if morbitity_points != 0:
                                                    atta_num += ((morbitity_points * 5) / 100)
                                                if hysteria_active == True:
                                                    atta_num = atta_num + (atta_num * .2)
                                                if tricksoftt_active == True:
                                                    atta_num = atta_num + (atta_num * .15)
                                                atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                            atta_num * increased_all_damage)
                                                sudden_doom_damage += atta_num
                                                if unholy_blight_points == 1:
                                                    unholy_blight_amount = atta_num / 10
                                                    unholy_blight_timer = current_time + 10
                                                if rune_of_cinderglacier_active == True:
                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                    rune_of_cinderglacier_active_count += 1
                                                    rotation.append("Rune of Cinderglacier")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Active")
                                                    rotation_damage.append(atta_num * .2)
                                                    if rune_of_cinderglacier_active_count == 2:
                                                        rune_of_cinderglacier_active = False
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Hit")
                                                rotation_damage.append(atta_num)
                                        if hit == False:
                                            rotation.append("Sudden Doom")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Miss")
                                            rotation_damage.append(0)
                                rotation.append("Heart Strike")
                                rotation_time.append(current_time)
                                rotation_status.append("Hit")
                                rotation_damage.append(atta_num)
                                current_time += gcd
                                used_gcd = True
                                continue

                    if heart_strike_points == 0:  # TODO: Will also need to add the n-skip and n-reset-window here also
                        # Blood Strike
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0, n_unholy=0)  # , n_skip=0, n_reset_window=pestilence_reset_window)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, current_power, \
                                dots, gcd, trinket_hit_crit_tracker, dancing_rune_weapon_damage, sigil_of_haunted_dreams_buff, sigil_of_haunted_dreams_timer, \
                                total_crit, t9_bonus, t9_cd_timer, t9_active_timer, bonus_loop_str, increased_all_damage, desolation_buff_timer, sudden_doom_damage, \
                                unholy_blight_amount, unholy_blight_timer, rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, \
                                rune_of_cinderglacier_active, sum_bs_attacks, damage_result_number = blood_strike_cast(
                                tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                all_expertise_parry, total_crit, annihilation_talent_points,
                                increased_phy_crit, subversion_points, current_armor, armor_penetration,
                                current_ap, attack_damage_normalization, total_haste_rating, current_time,
                                last_rune_change, castable, dk_presence, improved_unholy_presence_points,
                                dots, input_gcd, dancing_rune_weapon_points, dancing_rune_weapon_active,
                                darkruned_battlegear_four_set, var_crit_amount,
                                guile_of_gorefiend_points, tundra_stalker_points, blood_of_the_north_points,
                                t9_tank_two_set, rage_of_rivendale_points,
                                blood_strikes_points, might_of_mograine_points, hysteria_active, tricksoftt_active,
                                increased_physical_damage, increased_all_damage,
                                dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage, just_used_death_rune,
                                rune_cd_tracker, reaping_points,
                                sigil_of_haunted_dreams, sigil_of_haunted_dreams_buff, t9_dps_two_set, t9_bonus,
                                t9_cd_timer, bonus_loop_str, desolation_points,
                                desolation_buff, desolation_buff_timer, sudden_doom_points, sigil_of_vengeful_heart,
                                spell_hit_total, increased_spell_hit,
                                darkruned_battlegear_two_set, increased_spell_crit, impurity_points,
                                sigil_of_the_wild_buck,
                                black_ice_points, glyph_death_coil, morbitity_points, increased_spell_damage,
                                sudden_doom_damage, unholy_blight_points,
                                rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                rune_of_cinderglacier_damage, death, threat_of_thassarian_points,
                                oh_wep_damage_mod, sum_oh_bs_attacks, current_power, sum_bs_attacks, max_runic,
                                trinket_hit_crit_tracker, sigil_of_haunted_dreams_timer, t9_active_timer,
                                unholy_blight_amount, unholy_blight_timer,
                                damage_result_number, blood_strike_random_value, standard_random_value,
                                standard_10k_random_value, mh_wep_random_value, oh_wep_random_value, 
mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage, oh_input_lowend_weapon_damage, oh_input_topend_weapon_damage)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                        rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                        total_haste_rating, last_rune_change,
                        n_blood=0, n_frost=1, n_unholy=1, n_skip=0, n_reset_window=0)
                    if able_to_cast == 1:
                        attack_table_results = attack_table(1, tanking, H2, True, False, hit_from_gear, hit_from_other,
                                                            target_level, all_expertise_dodge, all_expertise_parry,
                                                            total_crit, standard_10k_random_value, damage_result_number,
                                                            ((annihilation_talent_points / 100) + increased_phy_crit + (
                                                                        scourgeborne_battlegear_two_set / 100) + (
                                                                         (improved_death_strikes_points * 3) / 100)))
                        armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                        # wep_roll = weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)
                        wep_roll = mh_wep_random_value[damage_result_number]
                        damage_result_number = damage_array_updater(damage_result_number)
                        wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                        # Rune Hit
                        haste_percentage = (total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                        haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                         last_rune_change[castable + 6])
                        if improved_unholy_presence_points != 0:
                            if dk_presence == 2:
                                haste_rune_cd = haste_rune_cd - (
                                            haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                        if dk_presence != 2:
                            gcd = input_gcd / (1 + haste_percentage)
                            if gcd < 1:
                                gcd = 1
                        ##Rune Miss
                        haste_rune_cd_miss = 1
                        how_many_dots_on_target = 0
                        if dots[0] > current_time:
                            how_many_dots_on_target += 1
                        if dots[1] > current_time:
                            how_many_dots_on_target += 1
                        if dots[2] > current_time:
                            how_many_dots_on_target += 1
                        if dancing_rune_weapon_points == 1:
                            if dancing_rune_weapon_active == True:
                                if attack_table_results == 0:
                                    atta_num = 0
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Miss")
                                    rotation_damage.append(atta_num)
                                elif attack_table_results == 1:
                                    atta_num = 0
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Dodge")
                                    rotation_damage.append(atta_num)
                                elif attack_table_results == 5:
                                    # crit attack
                                    atta_num = (((223 + (wep_roll * .75))) - (
                                                ((223 + (wep_roll * .75))) * armor_red_amount)) * (var_crit_amount)
                                    if sigil_of_awareness == True:
                                        atta_num + 315
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if tundra_stalker_points != 0:
                                        if dots[0] > current_time:
                                            atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                    if rage_of_rivendale_points != 0:
                                        if dots[1] > current_time:
                                            atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                    if might_of_mograine_points != 0:
                                        atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                    if improved_death_strikes_points != 0:
                                        atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                                    if glyph_death_strike == True:
                                        if current_power > 25:
                                            death_strike_extra_damage_bonus = 25
                                        else:
                                            death_strike_extra_damage_bonus = current_power
                                        atta_num += atta_num * death_strike_extra_damage_bonus
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    atta_num = atta_num * dancing_rune_weapon_damage_multi
                                    dancing_rune_weapon_damage += atta_num
                                    trinket_hit_crit_tracker = 2
                                    if sigil_of_virulence == True:
                                        if random.randint(0, 100) < 85:
                                            sigil_of_virulence_timer = current_time + 20
                                            if sigil_of_virulence_buff == False:
                                                sigil_of_virulence_buff = True
                                                bonus_loop_str += 200
                                        damage_result_number = damage_array_updater(damage_result_number)
                                    if sigil_of_hanged_man == True:
                                        if random.randint(0, 100) < 101:
                                            sigil_of_hanged_man_buff = True
                                            sigil_of_hanged_man_timer = current_time + 15
                                            sigil_of_hanged_man_count += 1
                                            if sigil_of_hanged_man_count < 4:
                                                bonus_loop_str += 73
                                            elif sigil_of_hanged_man_count >= 3:
                                                sigil_of_hanged_man_count = 3
                                        damage_result_number = damage_array_updater(damage_result_number)
                                    if death_rune_mastery_points != 0:
                                        if just_used_death_rune != True:
                                            proc_num = random.randint(0, 100)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            if death_rune_mastery_points < 3:
                                                death_proc_chance = (death_rune_mastery_points * .3) * 100
                                            elif death_rune_mastery_points == 3:
                                                death_proc_chance = 100
                                            if death_proc_chance >= proc_num:
                                                death_castable_f = castable + 6
                                                death_castable_u = castable1 + 6
                                                rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                                rune_cd_tracker[castable1] = 10000
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Crit")
                                    rotation_damage.append(atta_num)
                                    trinket_hit_crit_tracker = 2

                                elif attack_table_results == 7:
                                    atta_num = (((223 + (wep_roll * .75))) - (
                                                ((223 + (wep_roll * .75))) * armor_red_amount))
                                    if sigil_of_awareness == True:
                                        atta_num + 315
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if tundra_stalker_points != 0:
                                        if dots[0] > current_time:
                                            atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                    if rage_of_rivendale_points != 0:
                                        if dots[1] > current_time:
                                            atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                    if might_of_mograine_points != 0:
                                        atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                    if improved_death_strikes_points != 0:
                                        atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                                    if glyph_death_strike == True:
                                        if current_power > 25:
                                            death_strike_extra_damage_bonus = 25
                                        else:
                                            death_strike_extra_damage_bonus = current_power
                                        atta_num += atta_num * death_strike_extra_damage_bonus
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    atta_num = atta_num * dancing_rune_weapon_damage_multi
                                    dancing_rune_weapon_damage += atta_num
                                    trinket_hit_crit_tracker = 1
                                    if sigil_of_virulence == True:
                                        if random.randint(0, 100) < 85:
                                            sigil_of_virulence_timer = current_time + 20
                                            if sigil_of_virulence_buff == False:
                                                sigil_of_virulence_buff = True
                                                bonus_loop_str += 200
                                        damage_result_number = damage_array_updater(damage_result_number)
                                    if sigil_of_hanged_man == True:
                                        if random.randint(0, 100) < 101:
                                            sigil_of_hanged_man_buff = True
                                            sigil_of_hanged_man_timer = current_time + 15
                                            sigil_of_hanged_man_count += 1
                                            if sigil_of_hanged_man_count < 4:
                                                bonus_loop_str += 73
                                            elif sigil_of_hanged_man_count >= 3:
                                                sigil_of_hanged_man_count = 3
                                        damage_result_number = damage_array_updater(damage_result_number)
                                    if death_rune_mastery_points != 0:
                                        if just_used_death_rune != True:
                                            proc_num = random.randint(0, 100)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            if death_rune_mastery_points < 3:
                                                death_proc_chance = (death_rune_mastery_points * .3) * 100
                                            elif death_rune_mastery_points == 3:
                                                death_proc_chance = 100
                                            if death_proc_chance >= proc_num:
                                                death_castable_f = castable + 6
                                                death_castable_u = castable1 + 6
                                                rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                                rune_cd_tracker[castable1] = 10000
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Hit")
                                    rotation_damage.append(atta_num)
                                    trinket_hit_crit_tracker = 1

                        if threat_of_thassarian_points != 0:
                            if H2 == False:
                                threat_of_thass_roll = (threat_of_thassarian_points * 30)
                                if threat_of_thassarian_points == 3:
                                    threat_of_thass_roll += 10
                                threat_of_t_num = random.randint(0, 100)
                                damage_result_number = damage_array_updater(damage_result_number)
                                if threat_of_thass_roll >= threat_of_t_num:
                                    # oh_wep_roll = weapon_roll(oh_input_lowend_weapon_damage,oh_input_topend_weapon_damage)
                                    oh_wep_roll = oh_wep_random_value[damage_result_number]
                                    damage_result_number = damage_array_updater(damage_result_number)
                                    oh_wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                                    oh_attack_table_results = attack_table(1, tanking, H2, False, True, hit_from_gear,
                                                                           hit_from_other, target_level,
                                                                           all_expertise_dodge, all_expertise_parry,
                                                                           total_crit, standard_10k_random_value,
                                                                           damage_result_number, ((
                                                                                                              annihilation_talent_points / 100) + increased_phy_crit + (
                                                                                                              scourgeborne_battlegear_two_set / 100) + (
                                                                                                              (
                                                                                                                          improved_death_strikes_points * 3) / 100)))
                                    if oh_attack_table_results == 0:
                                        atta_num = 0
                                        rotation.append("OH - Death Strike")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Miss")
                                        rotation_damage.append(atta_num)
                                    elif oh_attack_table_results == 1:
                                        atta_num = 0
                                        rotation.append("OH - Death Strike")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Dodge")
                                        rotation_damage.append(atta_num)
                                    elif oh_attack_table_results == 5:
                                        # crit attack
                                        atta_num = (((223 + (oh_wep_roll * .75))) - (
                                                    ((223 + (oh_wep_roll * .75))) * armor_red_amount)) * (
                                                       var_crit_amount)
                                        if sigil_of_awareness == True:
                                            atta_num + 315
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if tundra_stalker_points != 0:
                                            if dots[0] > current_time:
                                                atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                        if rage_of_rivendale_points != 0:
                                            if dots[1] > current_time:
                                                atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if improved_death_strikes_points != 0:
                                            atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                                        if glyph_death_strike == True:
                                            if current_power > 25:
                                                death_strike_extra_damage_bonus = 25
                                            else:
                                                death_strike_extra_damage_bonus = current_power
                                            atta_num += atta_num * death_strike_extra_damage_bonus
                                        atta_num = atta_num * oh_wep_damage_mod
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                    atta_num * increased_all_damage)
                                        sum_death_strike_attacks += atta_num
                                        trinket_hit_crit_tracker = 2
                                        if sigil_of_virulence == True:
                                            if random.randint(0, 100) < 85:
                                                sigil_of_virulence_timer = current_time + 20
                                                if sigil_of_virulence_buff == False:
                                                    sigil_of_virulence_buff = True
                                                    bonus_loop_str += 200
                                            damage_result_number = damage_array_updater(damage_result_number)
                                        if sigil_of_hanged_man == True:
                                            if random.randint(0, 100) < 101:
                                                sigil_of_hanged_man_buff = True
                                                sigil_of_hanged_man_timer = current_time + 15
                                                sigil_of_hanged_man_count += 1
                                                if sigil_of_hanged_man_count < 4:
                                                    bonus_loop_str += 73
                                                elif sigil_of_hanged_man_count >= 3:
                                                    sigil_of_hanged_man_count = 3
                                            damage_result_number = damage_array_updater(damage_result_number)
                                        if death_rune_mastery_points != 0:
                                            if just_used_death_rune != True:
                                                proc_num = random.randint(0, 100)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                if death_rune_mastery_points < 3:
                                                    death_proc_chance = (death_rune_mastery_points * .3) * 100
                                                elif death_rune_mastery_points == 3:
                                                    death_proc_chance = 100
                                                if death_proc_chance >= proc_num:
                                                    death_castable_f = castable + 6
                                                    death_castable_u = castable1 + 6
                                                    rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd,
                                                                                                current_time)
                                                    rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd,
                                                                                                current_time)
                                                    rune_cd_tracker[castable] = 10000
                                                    rune_cd_tracker[castable1] = 10000
                                        rotation.append("OH - Death Strike")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Crit")
                                        rotation_damage.append(atta_num)


                                    elif oh_attack_table_results == 7:
                                        atta_num = (((223 + (oh_wep_roll * .75))) - (
                                                    ((223 + (oh_wep_roll * .75))) * armor_red_amount))
                                        if sigil_of_awareness == True:
                                            atta_num + 315
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if tundra_stalker_points != 0:
                                            if dots[0] > current_time:
                                                atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                        if rage_of_rivendale_points != 0:
                                            if dots[1] > current_time:
                                                atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if improved_death_strikes_points != 0:
                                            atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                                        if glyph_death_strike == True:
                                            if current_power > 25:
                                                death_strike_extra_damage_bonus = 25
                                            else:
                                                death_strike_extra_damage_bonus = current_power
                                            atta_num += atta_num * death_strike_extra_damage_bonus
                                        atta_num = atta_num * oh_wep_damage_mod
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                    atta_num * increased_all_damage)
                                        sum_death_strike_attacks += atta_num
                                        trinket_hit_crit_tracker = 1
                                        if sigil_of_virulence == True:
                                            if random.randint(0, 100) < 85:
                                                sigil_of_virulence_timer = current_time + 20
                                                if sigil_of_virulence_buff == False:
                                                    sigil_of_virulence_buff = True
                                                    bonus_loop_str += 200
                                            damage_result_number = damage_array_updater(damage_result_number)
                                        if sigil_of_hanged_man == True:
                                            if random.randint(0, 100) < 101:
                                                sigil_of_hanged_man_buff = True
                                                sigil_of_hanged_man_timer = current_time + 15
                                                sigil_of_hanged_man_count += 1
                                                if sigil_of_hanged_man_count < 4:
                                                    bonus_loop_str += 73
                                                elif sigil_of_hanged_man_count >= 3:
                                                    sigil_of_hanged_man_count = 3
                                            damage_result_number = damage_array_updater(damage_result_number)
                                        if death_rune_mastery_points != 0:
                                            if just_used_death_rune != True:
                                                proc_num = random.randint(0, 100)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                if death_rune_mastery_points < 3:
                                                    death_proc_chance = (death_rune_mastery_points * .3) * 100
                                                elif death_rune_mastery_points == 3:
                                                    death_proc_chance = 100
                                                if death_proc_chance >= proc_num:
                                                    death_castable_f = castable + 6
                                                    death_castable_u = castable1 + 6
                                                    rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd,
                                                                                                current_time)
                                                    rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd,
                                                                                                current_time)
                                                    rune_cd_tracker[castable] = 10000
                                                    rune_cd_tracker[castable1] = 10000
                                        rotation.append("OH - Death Strike")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Hit")
                                        rotation_damage.append(atta_num)

                        if attack_table_results == 0:
                            atta_num = 0
                            rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                            rune_cd_tracker[castable1] = rune_cd(haste_rune_cd_miss, current_time)
                            rotation.append("Death Strike")
                            rotation_time.append(current_time)
                            rotation_status.append("Miss")
                            rotation_damage.append(atta_num)
                            current_time = current_time + gcd
                            used_gcd = True
                            continue
                        elif attack_table_results == 1:
                            atta_num = 0
                            rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                            rune_cd_tracker[castable1] = rune_cd(haste_rune_cd_miss, current_time)
                            rotation.append("Death Strike")
                            rotation_time.append(current_time)
                            rotation_status.append("Dodge")
                            rotation_damage.append(atta_num)
                            current_time = current_time + gcd
                            used_gcd = True
                            continue
                        elif attack_table_results == 5:
                            # crit attack
                            rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                            rune_cd_tracker[castable1] = rune_cd(haste_rune_cd, current_time)
                            atta_num = (((223 + (wep_roll * .75))) - (
                                        ((223 + (wep_roll * .75))) * armor_red_amount)) * (var_crit_amount)
                            if sigil_of_awareness == True:
                                atta_num + 315
                            if dk_presence == 0:
                                atta_num = atta_num + (atta_num * .15)
                            if tundra_stalker_points != 0:
                                if dots[0] > current_time:
                                    atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                            if rage_of_rivendale_points != 0:
                                if dots[1] > current_time:
                                    atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                            if might_of_mograine_points != 0:
                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                            if improved_death_strikes_points != 0:
                                atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                            if glyph_death_strike == True:
                                if current_power > 25:
                                    death_strike_extra_damage_bonus = 25
                                else:
                                    death_strike_extra_damage_bonus = current_power
                                atta_num += atta_num * death_strike_extra_damage_bonus
                            if hysteria_active == True:
                                atta_num = atta_num + (atta_num * .2)
                            if tricksoftt_active == True:
                                atta_num = atta_num + (atta_num * .15)
                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                        atta_num * increased_all_damage)
                            sum_death_strike_attacks += atta_num
                            current_power = runic_power(15, current_power, max_runic)
                            if dirge_points != 0:
                                current_power = runic_power((dirge_points * 2.5), current_power, max_runic)
                            if scourgeborne_battlegear_four_set == True:
                                current_power = runic_power(5, current_power, max_runic)
                            trinket_hit_crit_tracker = 2
                            if sigil_of_virulence == True:
                                if random.randint(0, 100) < 85:
                                    sigil_of_virulence_timer = current_time + 20
                                    if sigil_of_virulence_buff == False:
                                        sigil_of_virulence_buff = True
                                        bonus_loop_str += 200
                                damage_result_number = damage_array_updater(damage_result_number)
                            if sigil_of_hanged_man == True:
                                if random.randint(0, 100) < 101:
                                    sigil_of_hanged_man_buff = True
                                    sigil_of_hanged_man_timer = current_time + 15
                                    sigil_of_hanged_man_count += 1
                                    if sigil_of_hanged_man_count < 4:
                                        bonus_loop_str += 73
                                    elif sigil_of_hanged_man_count >= 3:
                                        sigil_of_hanged_man_count = 3
                                damage_result_number = damage_array_updater(damage_result_number)
                            if death_rune_mastery_points != 0:
                                if just_used_death_rune != True:
                                    proc_num = random.randint(0, 100)
                                    damage_result_number = damage_array_updater(damage_result_number)
                                    if death_rune_mastery_points < 3:
                                        death_proc_chance = (death_rune_mastery_points * .3) * 100
                                    elif death_rune_mastery_points == 3:
                                        death_proc_chance = 100
                                    if death_proc_chance >= proc_num:
                                        death_castable_f = castable + 6
                                        death_castable_u = castable1 + 6
                                        rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd, current_time)
                                        rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd, current_time)
                                        rune_cd_tracker[castable] = 10000
                                        rune_cd_tracker[castable1] = 10000
                            rotation.append("Death Strike")
                            rotation_time.append(current_time)
                            rotation_status.append("Crit")
                            rotation_damage.append(atta_num)
                            current_time += gcd
                            used_gcd = True
                            # print("Obliterate Crit - " + str(atta_num))
                            continue
                        elif attack_table_results == 7:
                            rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                            rune_cd_tracker[castable1] = rune_cd(haste_rune_cd, current_time)
                            atta_num = (((223 + (wep_roll * .75))) - (((223 + (wep_roll * .75))) * armor_red_amount))
                            if sigil_of_awareness == True:
                                atta_num + 315
                            if dk_presence == 0:
                                atta_num = atta_num + (atta_num * .15)
                            if tundra_stalker_points != 0:
                                if dots[0] > current_time:
                                    atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                            if rage_of_rivendale_points != 0:
                                if dots[1] > current_time:
                                    atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                            if might_of_mograine_points != 0:
                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                            if improved_death_strikes_points != 0:
                                atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                            if glyph_death_strike == True:
                                if current_power > 25:
                                    death_strike_extra_damage_bonus = 25
                                else:
                                    death_strike_extra_damage_bonus = current_power
                                atta_num += atta_num * death_strike_extra_damage_bonus
                            if hysteria_active == True:
                                atta_num = atta_num + (atta_num * .2)
                            if tricksoftt_active == True:
                                atta_num = atta_num + (atta_num * .15)
                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                        atta_num * increased_all_damage)
                            sum_death_strike_attacks += atta_num
                            current_power = runic_power(15, current_power, max_runic)
                            if dirge_points != 0:
                                current_power = runic_power((dirge_points * 2.5), current_power, max_runic)
                            if scourgeborne_battlegear_four_set == True:
                                current_power = runic_power(5, current_power, max_runic)
                            trinket_hit_crit_tracker = 1
                            if sigil_of_virulence == True:
                                if random.randint(0, 100) < 85:
                                    sigil_of_virulence_timer = current_time + 20
                                    if sigil_of_virulence_buff == False:
                                        sigil_of_virulence_buff = True
                                        bonus_loop_str += 200
                                damage_result_number = damage_array_updater(damage_result_number)
                            if sigil_of_hanged_man == True:
                                if random.randint(0, 100) < 101:
                                    sigil_of_hanged_man_buff = True
                                    sigil_of_hanged_man_timer = current_time + 15
                                    sigil_of_hanged_man_count += 1
                                    if sigil_of_hanged_man_count < 4:
                                        bonus_loop_str += 73
                                    elif sigil_of_hanged_man_count >= 3:
                                        sigil_of_hanged_man_count = 3
                                damage_result_number = damage_array_updater(damage_result_number)
                            if death_rune_mastery_points != 0:
                                if just_used_death_rune != True:
                                    proc_num = random.randint(0, 100)
                                    damage_result_number = damage_array_updater(damage_result_number)
                                    if death_rune_mastery_points < 3:
                                        death_proc_chance = (death_rune_mastery_points * .3) * 100
                                    elif death_rune_mastery_points == 3:
                                        death_proc_chance = 100
                                    if death_proc_chance >= proc_num:
                                        death_castable_f = castable + 6
                                        death_castable_u = castable1 + 6
                                        rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd, current_time)
                                        rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd, current_time)
                                        rune_cd_tracker[castable] = 10000
                                        rune_cd_tracker[castable1] = 10000
                            rotation.append("Death Strike")
                            rotation_time.append(current_time)
                            rotation_status.append("Hit")
                            rotation_damage.append(atta_num)
                            current_time += gcd
                            used_gcd = True
                            # print("Obliterate - " + str(atta_num))
                            continue

                    if current_power >= death_coil_cost:  # Death Coil
                        rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                            current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, gcd, \
                            rune_of_cinderglacier_damage, multiple_adds_timer, unholy_blight_amount, unholy_blight_timer, death_coil_damage, damage_result_number = death_coil_cast(
                            spell_hit_total, increased_spell_hit, target_level, total_crit, increased_spell_crit,
                            current_time, death_coil_cost, darkruned_battlegear_two_set, unholy_blight_amount,
                            unholy_blight_timer,
                            dk_presence, input_gcd, rune_cd_tracker, dots, multiple_adds_timer, haste_percentage,
                            current_ap, impurity_points, sigil_of_vengeful_heart, death_coil_damage,
                            var_crit_amount, black_ice_points, tundra_stalker_points, rage_of_rivendale_points,
                            hysteria_active, tricksoftt_active, increased_spell_damage,
                            increased_all_damage, sum_pest_attacks, current_power, max_runic, sigil_of_the_wild_buck,
                            glyph_death_coil, morbitity_points, unholy_blight_points,
                            rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                            rune_of_cinderglacier_damage, standard_10k_random_value, damage_result_number,
                            death_coil_random_value, free_dc=False)
                        if last_sim_run == True:
                            rotation.extend(rotation_a)
                            rotation_time.extend(rotation_time_a)
                            rotation_status.extend(rotation_status_a)
                            rotation_damage.extend(rotation_damage_a)
                        continue

                if amount_of_targets > 1:  # AOE Fight - Blood
                    if deathchill_points == 1:
                        if deathchill_active == True:
                            if deathchill_timer < current_time:
                                deathchill_active = False
                        if deathchill_cd < current_time:
                            if dots[0] > current_time:
                                if dots[1] > current_time:
                                    rotation.append("Death Chill")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Active")
                                    rotation_damage.append(0)
                                    deathchill_active = True
                                    deathchill_cd = current_time + 120
                                    deathchill_timer = current_time + 30
                    if ua_buff_timer >= current_time:
                        if ua_used == False:
                            ua_used = True
                            bonus_loop_str += ua_strength_increase_amount
                    elif ua_buff_timer < current_time:
                        ua_used = False
                        bonus_loop_str -= ua_strength_increase_amount
                        ua_strength_increase_amount = 0
                    if skip_erw == False:
                        if all_rune_check(blood, current_time, rune_cd_tracker) == 3:  # Empowered Rune Weapon
                            if all_rune_check(frost, current_time, rune_cd_tracker) == 3:
                                if all_rune_check(unholy, current_time, rune_cd_tracker) == 3:
                                    if all_rune_check(death, current_time, rune_cd_tracker) == 3:
                                        if all_rune_check(death_f, current_time, rune_cd_tracker) == 3:
                                            if all_rune_check(death_u, current_time, rune_cd_tracker) == 3:
                                                if erw_cd_timer < current_time:
                                                    if rune_cd_tracker[0] != 10000:
                                                        rune_reset_1 = 0
                                                    else:
                                                        rune_reset_1 = 6
                                                    if rune_cd_tracker[1] != 10000:
                                                        rune_reset_2 = 1
                                                    else:
                                                        rune_reset_2 = 7
                                                    if rune_cd_tracker[2] != 10000:
                                                        rune_reset_3 = 2
                                                    else:
                                                        rune_reset_3 = 8
                                                    if rune_cd_tracker[3] != 10000:
                                                        rune_reset_4 = 3
                                                    else:
                                                        rune_reset_4 = 9
                                                    if rune_cd_tracker[4] != 10000:
                                                        rune_reset_5 = 4
                                                    else:
                                                        rune_reset_5 = 10
                                                    if rune_cd_tracker[5] != 10000:
                                                        rune_reset_6 = 5
                                                    else:
                                                        rune_reset_6 = 11
                                                    rotation.append("Empowered Rune Weapon")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Active")
                                                    rotation_damage.append(0)
                                                    current_power = runic_power(25, current_power, max_runic)
                                                    # rune_cd_tracker = [0, 0, 0, 0, 0, 0, 10000, 10000, 10000, 10000, 10000, 10000]
                                                    rune_cd_tracker[rune_reset_1] = 0
                                                    rune_cd_tracker[rune_reset_2] = 0
                                                    rune_cd_tracker[rune_reset_3] = 0
                                                    rune_cd_tracker[rune_reset_4] = 0
                                                    rune_cd_tracker[rune_reset_5] = 0
                                                    rune_cd_tracker[rune_reset_6] = 0
                                                    erw_cd_timer = current_time + 300
                    if current_time >= horn:  # Horn       #Prob set all of these below after like if amount_of_targets >= 1, else run a sim w/ howling blast and stuff
                        if dk_presence != 2:
                            gcd = input_gcd / (1 + haste_percentage)
                            if gcd < 1:
                                gcd = 1
                        current_power = runic_power(10, current_power, max_runic)
                        rotation.append("Horn of Winter")
                        rotation_time.append(current_time)
                        rotation_status.append("Active")
                        rotation_damage.append(0)
                        horn += horn_timer
                        current_time += gcd
                        used_gcd = True
                        continue

                    if dots[0] > current_time:  # Use Blood Tap
                        if dots[1] > current_time:
                            castable = all_rune_check(blood, current_time, rune_cd_tracker)
                            if castable == 3:
                                if rune_cd_tracker[6] == 10000:
                                    if rune_cd_tracker[7] == 10000:
                                        if blood_tap_cd <= current_time:
                                            blood_tap_cd = current_time + 60
                                            rotation.append("Blood Tap")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Active")
                                            rotation_damage.append(0)
                                            haste_percentage = (
                                                                           total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                            haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                             last_rune_change[castable + 6])
                                            if improved_unholy_presence_points != 0:
                                                if dk_presence == 2:
                                                    haste_rune_cd = haste_rune_cd - (haste_rune_cd * (
                                                                (improved_unholy_presence_points * 5) / 100))
                                            if rune_cd_tracker[0] < rune_cd_tracker[1]:
                                                castable = 0
                                                death_castable = castable + death
                                                haste_percentage = (
                                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                                haste_rune_cd = 0
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                            else:
                                                castable = 1
                                                death_castable = castable + death
                                                haste_percentage = (
                                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                                haste_rune_cd = 0
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000

                    if skip_disease == False:
                        if dots[0] <= current_time:  # Cast Icy Touch First Global
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=1, n_unholy=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot0_damage, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, damage_result_number = icy_touch_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    total_crit, rime_points, increased_spell_crit, total_haste_rating,
                                    current_time, last_rune_change, castable, improved_unholy_presence_points,
                                    rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                    sigil_of_the_frozen_conscience, current_ap, impurity_points, var_crit_amount,
                                    improved_icy_touch_points, black_ice_points, glacier_rot_points,
                                    dots, tundra_stalker_points, merciless_combat_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active,
                                    fight_length, fight_sub_35percent, increased_spell_damage, increased_all_damage,
                                    sum_it_attacks, current_power, max_runic,
                                    chill_of_the_grave_points, dot_length, crypt_fever_points,
                                    rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage,
                                    damage_result_number, standard_10k_random_value, icy_touch_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                        if dots[1] <= current_time:  # Plague Strike, Second Global
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=0, n_unholy=1)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot1_damage, \
                                    current_power, dots, gcd, trinket_hit_crit_tracker, sum_ps_attacks, sigil_of_strife_active, sigil_of_strife_timer, bonus_loop_ap, \
                                    sum_oh_ps_attacks, dancing_rune_weapon_damage, damage_result_number = plague_strike_cast(
                                    tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                    all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, scourgeborne_plate_two_set, vicious_strikes_points,
                                    current_armor, armor_penetration, mh_input_lowend_weapon_damage,
                                    mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                    total_haste_rating, current_time, last_rune_change, castable,
                                    improved_unholy_presence_points, dk_presence, input_gcd, dancing_rune_weapon_points,
                                    dancing_rune_weapon_active, var_crit_amount,
                                    tundra_stalker_points, dots, outbreak_points, rage_of_rivendale_points,
                                    glyph_plague_strike, hysteria_active, tricksoftt_active,
                                    increased_physical_damage, increased_all_damage, dancing_rune_weapon_damage_multi,
                                    dancing_rune_weapon_damage, dot_length,
                                    crypt_fever_points, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                    oh_input_topend_weapon_damage,
                                    sum_oh_ps_attacks, oh_wep_damage_mod, rune_cd_tracker, sum_ps_attacks,
                                    current_power,
                                    max_runic, dirge_points, sigil_of_strife, bonus_loop_ap, sigil_of_strife_amount,
                                    sigil_of_strife_active, sigil_of_strife_timer,
                                    trinket_hit_crit_tracker, mh_wep_random_value, oh_wep_random_value,
                                    standard_10k_random_value, damage_result_number, standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue
                    if pestilence_allow_reset == False:
                        if (dots[0] - pestilence_reset_window) > 0 and (
                                dots[0] - pestilence_reset_window) < current_time:  # Refresh Icy Touch
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=1, n_unholy=0)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot0_damage, \
                                    current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                    deathchill_active, gcd, rune_of_cinderglacier_damage, damage_result_number = icy_touch_cast(
                                    spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                    total_crit, rime_points, increased_spell_crit, total_haste_rating,
                                    current_time, last_rune_change, castable, improved_unholy_presence_points,
                                    rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                    sigil_of_the_frozen_conscience, current_ap, impurity_points, var_crit_amount,
                                    improved_icy_touch_points, black_ice_points, glacier_rot_points,
                                    dots, tundra_stalker_points, merciless_combat_points, rage_of_rivendale_points,
                                    hysteria_active, tricksoftt_active,
                                    fight_length, fight_sub_35percent, increased_spell_damage, increased_all_damage,
                                    sum_it_attacks, current_power, max_runic,
                                    chill_of_the_grave_points, dot_length, crypt_fever_points,
                                    rune_of_cinderglacier_active,
                                    rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage,
                                    damage_result_number, standard_10k_random_value, icy_touch_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                        if (dots[1] - pestilence_reset_window) > 0 and (
                                dots[1] - pestilence_reset_window) < current_time:  # Refresh Plague Strike
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=0, n_frost=0, n_unholy=1)
                            if able_to_cast == 1:
                                rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, last_dot1_damage, \
                                    current_power, dots, gcd, trinket_hit_crit_tracker, sum_ps_attacks, sigil_of_strife_active, sigil_of_strife_timer, bonus_loop_ap, \
                                    sum_oh_ps_attacks, dancing_rune_weapon_damage, damage_result_number = plague_strike_cast(
                                    tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                    all_expertise_parry, total_crit, annihilation_talent_points,
                                    increased_phy_crit, scourgeborne_plate_two_set, vicious_strikes_points,
                                    current_armor, armor_penetration, mh_input_lowend_weapon_damage,
                                    mh_input_topend_weapon_damage, attack_damage_normalization, current_ap,
                                    total_haste_rating, current_time, last_rune_change, castable,
                                    improved_unholy_presence_points, dk_presence, input_gcd, dancing_rune_weapon_points,
                                    dancing_rune_weapon_active, var_crit_amount,
                                    tundra_stalker_points, dots, outbreak_points, rage_of_rivendale_points,
                                    glyph_plague_strike, hysteria_active, tricksoftt_active,
                                    increased_physical_damage, increased_all_damage, dancing_rune_weapon_damage_multi,
                                    dancing_rune_weapon_damage, dot_length,
                                    crypt_fever_points, threat_of_thassarian_points, oh_input_lowend_weapon_damage,
                                    oh_input_topend_weapon_damage,
                                    sum_oh_ps_attacks, oh_wep_damage_mod, rune_cd_tracker, sum_ps_attacks,
                                    current_power,
                                    max_runic, dirge_points, sigil_of_strife, bonus_loop_ap, sigil_of_strife_amount,
                                    sigil_of_strife_active, sigil_of_strife_timer,
                                    trinket_hit_crit_tracker, mh_wep_random_value, oh_wep_random_value,
                                    standard_10k_random_value, damage_result_number, standard_random_value)
                                if last_sim_run == True:
                                    rotation.extend(rotation_a)
                                    rotation_time.extend(rotation_time_a)
                                    rotation_status.extend(rotation_status_a)
                                    rotation_damage.extend(rotation_damage_a)
                                continue

                    if (dots[0] - pestilence_reset_window) > 0 and (
                            dots[0] - pestilence_reset_window) < current_time:  # Pestilence
                        if (dots[1] - pestilence_reset_window) > 0 and (
                                dots[1] - pestilence_reset_window) < current_time:
                            if pestilence_allow_reset == True:
                                if current_time - dots[0] == 0:
                                    continue
                                if current_time - dots[1] == 0:
                                    continue
                                able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                    rune_cd_tracker, current_time, dots, improved_unholy_presence_points,
                                    dk_presence,
                                    total_haste_rating, last_rune_change,
                                    n_blood=1, n_frost=0, n_unholy=0)
                                if able_to_cast == 1:
                                    rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                        current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, \
                                        gcd, rune_of_cinderglacier_damage, multiple_adds_timer, multiple_adds_timer_bp, damage_result_number = pestilence_cast(
                                        spell_hit_total, increased_spell_hit, target_level, total_crit,
                                        increased_spell_crit, total_haste_rating, current_time, last_rune_change,
                                        castable, improved_unholy_presence_points, dk_presence, input_gcd,
                                        rune_cd_tracker, dots, dot_length, crypt_fever_points, multiple_adds_timer,
                                        var_crit_amount, black_ice_points, tundra_stalker_points,
                                        rage_of_rivendale_points, hysteria_active, tricksoftt_active,
                                        increased_spell_damage,
                                        increased_all_damage, sum_pest_attacks, current_power, max_runic,
                                        blood_of_the_north_points, just_used_death_rune, death, reaping_points,
                                        rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                        rune_of_cinderglacier_damage, pestilence_allow_reset, multiple_adds_timer_bp,
                                        standard_10k_random_value, damage_result_number, pestilence_random_value,
                                        standard_random_value)
                                    if last_sim_run == True:
                                        rotation.extend(rotation_a)
                                        rotation_time.extend(rotation_time_a)
                                        rotation_status.extend(rotation_status_a)
                                        rotation_damage.extend(rotation_damage_a)
                                    continue
                    if (multiple_adds_timer < current_time or multiple_adds_timer_bp < current_time) and (
                            dots[0] - pestilence_reset_window) > 0 and (
                            dots[0] - pestilence_reset_window) < current_time and (
                            dots[1] - pestilence_reset_window) > 0 and (dots[
                                                                            1] - pestilence_reset_window) < current_time and amount_of_targets > 1:  # Spread Pest, if not on adds
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0,
                            n_unholy=0)  # , n_skip=1, n_reset_window=death_and_decay_cd, dk_spec=1)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, \
                                gcd, rune_of_cinderglacier_damage, multiple_adds_timer, multiple_adds_timer_bp, damage_result_number = pestilence_cast(
                                spell_hit_total, increased_spell_hit, target_level, total_crit, increased_spell_crit,
                                total_haste_rating, current_time, last_rune_change,
                                castable, improved_unholy_presence_points, dk_presence, input_gcd, rune_cd_tracker,
                                dots, dot_length, crypt_fever_points, multiple_adds_timer,
                                var_crit_amount, black_ice_points, tundra_stalker_points, rage_of_rivendale_points,
                                hysteria_active, tricksoftt_active, increased_spell_damage,
                                increased_all_damage, sum_pest_attacks, current_power, max_runic,
                                blood_of_the_north_points, just_used_death_rune, death, reaping_points,
                                rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                rune_of_cinderglacier_damage, pestilence_allow_reset, multiple_adds_timer_bp,
                                standard_10k_random_value, damage_result_number, pestilence_random_value,
                                standard_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    if death_and_decay_skip == False:  # Death & Decay
                        if death_and_decay_force_cast == True or death_and_decay_cd == 0:
                            if death_and_decay_cd < current_time:
                                able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                    rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                    total_haste_rating, last_rune_change,
                                    n_blood=1, n_frost=1, n_unholy=1)
                                if able_to_cast == 1:
                                    rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, current_power, gcd, \
                                        death_and_decay_damage, death_and_decay_last_damage_time, death_n_decay_apply_time, death_and_decay_cd, damage_result_number = death_and_decay_cast(
                                        spell_hit_total, increased_spell_hit, target_level, total_crit,
                                        increased_spell_crit,
                                        current_time,
                                        dk_presence, input_gcd, dots, haste_percentage, current_ap, impurity_points,
                                        gcd, used_gcd,
                                        death_and_decay_cd, death_and_decay_cd_length,
                                        var_crit_amount, black_ice_points, rage_of_rivendale_points, hysteria_active,
                                        tricksoftt_active,
                                        increased_spell_damage, max_runic, death_n_decay_apply_time,
                                        increased_all_damage, current_power, glyph_death_and_decay,
                                        scourgelords_plate_two_set,
                                        death_and_decay_damage, death_and_decay_last_damage_time,
                                        standard_10k_random_value, damage_result_number,
                                        initial_hit=True)
                                    if last_sim_run == True:
                                        rotation.extend(rotation_a)
                                        rotation_time.extend(rotation_time_a)
                                        rotation_status.extend(rotation_status_a)
                                        rotation_damage.extend(rotation_damage_a)
                                    for dnd_multi in range(1, amount_of_targets):
                                        rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, current_power, gcd, \
                                            death_and_decay_damage, death_and_decay_last_damage_time, death_n_decay_apply_time, death_and_decay_cd, damage_result_number = death_and_decay_cast(
                                            spell_hit_total, increased_spell_hit, target_level, total_crit,
                                            increased_spell_crit,
                                            current_time,
                                            dk_presence, input_gcd, dots, haste_percentage, current_ap, impurity_points,
                                            gcd, used_gcd,
                                            death_and_decay_cd, death_and_decay_cd_length,
                                            var_crit_amount, black_ice_points, rage_of_rivendale_points,
                                            hysteria_active, tricksoftt_active,
                                            increased_spell_damage, max_runic, death_n_decay_apply_time,
                                            increased_all_damage, current_power, glyph_death_and_decay,
                                            scourgelords_plate_two_set,
                                            death_and_decay_damage, death_and_decay_last_damage_time,
                                            standard_10k_random_value, damage_result_number,
                                            initial_hit=False)
                                        if last_sim_run == True:
                                            rotation.extend(rotation_a)
                                            rotation_time.extend(rotation_time_a)
                                            rotation_status.extend(rotation_status_a)
                                            rotation_damage.extend(rotation_damage_a)
                                    continue

                    if dancing_rune_weapon_points == 1:
                        if dancing_rune_weapon_active == False:
                            if dancing_rune_weapon_cd < current_time:
                                dancing_rune_weapon_active = True
                                dancing_rune_weapon_length = current_time + 12
                                if glyph_dancing_rune_weapon == True:
                                    dancing_rune_weapon_length += 5
                                dancing_rune_weapon_cd = current_time + 90

                    if use_blood_strike_over_blood_boil == False:  # Use Blood Boil
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0,
                            n_unholy=0)  # , n_skip=1, n_reset_window=death_and_decay_cd, dk_spec=1)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                                current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_it_attacks, km_procd, \
                                deathchill_active, gcd, rune_of_cinderglacier_damage, blood_boil_damage, damage_result_number = blood_boil_cast(
                                spell_hit_total, increased_spell_hit, target_level, km_procd, deathchill_active,
                                total_crit, increased_spell_crit, total_haste_rating,
                                current_time, last_rune_change, castable, improved_unholy_presence_points,
                                rune_grade_timer, dk_presence, input_gcd, rune_cd_tracker,
                                current_ap, impurity_points, var_crit_amount, black_ice_points,
                                might_of_mograine_points, blood_strikes_points, blood_boil_damage,
                                dots, tundra_stalker_points, rage_of_rivendale_points, hysteria_active,
                                tricksoftt_active,
                                increased_spell_damage, increased_all_damage, sum_it_attacks, current_power,
                                rune_of_cinderglacier_active,
                                rune_of_cinderglacier_active_count, rune_of_cinderglacier_damage, amount_of_targets,
                                damage_result_number, blood_boil_random_value, standard_10k_random_value)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    if use_blood_strike_over_blood_boil == True and heart_strike_points == 0:  # Use Blood Strike
                        # Blood Strike
                        able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                            rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                            total_haste_rating, last_rune_change,
                            n_blood=1, n_frost=0, n_unholy=0,
                            n_skip=1)  # , n_reset_window=death_and_decay_cd, dk_spec=1)
                        if able_to_cast == 1:
                            rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, current_power, \
                                dots, gcd, trinket_hit_crit_tracker, dancing_rune_weapon_damage, sigil_of_haunted_dreams_buff, sigil_of_haunted_dreams_timer, \
                                total_crit, t9_bonus, t9_cd_timer, t9_active_timer, bonus_loop_str, increased_all_damage, desolation_buff_timer, sudden_doom_damage, \
                                unholy_blight_amount, unholy_blight_timer, rune_of_cinderglacier_damage, rune_of_cinderglacier_active_count, \
                                rune_of_cinderglacier_active, sum_bs_attacks, damage_result_number = blood_strike_cast(
                                tanking, H2, hit_from_gear, hit_from_other, target_level, all_expertise_dodge,
                                all_expertise_parry, total_crit, annihilation_talent_points,
                                increased_phy_crit, subversion_points, current_armor, armor_penetration,
                                current_ap, attack_damage_normalization, total_haste_rating, current_time,
                                last_rune_change, castable, dk_presence, improved_unholy_presence_points,
                                dots, input_gcd, dancing_rune_weapon_points, dancing_rune_weapon_active,
                                darkruned_battlegear_four_set, var_crit_amount,
                                guile_of_gorefiend_points, tundra_stalker_points, blood_of_the_north_points,
                                t9_tank_two_set, rage_of_rivendale_points,
                                blood_strikes_points, might_of_mograine_points, hysteria_active, tricksoftt_active,
                                increased_physical_damage, increased_all_damage,
                                dancing_rune_weapon_damage_multi, dancing_rune_weapon_damage, just_used_death_rune,
                                rune_cd_tracker, reaping_points,
                                sigil_of_haunted_dreams, sigil_of_haunted_dreams_buff, t9_dps_two_set, t9_bonus,
                                t9_cd_timer, bonus_loop_str, desolation_points,
                                desolation_buff, desolation_buff_timer, sudden_doom_points, sigil_of_vengeful_heart,
                                spell_hit_total, increased_spell_hit,
                                darkruned_battlegear_two_set, increased_spell_crit, impurity_points,
                                sigil_of_the_wild_buck,
                                black_ice_points, glyph_death_coil, morbitity_points, increased_spell_damage,
                                sudden_doom_damage, unholy_blight_points,
                                rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                                rune_of_cinderglacier_damage, death, threat_of_thassarian_points,
                                oh_wep_damage_mod, sum_oh_bs_attacks, current_power, sum_bs_attacks, max_runic,
                                trinket_hit_crit_tracker, sigil_of_haunted_dreams_timer, t9_active_timer,
                                unholy_blight_amount, unholy_blight_timer,
                                damage_result_number, blood_strike_random_value, standard_random_value,
                                standard_10k_random_value, mh_wep_random_value, oh_wep_random_value, 
mh_input_lowend_weapon_damage, mh_input_topend_weapon_damage, oh_input_lowend_weapon_damage, oh_input_topend_weapon_damage)
                            if last_sim_run == True:
                                rotation.extend(rotation_a)
                                rotation_time.extend(rotation_time_a)
                                rotation_status.extend(rotation_status_a)
                                rotation_damage.extend(rotation_damage_a)
                            continue

                    if use_blood_strike_over_blood_boil == True and heart_strike_points == 1:  # Use Heart Strike
                        if heart_strike_points == 1:
                            able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                                rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                                total_haste_rating, last_rune_change,
                                n_blood=1, n_frost=0, n_unholy=0,
                                n_skip=1)  # , n_reset_window=death_and_decay_cd, dk_spec=1)
                            if able_to_cast == 1:
                                if amount_of_targets > 1:
                                    attack_table_results = attack_table(1, tanking, H2, True, False, hit_from_gear,
                                                                        hit_from_other, target_level,
                                                                        all_expertise_dodge, all_expertise_parry,
                                                                        total_crit, standard_10k_random_value,
                                                                        damage_result_number, (
                                                                                    annihilation_talent_points / 100) + increased_phy_crit + (
                                                                                    (subversion_points * 3) / 100))
                                    armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                                    # wep_roll = weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)
                                    wep_roll = mh_wep_random_value[damage_result_number]
                                    damage_result_number = damage_array_updater(damage_result_number)
                                    wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                                    # Rune Hit
                                    haste_percentage = (
                                                                   total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                    haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                     last_rune_change[castable + 6])
                                    if improved_unholy_presence_points != 0:
                                        if dk_presence == 2:
                                            haste_rune_cd = haste_rune_cd - (
                                                        haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                                    if dk_presence != 2:
                                        gcd = input_gcd / (1 + haste_percentage)
                                        if gcd < 1:
                                            gcd = 1
                                    ##Rune Miss
                                    haste_rune_cd_miss = 1
                                    how_many_dots_on_target = 0
                                    if dots[0] > current_time:
                                        how_many_dots_on_target += 1
                                    if dots[1] > current_time:
                                        how_many_dots_on_target += 1
                                    if dots[2] > current_time:
                                        how_many_dots_on_target += 1
                                    if multiple_adds_timer < current_time:
                                        how_many_dots_on_target = 0
                                    if dancing_rune_weapon_points == 1:
                                        if dancing_rune_weapon_active == True:
                                            if attack_table_results == 0:
                                                atta_num = 0
                                                rotation.append("Dancing Rune Weapon")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Miss")
                                                rotation_damage.append(atta_num)
                                            elif attack_table_results == 1:
                                                atta_num = 0
                                                rotation.append("Dancing Rune Weapon")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Dodge")
                                                rotation_damage.append(atta_num)
                                            elif attack_table_results == 5:
                                                atta_num = (((0 + (wep_roll * .25)) + (
                                                            (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                                         (0 + (wep_roll * .25)) * (
                                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                        ((0 + (wep_roll * .25)) + (
                                                                                    (0 + (wep_roll * .25)) * (
                                                                                        .1 * how_many_dots_on_target)) + (
                                                                                     (0 + (wep_roll * .25)) * (
                                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                               var_crit_amount)
                                                if dk_presence == 0:
                                                    atta_num = atta_num + (atta_num * .15)
                                                if t9_tank_two_set == True:
                                                    atta_num = atta_num + (atta_num * .05)
                                                if blood_strikes_points != 0:
                                                    atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                                if might_of_mograine_points != 0:
                                                    atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                                if scourgelords_battlegear_two_set == True:
                                                    atta_num = atta_num + (atta_num * .07)
                                                if hysteria_active == True:
                                                    atta_num = atta_num + (atta_num * .2)
                                                if tricksoftt_active == True:
                                                    atta_num = atta_num + (atta_num * .15)
                                                atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                            atta_num * increased_all_damage)
                                                atta_num = atta_num * dancing_rune_weapon_damage_multi
                                                dancing_rune_weapon_damage += atta_num
                                                rotation.append("Dancing Rune Weapon")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Crit")
                                                rotation_damage.append(atta_num)
                                                trinket_hit_crit_tracker = 2
                                                if sigil_of_haunted_dreams == True:
                                                    if random.randint(0, 100) < 15:
                                                        if sigil_of_haunted_dreams_buff == False:
                                                            sigil_of_haunted_dreams_buff = True
                                                            sigil_of_haunted_dreams_timer = current_time + 10
                                                            total_crit = total_crit + ((173 / 45.8) / 100)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                if t9_dps_two_set == True:
                                                    if t9_bonus == False:
                                                        if t9_cd_timer < current_time:
                                                            if (standard_10k_random_value[
                                                                    damage_result_number] / 100) < 50:
                                                                t9_bonus = True
                                                                t9_cd_timer = current_time + 45
                                                                t9_active_timer = current_time + 15
                                                                bonus_loop_str += 180
                                                                rotation.append("T9 DPS 2p Bonus")
                                                                rotation_time.append(current_time)
                                                                rotation_damage.append(0)
                                                                rotation_status.append("Proc")
                                                            damage_result_number = damage_array_updater(
                                                                damage_result_number)
                                                if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                    if (standard_10k_random_value[
                                                            damage_result_number] / 100) < sudden_doom_points * 5:
                                                        hit = spell_hit(spell_hit_total, increased_spell_hit,
                                                                        target_level, standard_10k_random_value,
                                                                        damage_result_number)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        crit = spell_crit(
                                                            (total_crit + (darkruned_battlegear_two_set / 100)),
                                                            spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number,
                                                            increased_spell_crit)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        if hit == True:
                                                            if crit == True:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                damage_result_number = damage_array_updater(
                                                                    damage_result_number)
                                                                atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                                 impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if sigil_of_the_wild_buck == True:
                                                                    atta_num += 80
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Crit")
                                                                rotation_damage.append(atta_num)
                                                            else:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                damage_result_number = damage_array_updater(
                                                                    damage_result_number)
                                                                atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                            (impurity_points * 4) / 100))) * 0))
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if sigil_of_the_wild_buck == True:
                                                                    atta_num += 80
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Hit")
                                                                rotation_damage.append(atta_num)
                                                        if hit == False:
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Miss")
                                                            rotation_damage.append(0)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                            elif attack_table_results == 7:
                                                atta_num = (((0 + (wep_roll * .25)) + (
                                                            (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                                         (0 + (wep_roll * .25)) * (
                                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                        ((0 + (wep_roll * .25)) + (
                                                                                    (0 + (wep_roll * .25)) * (
                                                                                        .1 * how_many_dots_on_target)) + (
                                                                                     (0 + (wep_roll * .25)) * (
                                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                                if dk_presence == 0:
                                                    atta_num = atta_num + (atta_num * .15)
                                                if t9_tank_two_set == True:
                                                    atta_num = atta_num + (atta_num * .05)
                                                if blood_strikes_points != 0:
                                                    atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                                if might_of_mograine_points != 0:
                                                    atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                                if scourgelords_battlegear_two_set == True:
                                                    atta_num = atta_num + (atta_num * .07)
                                                if hysteria_active == True:
                                                    atta_num = atta_num + (atta_num * .2)
                                                if tricksoftt_active == True:
                                                    atta_num = atta_num + (atta_num * .15)
                                                atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                            atta_num * increased_all_damage)
                                                atta_num = atta_num * dancing_rune_weapon_damage_multi
                                                dancing_rune_weapon_damage += atta_num
                                                rotation.append("Dancing Rune Weapon")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Hit")
                                                rotation_damage.append(atta_num)
                                                trinket_hit_crit_tracker = 1
                                                if sigil_of_haunted_dreams == True:
                                                    if random.randint(0, 100) < 15:
                                                        if sigil_of_haunted_dreams_buff == False:
                                                            sigil_of_haunted_dreams_buff = True
                                                            sigil_of_haunted_dreams_timer = current_time + 10
                                                            total_crit = total_crit + ((173 / 45.8) / 100)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                if t9_dps_two_set == True:
                                                    if t9_bonus == False:
                                                        if t9_cd_timer < current_time:
                                                            if (standard_10k_random_value[
                                                                    damage_result_number] / 100) < 50:
                                                                t9_bonus = True
                                                                t9_cd_timer = current_time + 45
                                                                t9_active_timer = current_time + 15
                                                                bonus_loop_str += 180
                                                                rotation.append("T9 DPS 2p Bonus")
                                                                rotation_time.append(current_time)
                                                                rotation_damage.append(0)
                                                                rotation_status.append("Proc")
                                                            damage_result_number = damage_array_updater(
                                                                damage_result_number)
                                                if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                    if (standard_10k_random_value[
                                                            damage_result_number] / 100) < sudden_doom_points * 5:
                                                        hit = spell_hit(spell_hit_total, increased_spell_hit,
                                                                        target_level, standard_10k_random_value,
                                                                        damage_result_number)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        crit = spell_crit(
                                                            (total_crit + (darkruned_battlegear_two_set / 100)),
                                                            spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number,
                                                            increased_spell_crit)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        if hit == True:
                                                            if crit == True:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                damage_result_number = damage_array_updater(
                                                                    damage_result_number)
                                                                atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                                 impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if sigil_of_the_wild_buck == True:
                                                                    atta_num += 80
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Crit")
                                                                rotation_damage.append(atta_num)
                                                            else:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                damage_result_number = damage_array_updater(
                                                                    damage_result_number)
                                                                atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                            (impurity_points * 4) / 100))) * 0))
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if sigil_of_the_wild_buck == True:
                                                                    atta_num += 80
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Hit")
                                                                rotation_damage.append(atta_num)
                                                        if hit == False:
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Miss")
                                                            rotation_damage.append(0)
                                    if attack_table_results == 0:
                                        atta_num = 0
                                        rotation.append("Heart Strike - Second Target")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Miss")
                                        rotation_damage.append(atta_num)
                                    elif attack_table_results == 1:
                                        atta_num = 0
                                        rotation.append("Heart Strike - Second Target")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Dodge")
                                        rotation_damage.append(atta_num)
                                    elif attack_table_results == 5:
                                        # crit attack
                                        atta_num = (((0 + (wep_roll * .25)) + (
                                                    (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                                 (0 + (wep_roll * .25)) * (
                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                ((0 + (wep_roll * .25)) + ((0 + (wep_roll * .25)) * (
                                                                            .1 * how_many_dots_on_target)) + (
                                                                             (0 + (wep_roll * .25)) * (
                                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                       var_crit_amount)
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if t9_tank_two_set == True:
                                            atta_num = atta_num + (atta_num * .05)
                                        if blood_strikes_points != 0:
                                            atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if scourgelords_battlegear_two_set == True:
                                            atta_num = atta_num + (atta_num * .07)
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                    atta_num * increased_all_damage)
                                        sum_heart_strike_attacks += atta_num
                                        trinket_hit_crit_tracker = 2
                                        if sigil_of_haunted_dreams == True:
                                            if random.randint(0, 100) < 15:
                                                if sigil_of_haunted_dreams_buff == False:
                                                    sigil_of_haunted_dreams_buff = True
                                                    sigil_of_haunted_dreams_timer = current_time + 10
                                                    total_crit = total_crit + ((173 / 45.8) / 100)
                                        if t9_dps_two_set == True:
                                            if t9_bonus == False:
                                                if t9_cd_timer < current_time:
                                                    if (random.randint(0, 10000) / 100) < 50:
                                                        t9_bonus = True
                                                        t9_cd_timer = current_time + 45
                                                        t9_active_timer = current_time + 15
                                                        bonus_loop_str += 180
                                                        rotation.append("T9 DPS 2p Bonus")
                                                        rotation_time.append(current_time)
                                                        rotation_damage.append(0)
                                                        rotation_status.append("Proc")
                                        if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                            if (standard_10k_random_value[
                                                    damage_result_number] / 100) < sudden_doom_points * 5:
                                                hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                standard_10k_random_value, damage_result_number)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                                  spell_hit_total, increased_spell_hit, target_level,
                                                                  standard_10k_random_value, damage_result_number,
                                                                  increased_spell_crit)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                if hit == True:
                                                    if crit == True:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                         impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Crit")
                                                        rotation_damage.append(atta_num)
                                                    else:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        atta_num = (atta_num + ((current_ap + (
                                                                    current_ap * ((impurity_points * 4) / 100))) * 0))
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Hit")
                                                        rotation_damage.append(atta_num)
                                                if hit == False:
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Miss")
                                                    rotation_damage.append(0)
                                        rotation.append("Heart Strike - Second Target")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Crit")
                                        rotation_damage.append(atta_num)
                                    elif attack_table_results == 7:
                                        # normal attack
                                        atta_num = (((0 + (wep_roll * .25)) + (
                                                    (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                                 (0 + (wep_roll * .25)) * (
                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                ((0 + (wep_roll * .25)) + ((0 + (wep_roll * .25)) * (
                                                                            .1 * how_many_dots_on_target)) + (
                                                                             (0 + (wep_roll * .25)) * (
                                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if t9_tank_two_set == True:
                                            atta_num = atta_num + (atta_num * .05)
                                        if blood_strikes_points != 0:
                                            atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if scourgelords_battlegear_two_set == True:
                                            atta_num = atta_num + (atta_num * .07)
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                    atta_num * increased_all_damage)
                                        sum_heart_strike_attacks += atta_num
                                        trinket_hit_crit_tracker = 1
                                        if sigil_of_haunted_dreams == True:
                                            if random.randint(0, 100) < 15:
                                                if sigil_of_haunted_dreams_buff == False:
                                                    sigil_of_haunted_dreams_buff = True
                                                    sigil_of_haunted_dreams_timer = current_time + 10
                                                    total_crit = total_crit + ((173 / 45.8) / 100)
                                        if t9_dps_two_set == True:
                                            if t9_bonus == False:
                                                if t9_cd_timer < current_time:
                                                    if (random.randint(0, 10000) / 100) < 50:
                                                        t9_bonus = True
                                                        t9_cd_timer = current_time + 45
                                                        t9_active_timer = current_time + 15
                                                        bonus_loop_str += 180
                                                        rotation.append("T9 DPS 2p Bonus")
                                                        rotation_time.append(current_time)
                                                        rotation_damage.append(0)
                                                        rotation_status.append("Proc")
                                        if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                            if (standard_10k_random_value[
                                                    damage_result_number] / 100) < sudden_doom_points * 5:
                                                hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                standard_10k_random_value, damage_result_number)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                                  spell_hit_total, increased_spell_hit, target_level,
                                                                  standard_10k_random_value, damage_result_number,
                                                                  increased_spell_crit)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                if hit == True:
                                                    if crit == True:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                         impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Crit")
                                                        rotation_damage.append(atta_num)
                                                    else:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        atta_num = (atta_num + ((current_ap + (
                                                                    current_ap * ((impurity_points * 4) / 100))) * 0))
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Hit")
                                                        rotation_damage.append(atta_num)
                                                if hit == False:
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Miss")
                                                    rotation_damage.append(0)
                                        rotation.append("Heart Strike - Second Target")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Hit")
                                        rotation_damage.append(atta_num)
                                attack_table_results = attack_table(1, tanking, H2, True, False, hit_from_gear,
                                                                    hit_from_other, target_level, all_expertise_dodge,
                                                                    all_expertise_parry, total_crit,
                                                                    standard_10k_random_value, damage_result_number, (
                                                                                annihilation_talent_points / 100) + increased_phy_crit + (
                                                                                (subversion_points * 3) / 100))
                                armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                                # wep_roll = weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)
                                wep_roll = mh_wep_random_value[damage_result_number]
                                damage_result_number = damage_array_updater(damage_result_number)
                                wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                                # Rune Hit
                                haste_percentage = (
                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                 last_rune_change[castable + 6])
                                if improved_unholy_presence_points != 0:
                                    if dk_presence == 2:
                                        haste_rune_cd = haste_rune_cd - (
                                                    haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                                if dk_presence != 2:
                                    gcd = input_gcd / (1 + haste_percentage)
                                    if gcd < 1:
                                        gcd = 1
                                ##Rune Miss
                                haste_rune_cd_miss = 1
                                how_many_dots_on_target = 0
                                if dots[0] > current_time:
                                    how_many_dots_on_target += 1
                                if dots[1] > current_time:
                                    how_many_dots_on_target += 1
                                if dots[2] > current_time:
                                    how_many_dots_on_target += 1
                                if dancing_rune_weapon_points == 1:
                                    if dancing_rune_weapon_active == True:
                                        if attack_table_results == 0:
                                            atta_num = 0
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Miss")
                                            rotation_damage.append(atta_num)
                                        elif attack_table_results == 1:
                                            atta_num = 0
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Dodge")
                                            rotation_damage.append(atta_num)
                                        elif attack_table_results == 5:
                                            atta_num = (((0 + (wep_roll * .5)) + (
                                                        (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                                     (0 + (wep_roll * .5)) * (
                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                    ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                                .1 * how_many_dots_on_target)) + (
                                                                                 (0 + (wep_roll * .5)) * (
                                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                           var_crit_amount)
                                            if dk_presence == 0:
                                                atta_num = atta_num + (atta_num * .15)
                                            if t9_tank_two_set == True:
                                                atta_num = atta_num + (atta_num * .05)
                                            if blood_strikes_points != 0:
                                                atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                            if might_of_mograine_points != 0:
                                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                            if scourgelords_battlegear_two_set == True:
                                                atta_num = atta_num + (atta_num * .07)
                                            if hysteria_active == True:
                                                atta_num = atta_num + (atta_num * .2)
                                            if tricksoftt_active == True:
                                                atta_num = atta_num + (atta_num * .15)
                                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                        atta_num * increased_all_damage)
                                            atta_num = atta_num * dancing_rune_weapon_damage_multi
                                            dancing_rune_weapon_damage += atta_num
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Crit")
                                            rotation_damage.append(atta_num)
                                            trinket_hit_crit_tracker = 2
                                            if sigil_of_haunted_dreams == True:
                                                if random.randint(0, 100) < 15:
                                                    if sigil_of_haunted_dreams_buff == False:
                                                        sigil_of_haunted_dreams_buff = True
                                                        sigil_of_haunted_dreams_timer = current_time + 10
                                                        total_crit = total_crit + ((173 / 45.8) / 100)
                                            if t9_dps_two_set == True:
                                                if t9_bonus == False:
                                                    if t9_cd_timer < current_time:
                                                        if (random.randint(0, 10000) / 100) < 50:
                                                            t9_bonus = True
                                                            t9_cd_timer = current_time + 45
                                                            t9_active_timer = current_time + 15
                                                            bonus_loop_str += 180
                                                            rotation.append("T9 DPS 2p Bonus")
                                                            rotation_time.append(current_time)
                                                            rotation_damage.append(0)
                                                            rotation_status.append("Proc")
                                            if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                if (standard_10k_random_value[
                                                        damage_result_number] / 100) < sudden_doom_points * 5:
                                                    hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                    standard_10k_random_value, damage_result_number)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    crit = spell_crit(
                                                        (total_crit + (darkruned_battlegear_two_set / 100)),
                                                        spell_hit_total, increased_spell_hit, target_level,
                                                        standard_10k_random_value, damage_result_number,
                                                        increased_spell_crit)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    if hit == True:
                                                        if crit == True:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                             impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Crit")
                                                            rotation_damage.append(atta_num)
                                                        else:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                        (impurity_points * 4) / 100))) * 0))
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Hit")
                                                            rotation_damage.append(atta_num)
                                                    if hit == False:
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Miss")
                                                        rotation_damage.append(0)
                                        elif attack_table_results == 7:
                                            atta_num = (((0 + (wep_roll * .5)) + (
                                                        (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                                     (0 + (wep_roll * .5)) * (
                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                    ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                                .1 * how_many_dots_on_target)) + (
                                                                                 (0 + (wep_roll * .5)) * (
                                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                            if dk_presence == 0:
                                                atta_num = atta_num + (atta_num * .15)
                                            if t9_tank_two_set == True:
                                                atta_num = atta_num + (atta_num * .05)
                                            if blood_strikes_points != 0:
                                                atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                            if might_of_mograine_points != 0:
                                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                            if scourgelords_battlegear_two_set == True:
                                                atta_num = atta_num + (atta_num * .07)
                                            if hysteria_active == True:
                                                atta_num = atta_num + (atta_num * .2)
                                            if tricksoftt_active == True:
                                                atta_num = atta_num + (atta_num * .15)
                                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                        atta_num * increased_all_damage)
                                            atta_num = atta_num * dancing_rune_weapon_damage_multi
                                            dancing_rune_weapon_damage += atta_num
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Hit")
                                            rotation_damage.append(atta_num)
                                            trinket_hit_crit_tracker = 1
                                            if sigil_of_haunted_dreams == True:
                                                if random.randint(0, 100) < 15:
                                                    if sigil_of_haunted_dreams_buff == False:
                                                        sigil_of_haunted_dreams_buff = True
                                                        sigil_of_haunted_dreams_timer = current_time + 10
                                                        total_crit = total_crit + ((173 / 45.8) / 100)
                                            if t9_dps_two_set == True:
                                                if t9_bonus == False:
                                                    if t9_cd_timer < current_time:
                                                        if (random.randint(0, 10000) / 100) < 50:
                                                            t9_bonus = True
                                                            t9_cd_timer = current_time + 45
                                                            t9_active_timer = current_time + 15
                                                            bonus_loop_str += 180
                                                            rotation.append("T9 DPS 2p Bonus")
                                                            rotation_time.append(current_time)
                                                            rotation_damage.append(0)
                                                            rotation_status.append("Proc")
                                            if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                if (standard_10k_random_value[
                                                        damage_result_number] / 100) < sudden_doom_points * 5:
                                                    hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                    standard_10k_random_value, damage_result_number)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    crit = spell_crit(
                                                        (total_crit + (darkruned_battlegear_two_set / 100)),
                                                        spell_hit_total, increased_spell_hit, target_level,
                                                        standard_10k_random_value, damage_result_number,
                                                        increased_spell_crit)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    if hit == True:
                                                        if crit == True:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                             impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Crit")
                                                            rotation_damage.append(atta_num)
                                                        else:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                        (impurity_points * 4) / 100))) * 0))
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Hit")
                                                            rotation_damage.append(atta_num)
                                                    if hit == False:
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Miss")
                                                        rotation_damage.append(0)
                                if attack_table_results == 0:
                                    atta_num = 0
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                                    rotation.append("Heart Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Miss")
                                    rotation_damage.append(atta_num)
                                    current_time = current_time + gcd
                                    used_gcd = True
                                    continue
                                elif attack_table_results == 1:
                                    atta_num = 0
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                                    rotation.append("Heart Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Dodge")
                                    rotation_damage.append(atta_num)
                                    current_time = current_time + gcd
                                    used_gcd = True
                                    continue
                                elif attack_table_results == 5:
                                    # crit attack
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                    atta_num = (((0 + (wep_roll * .5)) + (
                                                (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                             (0 + (wep_roll * .5)) * (
                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                            ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                        .1 * how_many_dots_on_target)) + (
                                                                         (0 + (wep_roll * .5)) * (
                                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                   var_crit_amount)
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if t9_tank_two_set == True:
                                        atta_num = atta_num + (atta_num * .05)
                                    if blood_strikes_points != 0:
                                        atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                    if might_of_mograine_points != 0:
                                        atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                    if scourgelords_battlegear_two_set == True:
                                        atta_num = atta_num + (atta_num * .07)
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    sum_heart_strike_attacks += atta_num
                                    current_power = runic_power(10, current_power, max_runic)
                                    trinket_hit_crit_tracker = 2
                                    if sigil_of_haunted_dreams == True:
                                        if random.randint(0, 100) < 15:
                                            if sigil_of_haunted_dreams_buff == False:
                                                sigil_of_haunted_dreams_buff = True
                                                sigil_of_haunted_dreams_timer = current_time + 10
                                                total_crit = total_crit + ((173 / 45.8) / 100)
                                    if t9_dps_two_set == True:
                                        if t9_bonus == False:
                                            if t9_cd_timer < current_time:
                                                if (random.randint(0, 10000) / 100) < 50:
                                                    t9_bonus = True
                                                    t9_cd_timer = current_time + 45
                                                    t9_active_timer = current_time + 15
                                                    bonus_loop_str += 180
                                                    rotation.append("T9 DPS 2p Bonus")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Proc")
                                    if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                        if (standard_10k_random_value[
                                                damage_result_number] / 100) < sudden_doom_points * 5:
                                            hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                              spell_hit_total, increased_spell_hit, target_level,
                                                              standard_10k_random_value, damage_result_number,
                                                              increased_spell_crit)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            if hit == True:
                                                if crit == True:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                (impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Crit")
                                                    rotation_damage.append(atta_num)
                                                else:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (
                                                                current_ap * ((impurity_points * 4) / 100))) * 0))
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Hit")
                                                    rotation_damage.append(atta_num)
                                            if hit == False:
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Miss")
                                                rotation_damage.append(0)
                                    rotation.append("Heart Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Crit")
                                    rotation_damage.append(atta_num)
                                    current_time += gcd
                                    used_gcd = True
                                    continue
                                elif attack_table_results == 7:
                                    # normal attack
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                    atta_num = (((0 + (wep_roll * .5)) + (
                                                (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                             (0 + (wep_roll * .5)) * (
                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                            ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                        .1 * how_many_dots_on_target)) + (
                                                                         (0 + (wep_roll * .5)) * (
                                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if t9_tank_two_set == True:
                                        atta_num = atta_num + (atta_num * .05)
                                    if blood_strikes_points != 0:
                                        atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                    if might_of_mograine_points != 0:
                                        atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                    if scourgelords_battlegear_two_set == True:
                                        atta_num = atta_num + (atta_num * .07)
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    sum_heart_strike_attacks += atta_num
                                    current_power = runic_power(10, current_power, max_runic)
                                    trinket_hit_crit_tracker = 1
                                    if sigil_of_haunted_dreams == True:
                                        if random.randint(0, 100) < 15:
                                            if sigil_of_haunted_dreams_buff == False:
                                                sigil_of_haunted_dreams_buff = True
                                                sigil_of_haunted_dreams_timer = current_time + 10
                                                total_crit = total_crit + ((173 / 45.8) / 100)
                                    if t9_dps_two_set == True:
                                        if t9_bonus == False:
                                            if t9_cd_timer < current_time:
                                                if (random.randint(0, 10000) / 100) < 50:
                                                    t9_bonus = True
                                                    t9_cd_timer = current_time + 45
                                                    t9_active_timer = current_time + 15
                                                    bonus_loop_str += 180
                                                    rotation.append("T9 DPS 2p Bonus")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Proc")
                                    if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                        if (standard_10k_random_value[
                                                damage_result_number] / 100) < sudden_doom_points * 5:
                                            hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                              spell_hit_total, increased_spell_hit, target_level,
                                                              standard_10k_random_value, damage_result_number,
                                                              increased_spell_crit)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            if hit == True:
                                                if crit == True:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                (impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Crit")
                                                    rotation_damage.append(atta_num)
                                                else:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (
                                                                current_ap * ((impurity_points * 4) / 100))) * 0))
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Hit")
                                                    rotation_damage.append(atta_num)
                                            if hit == False:
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Miss")
                                                rotation_damage.append(0)
                                    rotation.append("Heart Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Hit")
                                    rotation_damage.append(atta_num)
                                    current_time += gcd
                                    used_gcd = True
                                    continue

                    if pestilence_allow_reset == False:
                        if use_blood_strike_over_blood_boil == False:  # Use Blood boil
                            castable = all_rune_check(blood, current_time, rune_cd_tracker)  # Blood Boil
                            use_death_rune = False
                            if castable == 3:
                                castable_death = all_rune_check(death, current_time, rune_cd_tracker)
                                castable_death_f = all_rune_check(death_f, current_time, rune_cd_tracker)
                                castable_death_u = all_rune_check(death_u, current_time, rune_cd_tracker)
                                if castable_death != 3:
                                    use_death_rune = True
                                    just_used_death_rune = True
                                    castable = castable_death
                                elif castable_death_f != 3:
                                    use_death_rune = True
                                    just_used_death_rune = True
                                    castable = castable_death_f
                                elif castable_death_u != 3:
                                    use_death_rune = True
                                    just_used_death_rune = True
                                    castable = castable_death_u
                            if castable != 3:
                                if castable == 2:
                                    castable = 0
                                if use_death_rune == True:
                                    use_death_rune = False
                                    if castable_death != 3:
                                        rune_cd_tracker[castable] = 0
                                        if castable_death == 2:
                                            castable_death = 0
                                        rune_cd_tracker[castable_death + 6] = 10000
                                    elif castable_death_f != 3:
                                        castable += 2
                                        rune_cd_tracker[castable] = 0
                                        if castable_death_f == 2:
                                            castable_death_f = 0
                                        rune_cd_tracker[castable_death_f + 8] = 10000
                                    elif castable_death_u != 3:
                                        castable += 4
                                        rune_cd_tracker[castable] = 0
                                        if castable_death_u == 2:
                                            castable_death_u = 0
                                        rune_cd_tracker[castable_death_u + 10] = 10000
                                else:
                                    use_death_rune = False
                                    castable += blood
                                hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                standard_10k_random_value, damage_result_number)
                                damage_result_number = damage_array_updater(damage_result_number)
                                crit = spell_crit((total_crit), spell_hit_total, increased_spell_hit, target_level,
                                                  standard_10k_random_value, damage_result_number, increased_spell_crit)
                                damage_result_number = damage_array_updater(damage_result_number)
                                # Rune Hit
                                haste_percentage = (
                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                 last_rune_change[castable + 6])
                                if improved_unholy_presence_points != 0:
                                    if dk_presence == 2:
                                        haste_rune_cd = haste_rune_cd - (
                                                    haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                                if dk_presence != 2:
                                    gcd = input_gcd / (1 + haste_percentage)
                                    if gcd < 1:
                                        gcd = 1
                                other_blood_boil_damage = 0
                                blood_boil_multiple_repeate = 1
                                while blood_boil_multiple_repeate < amount_of_targets:
                                    hit2 = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                     standard_10k_random_value, damage_result_number)
                                    damage_result_number = damage_array_updater(damage_result_number)
                                    crit2 = spell_crit((total_crit), spell_hit_total, increased_spell_hit, target_level,
                                                       standard_10k_random_value, damage_result_number,
                                                       increased_spell_crit)
                                    damage_result_number = damage_array_updater(damage_result_number)
                                    if hit2 == True:
                                        if crit2 == True:
                                            atta_num = blood_boil_random_value[damage_result_number]
                                            atta_num = (atta_num + ((current_ap + (current_ap * (
                                                        (impurity_points * 4) / 100))) * .06)) * var_crit_amount
                                            if dots[0] > current_time:
                                                if dots[1] > current_time:
                                                    atta_num += atta_num
                                                elif dots[1] <= current_time:
                                                    atta_num += atta_num / 2
                                            if dots[0] < current_time:
                                                if dots[1] > current_time:
                                                    atta_num += atta_num / 2
                                            if dk_presence == 0:
                                                atta_num = atta_num + (atta_num * .15)
                                            if black_ice_points == 5:
                                                atta_num = atta_num + (atta_num * .1)
                                            elif black_ice_points == 4:
                                                atta_num = atta_num + (atta_num * .08)
                                            elif black_ice_points == 3:
                                                atta_num = atta_num + (atta_num * .06)
                                            elif black_ice_points == 2:
                                                atta_num = atta_num + (atta_num * .04)
                                            elif black_ice_points == 1:
                                                atta_num = atta_num + (atta_num * .02)
                                            if tundra_stalker_points != 0:
                                                if dots[0] > current_time:
                                                    atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                            if rage_of_rivendale_points != 0:
                                                if dots[1] > current_time:
                                                    atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                            if might_of_mograine_points != 0:
                                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                            if blood_strikes_points != 0:
                                                atta_num = atta_num + ((blood_strikes_points * 10) / 100)
                                            if hysteria_active == True:
                                                atta_num = atta_num + (atta_num * .2)
                                            if tricksoftt_active == True:
                                                atta_num = atta_num + (atta_num * .15)
                                            atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                        atta_num * increased_all_damage)
                                            other_blood_boil_damage += atta_num
                                            if rune_of_cinderglacier_active == True:
                                                rune_of_cinderglacier_damage = atta_num * .2
                                                rune_of_cinderglacier_active_count += 1
                                                rotation.append("Rune of Cinderglacier")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Active")
                                                rotation_damage.append(atta_num * .2)
                                                if rune_of_cinderglacier_active_count == 2:
                                                    rune_of_cinderglacier_active = False
                                        else:
                                            atta_num = blood_boil_random_value[damage_result_number]
                                            atta_num = (atta_num + ((current_ap + (
                                                        current_ap * ((impurity_points * 4) / 100))) * .06))
                                            if dots[0] > current_time:
                                                if dots[1] > current_time:
                                                    atta_num += atta_num
                                                elif dots[1] <= current_time:
                                                    atta_num += atta_num / 2
                                            if dots[0] < current_time:
                                                if dots[1] > current_time:
                                                    atta_num += atta_num / 2
                                            if dk_presence == 0:
                                                atta_num = atta_num + (atta_num * .15)
                                            if black_ice_points == 5:
                                                atta_num = atta_num + (atta_num * .1)
                                            elif black_ice_points == 4:
                                                atta_num = atta_num + (atta_num * .08)
                                            elif black_ice_points == 3:
                                                atta_num = atta_num + (atta_num * .06)
                                            elif black_ice_points == 2:
                                                atta_num = atta_num + (atta_num * .04)
                                            elif black_ice_points == 1:
                                                atta_num = atta_num + (atta_num * .02)
                                            if tundra_stalker_points != 0:
                                                if dots[0] > current_time:
                                                    atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                            if rage_of_rivendale_points != 0:
                                                if dots[1] > current_time:
                                                    atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                            if might_of_mograine_points != 0:
                                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                            if blood_strikes_points != 0:
                                                atta_num = atta_num + ((blood_strikes_points * 10) / 100)
                                            if hysteria_active == True:
                                                atta_num = atta_num + (atta_num * .2)
                                            if tricksoftt_active == True:
                                                atta_num = atta_num + (atta_num * .15)
                                            atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                        atta_num * increased_all_damage)
                                            other_blood_boil_damage += atta_num
                                            if rune_of_cinderglacier_active == True:
                                                rune_of_cinderglacier_damage = atta_num * .2
                                                rune_of_cinderglacier_active_count += 1
                                                rotation.append("Rune of Cinderglacier")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Active")
                                                rotation_damage.append(atta_num * .2)
                                                if rune_of_cinderglacier_active_count == 2:
                                                    rune_of_cinderglacier_active = False
                                    if hit2 == False:
                                        ##Rune Miss
                                        other_blood_boil_damage += 0
                                    blood_boil_multiple_repeate += 1
                                rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                if hit == True:
                                    if crit == True:
                                        atta_num = blood_boil_random_value[damage_result_number]
                                        atta_num = (atta_num + ((current_ap + (current_ap * (
                                                    (impurity_points * 4) / 100))) * .06)) * var_crit_amount
                                        if dots[0] > current_time:
                                            if dots[1] > current_time:
                                                atta_num += atta_num
                                            elif dots[1] <= current_time:
                                                atta_num += atta_num / 2
                                        if dots[0] < current_time:
                                            if dots[1] > current_time:
                                                atta_num += atta_num / 2
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if black_ice_points == 5:
                                            atta_num = atta_num + (atta_num * .1)
                                        elif black_ice_points == 4:
                                            atta_num = atta_num + (atta_num * .08)
                                        elif black_ice_points == 3:
                                            atta_num = atta_num + (atta_num * .06)
                                        elif black_ice_points == 2:
                                            atta_num = atta_num + (atta_num * .04)
                                        elif black_ice_points == 1:
                                            atta_num = atta_num + (atta_num * .02)
                                        if tundra_stalker_points != 0:
                                            if dots[0] > current_time:
                                                atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                        if rage_of_rivendale_points != 0:
                                            if dots[1] > current_time:
                                                atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if blood_strikes_points != 0:
                                            atta_num = atta_num + ((blood_strikes_points * 10) / 100)
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                    atta_num * increased_all_damage)
                                        blood_boil_damage += atta_num + other_blood_boil_damage
                                        if rune_of_cinderglacier_active == True:
                                            rune_of_cinderglacier_damage = atta_num * .2
                                            rune_of_cinderglacier_active_count += 1
                                            rotation.append("Rune of Cinderglacier")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Active")
                                            rotation_damage.append(atta_num * .2)
                                            if rune_of_cinderglacier_active_count == 2:
                                                rune_of_cinderglacier_active = False
                                        rotation.append("Blood Boil")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Crit")
                                        rotation_damage.append(atta_num)
                                        current_time += gcd
                                        used_gcd = True
                                        continue
                                    else:
                                        atta_num = blood_boil_random_value[damage_result_number]
                                        atta_num = (atta_num + (
                                                    (current_ap + (current_ap * ((impurity_points * 4) / 100))) * .06))
                                        if dots[0] > current_time:
                                            if dots[1] > current_time:
                                                atta_num += atta_num
                                            elif dots[1] <= current_time:
                                                atta_num += atta_num / 2
                                        if dots[0] < current_time:
                                            if dots[1] > current_time:
                                                atta_num += atta_num / 2
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if black_ice_points == 5:
                                            atta_num = atta_num + (atta_num * .1)
                                        elif black_ice_points == 4:
                                            atta_num = atta_num + (atta_num * .08)
                                        elif black_ice_points == 3:
                                            atta_num = atta_num + (atta_num * .06)
                                        elif black_ice_points == 2:
                                            atta_num = atta_num + (atta_num * .04)
                                        elif black_ice_points == 1:
                                            atta_num = atta_num + (atta_num * .02)
                                        if tundra_stalker_points != 0:
                                            if dots[0] > current_time:
                                                atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                        if rage_of_rivendale_points != 0:
                                            if dots[1] > current_time:
                                                atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if blood_strikes_points != 0:
                                            atta_num = atta_num + ((blood_strikes_points * 10) / 100)
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                    atta_num * increased_all_damage)
                                        blood_boil_damage += atta_num + other_blood_boil_damage
                                        if rune_of_cinderglacier_active == True:
                                            rune_of_cinderglacier_damage = atta_num * .2
                                            rune_of_cinderglacier_active_count += 1
                                            rotation.append("Rune of Cinderglacier")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Active")
                                            rotation_damage.append(atta_num * .2)
                                            if rune_of_cinderglacier_active_count == 2:
                                                rune_of_cinderglacier_active = False
                                        rotation.append("Blood Boil")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Hit")
                                        rotation_damage.append(atta_num)
                                        current_time += gcd
                                        used_gcd = True
                                        continue
                                if hit == False:
                                    ##Rune Miss
                                    blood_boil_damage += other_blood_boil_damage
                                    rotation.append("Blood Boil")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Miss")
                                    rotation_damage.append(0 + other_blood_boil_damage)
                                    current_time = current_time + gcd
                                    used_gcd = True
                                    continue

                    if pestilence_allow_reset == False:
                        if use_blood_strike_over_blood_boil == True and heart_strike_points == 0:  # Use Blood Strike
                            castable = all_rune_check(blood, current_time, rune_cd_tracker)  # Blood Strike
                            use_death_rune = False
                            if castable == 3:  # Blood Strike
                                until_dot0 = dots[0]
                                until_dot1 = dots[1]
                                if pestilence_allow_reset == True:
                                    until_dot0 -= pestilence_reset_window
                                    until_dot1 -= pestilence_reset_window
                                castable_death = all_rune_check(death, current_time, rune_cd_tracker)
                                castable_death_f = all_rune_check(death_f, current_time, rune_cd_tracker)
                                castable_death_u = all_rune_check(death_u, current_time, rune_cd_tracker)
                                if castable_death != 3:
                                    if until_dot0 <= current_time + haste_rune_cd:
                                        if until_dot1 <= current_time + haste_rune_cd:
                                            use_death_rune = True
                                            just_used_death_rune = True
                                            castable = castable_death
                                elif castable_death_f != 3:
                                    if until_dot0 <= current_time + haste_rune_cd:
                                        if until_dot1 <= current_time + haste_rune_cd:
                                            use_death_rune = True
                                            just_used_death_rune = True
                                            castable = castable_death_f
                                elif castable_death_u != 3:
                                    if until_dot0 <= current_time + haste_rune_cd:
                                        if until_dot1 <= current_time + haste_rune_cd:
                                            use_death_rune = True
                                            just_used_death_rune = True
                                            castable = castable_death_u
                            if castable != 3:
                                if castable == 2:
                                    castable = 0
                                if use_death_rune == True:
                                    use_death_rune = False
                                    if castable_death != 3:
                                        rune_cd_tracker[castable] = 0
                                        if castable_death == 2:
                                            castable_death = 0
                                        rune_cd_tracker[castable_death + 6] = 10000
                                    elif castable_death_f != 3:
                                        castable += 2
                                        rune_cd_tracker[castable] = 0
                                        if castable_death_f == 2:
                                            castable_death_f = 0
                                        rune_cd_tracker[castable_death_f + 8] = 10000
                                    elif castable_death_u != 3:
                                        castable += 4
                                        rune_cd_tracker[castable] = 0
                                        if castable_death_u == 2:
                                            castable_death_u = 0
                                        rune_cd_tracker[castable_death_u + 10] = 10000
                                else:
                                    use_death_rune = False
                                attack_table_results = attack_table(1, tanking, H2, True, False, hit_from_gear,
                                                                    hit_from_other, target_level, all_expertise_dodge,
                                                                    all_expertise_parry, total_crit,
                                                                    standard_10k_random_value, damage_result_number, (
                                                                                annihilation_talent_points / 100) + increased_phy_crit + (
                                                                                (subversion_points * 3) / 100))
                                armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                                # wep_roll = weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)
                                wep_roll = mh_wep_random_value[damage_result_number]
                                damage_result_number = damage_array_updater(damage_result_number)
                                wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                                # Rune Hit
                                haste_percentage = (
                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                 last_rune_change[castable + 6])
                                if improved_unholy_presence_points != 0:
                                    if dk_presence == 2:
                                        haste_rune_cd = haste_rune_cd - (
                                                    haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                                if dk_presence != 2:
                                    gcd = input_gcd / (1 + haste_percentage)
                                    if gcd < 1:
                                        gcd = 1
                                ##Rune Miss
                                haste_rune_cd_miss = 1
                                how_many_dots_on_target = 0
                                if dots[0] > current_time:
                                    how_many_dots_on_target += 1
                                if dots[1] > current_time:
                                    how_many_dots_on_target += 1
                                if dots[2] > current_time:
                                    how_many_dots_on_target += 1
                                if dancing_rune_weapon_points == 1:
                                    if dancing_rune_weapon_active == True:
                                        if attack_table_results == 0:
                                            atta_num = 0
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Miss")
                                            rotation_damage.append(atta_num)
                                        elif attack_table_results == 1:
                                            atta_num = 0
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Dodge")
                                            rotation_damage.append(atta_num)
                                        elif attack_table_results == 5:
                                            atta_num = (((746 + (wep_roll * .4)) + (
                                                        (746 + (wep_roll * .4)) * (.125 * how_many_dots_on_target)) + (
                                                                     (746 + (wep_roll * .4)) * (
                                                                         .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                    ((746 + (wep_roll * .4)) + (
                                                                                (746 + (wep_roll * .4)) * (
                                                                                    .125 * how_many_dots_on_target)) + (
                                                                                 (746 + (wep_roll * .4)) * (
                                                                                     .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                                   var_crit_amount + (guile_of_gorefiend_points * .15))
                                            if dk_presence == 0:
                                                atta_num = atta_num + (atta_num * .15)
                                            if tundra_stalker_points != 0:
                                                if dots[0] > current_time:
                                                    atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                            if blood_of_the_north_points != 0:
                                                if blood_of_the_north_points < 3:
                                                    atta_num = atta_num + (atta_num * (blood_of_the_north_points * .03))
                                                elif blood_of_the_north_points == 3:
                                                    atta_num = atta_num + (atta_num * .1)
                                            if t9_tank_two_set == True:
                                                atta_num = atta_num + (atta_num * .05)
                                            if rage_of_rivendale_points != 0:
                                                if dots[1] > current_time:
                                                    atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                            if blood_strikes_points != 0:
                                                atta_num = atta_num + ((blood_strikes_points * 5) / 100)
                                            if might_of_mograine_points != 0:
                                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                            if hysteria_active == True:
                                                atta_num = atta_num + (atta_num * .2)
                                            if tricksoftt_active == True:
                                                atta_num = atta_num + (atta_num * .15)
                                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                        atta_num * increased_all_damage)
                                            atta_num = atta_num * dancing_rune_weapon_damage_multi
                                            dancing_rune_weapon_damage += atta_num
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Crit")
                                            rotation_damage.append(atta_num)
                                            trinket_hit_crit_tracker = 2
                                            if blood_of_the_north_points != 0:
                                                if just_used_death_rune != True:
                                                    proc_num = random.randint(0, 100)
                                                    if blood_of_the_north_points < 3:
                                                        death_proc_chance = (blood_of_the_north_points * .3) * 100
                                                    elif blood_of_the_north_points == 3:
                                                        death_proc_chance = 100
                                                    if death_proc_chance >= proc_num:
                                                        death_castable = castable + death
                                                        rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd,
                                                                                                  current_time)
                                                        rune_cd_tracker[castable] = 10000
                                            if reaping_points != 0:
                                                if just_used_death_rune != True:
                                                    proc_num = random.randint(0, 100)
                                                    if reaping_points < 3:
                                                        death_proc_chance = (reaping_points * .3) * 100
                                                    elif reaping_points == 3:
                                                        death_proc_chance = 100
                                                    if death_proc_chance >= proc_num:
                                                        death_castable = castable + death
                                                        rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd,
                                                                                                  current_time)
                                                        rune_cd_tracker[castable] = 10000
                                            if sigil_of_haunted_dreams == True:
                                                if random.randint(0, 100) < 15:
                                                    if sigil_of_haunted_dreams_buff == False:
                                                        sigil_of_haunted_dreams_buff = True
                                                        sigil_of_haunted_dreams_timer = current_time + 10
                                                        total_crit = total_crit + ((173 / 45.8) / 100)
                                            if t9_dps_two_set == True:
                                                if t9_bonus == False:
                                                    if t9_cd_timer < current_time:
                                                        if (random.randint(0, 10000) / 100) < 50:
                                                            t9_bonus = True
                                                            t9_cd_timer = current_time + 45
                                                            t9_active_timer = current_time + 15
                                                            bonus_loop_str += 180
                                                            rotation.append("T9 DPS 2p Bonus")
                                                            rotation_time.append(current_time)
                                                            rotation_damage.append(0)
                                                            rotation_status.append("Proc")
                                            if desolation_points != 0:
                                                if desolation_buff == False:
                                                    increased_all_damage += (desolation_points / 100)
                                                    desolation_buff_timer = current_time + 20
                                                    rotation.append("Desolation")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Applied")
                                                    desolation_buff = True
                                                else:
                                                    desolation_buff_timer = current_time + 20
                                                    rotation.append("Desolation")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Refresh")
                                            if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                if (standard_10k_random_value[
                                                        damage_result_number] / 100) < sudden_doom_points * 5:
                                                    hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                    standard_10k_random_value, damage_result_number)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    crit = spell_crit(
                                                        (total_crit + (darkruned_battlegear_two_set / 100)),
                                                        spell_hit_total, increased_spell_hit, target_level,
                                                        standard_10k_random_value, damage_result_number,
                                                        increased_spell_crit)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    if hit == True:
                                                        if crit == True:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                             impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Crit")
                                                            rotation_damage.append(atta_num)
                                                        else:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                        (impurity_points * 4) / 100))) * 0))
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Hit")
                                                            rotation_damage.append(atta_num)
                                                    if hit == False:
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Miss")
                                                        rotation_damage.append(0)
                                        elif attack_table_results == 7:
                                            atta_num = ((746 + (wep_roll * .4)) + (
                                                        (746 + (wep_roll * .4)) * (.125 * how_many_dots_on_target)) + (
                                                                    (746 + (wep_roll * .4)) * (
                                                                        .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                   ((746 + (wep_roll * .4)) + (
                                                                               (746 + (wep_roll * .4)) * (
                                                                                   .125 * how_many_dots_on_target)) + (
                                                                                (746 + (wep_roll * .4)) * (
                                                                                    .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)
                                            if dk_presence == 0:
                                                atta_num = atta_num + (atta_num * .15)
                                            if tundra_stalker_points != 0:
                                                if dots[0] > current_time:
                                                    atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                            if blood_of_the_north_points != 0:
                                                if blood_of_the_north_points < 3:
                                                    atta_num = atta_num + (atta_num * (blood_of_the_north_points * .03))
                                                elif blood_of_the_north_points == 3:
                                                    atta_num = atta_num + (atta_num * .1)
                                            if t9_tank_two_set == True:
                                                atta_num = atta_num + (atta_num * .05)
                                            if rage_of_rivendale_points != 0:
                                                if dots[1] > current_time:
                                                    atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                            if blood_strikes_points != 0:
                                                atta_num = atta_num + ((blood_strikes_points * 5) / 100)
                                            if hysteria_active == True:
                                                atta_num = atta_num + (atta_num * .2)
                                            if tricksoftt_active == True:
                                                atta_num = atta_num + (atta_num * .15)
                                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                        atta_num * increased_all_damage)
                                            atta_num = atta_num * dancing_rune_weapon_damage_multi
                                            dancing_rune_weapon_damage += atta_num
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Hit")
                                            rotation_damage.append(atta_num)
                                            trinket_hit_crit_tracker = 1
                                            if blood_of_the_north_points != 0:
                                                if just_used_death_rune != True:
                                                    proc_num = random.randint(0, 100)
                                                    if blood_of_the_north_points < 3:
                                                        death_proc_chance = (blood_of_the_north_points * .3) * 100
                                                    elif blood_of_the_north_points == 3:
                                                        death_proc_chance = 100
                                                    if death_proc_chance >= proc_num:
                                                        death_castable = castable + death
                                                        rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd,
                                                                                                  current_time)
                                                        rune_cd_tracker[castable] = 10000
                                            if reaping_points != 0:
                                                if just_used_death_rune != True:
                                                    proc_num = random.randint(0, 100)
                                                    if reaping_points < 3:
                                                        death_proc_chance = (reaping_points * .3) * 100
                                                    elif reaping_points == 3:
                                                        death_proc_chance = 100
                                                    if death_proc_chance >= proc_num:
                                                        death_castable = castable + death
                                                        rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd,
                                                                                                  current_time)
                                                        rune_cd_tracker[castable] = 10000
                                            if sigil_of_haunted_dreams == True:
                                                if random.randint(0, 100) < 15:
                                                    if sigil_of_haunted_dreams_buff == False:
                                                        sigil_of_haunted_dreams_buff = True
                                                        sigil_of_haunted_dreams_timer = current_time + 10
                                                        total_crit = total_crit + ((173 / 45.8) / 100)
                                            if t9_dps_two_set == True:
                                                if t9_bonus == False:
                                                    if t9_cd_timer < current_time:
                                                        if (random.randint(0, 10000) / 100) < 50:
                                                            t9_bonus = True
                                                            t9_cd_timer = current_time + 45
                                                            t9_active_timer = current_time + 15
                                                            bonus_loop_str += 180
                                                            rotation.append("T9 DPS 2p Bonus")
                                                            rotation_time.append(current_time)
                                                            rotation_damage.append(0)
                                                            rotation_status.append("Proc")
                                            if desolation_points != 0:
                                                if desolation_buff == False:
                                                    increased_all_damage += (desolation_points / 100)
                                                    desolation_buff_timer = current_time + 20
                                                    rotation.append("Desolation")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Applied")
                                                    desolation_buff = True
                                                else:
                                                    desolation_buff_timer = current_time + 20
                                                    rotation.append("Desolation")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Refresh")
                                            if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                if (standard_10k_random_value[
                                                        damage_result_number] / 100) < sudden_doom_points * 5:
                                                    hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                    standard_10k_random_value, damage_result_number)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    crit = spell_crit(
                                                        (total_crit + (darkruned_battlegear_two_set / 100)),
                                                        spell_hit_total, increased_spell_hit, target_level,
                                                        standard_10k_random_value, damage_result_number,
                                                        increased_spell_crit)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    if hit == True:
                                                        if crit == True:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                             impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Crit")
                                                            rotation_damage.append(atta_num)
                                                        else:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                        (impurity_points * 4) / 100))) * 0))
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Hit")
                                                            rotation_damage.append(atta_num)
                                                    if hit == False:
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Miss")
                                                        rotation_damage.append(0)
                                if threat_of_thassarian_points != 0:  # Off Hand Blood Strike
                                    if H2 == False:
                                        threat_of_thass_roll = (threat_of_thassarian_points * 30)
                                        if threat_of_thassarian_points == 3:
                                            threat_of_thass_roll += 10
                                        threat_of_t_num = random.randint(0, 100)
                                        if threat_of_thass_roll >= threat_of_t_num:
                                            # oh_wep_roll = weapon_roll(oh_input_lowend_weapon_damage,oh_input_topend_weapon_damage)
                                            oh_wep_roll = oh_wep_random_value[damage_result_number]
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            oh_wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                                            oh_attack_table_results = attack_table(1, tanking, H2, False, True,
                                                                                   hit_from_gear, hit_from_other,
                                                                                   target_level, all_expertise_dodge,
                                                                                   all_expertise_parry, total_crit,
                                                                                   standard_10k_random_value,
                                                                                   damage_result_number, (
                                                                                               annihilation_talent_points / 100) + increased_phy_crit + (
                                                                                               (
                                                                                                           subversion_points * 3) / 100))
                                            if oh_attack_table_results == 0:
                                                atta_num = 0
                                                rotation.append("OH - Blood Strike")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Miss")
                                                rotation_damage.append(atta_num)
                                            elif oh_attack_table_results == 1:
                                                atta_num = 0
                                                rotation.append("OH - Blood Strike")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Dodge")
                                                rotation_damage.append(atta_num)
                                            elif oh_attack_table_results == 5:
                                                # crit attack
                                                atta_num = (((746 + (oh_wep_roll * .4)) + (
                                                            (746 + (oh_wep_roll * .4)) * (
                                                                .125 * how_many_dots_on_target)) + (
                                                                         (746 + (oh_wep_roll * .4)) * (
                                                                             .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                        ((746 + (oh_wep_roll * .4)) + (
                                                                                    (746 + (oh_wep_roll * .4)) * (
                                                                                        .125 * how_many_dots_on_target)) + (
                                                                                     (746 + (oh_wep_roll * .4)) * (
                                                                                         .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                                       var_crit_amount + (
                                                                           guile_of_gorefiend_points * .15))
                                                if dk_presence == 0:
                                                    atta_num = atta_num + (atta_num * .15)
                                                if tundra_stalker_points != 0:
                                                    if dots[0] > current_time:
                                                        atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                                if blood_of_the_north_points != 0:
                                                    if blood_of_the_north_points < 3:
                                                        atta_num = atta_num + (
                                                                    atta_num * (blood_of_the_north_points * .03))
                                                    elif blood_of_the_north_points == 3:
                                                        atta_num = atta_num + (atta_num * .1)
                                                if t9_tank_two_set == True:
                                                    atta_num = atta_num + (atta_num * .05)
                                                if rage_of_rivendale_points != 0:
                                                    if dots[1] > current_time:
                                                        atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                                if blood_strikes_points != 0:
                                                    atta_num = atta_num + ((blood_strikes_points * 5) / 100)
                                                if might_of_mograine_points != 0:
                                                    atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                                atta_num = atta_num * oh_wep_damage_mod
                                                if hysteria_active == True:
                                                    atta_num = atta_num + (atta_num * .2)
                                                if tricksoftt_active == True:
                                                    atta_num = atta_num + (atta_num * .15)
                                                atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                            atta_num * increased_all_damage)
                                                sum_oh_bs_attacks += atta_num
                                                trinket_hit_crit_tracker = 2
                                                if blood_of_the_north_points != 0:
                                                    if just_used_death_rune != True:
                                                        proc_num = random.randint(0, 100)
                                                        if blood_of_the_north_points < 3:
                                                            death_proc_chance = (blood_of_the_north_points * .3) * 100
                                                        elif blood_of_the_north_points == 3:
                                                            death_proc_chance = 100
                                                        if death_proc_chance >= proc_num:
                                                            death_castable = castable + death
                                                            rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd,
                                                                                                      current_time)
                                                            rune_cd_tracker[castable] = 10000
                                                if reaping_points != 0:
                                                    if just_used_death_rune != True:
                                                        proc_num = random.randint(0, 100)
                                                        if reaping_points < 3:
                                                            death_proc_chance = (reaping_points * .3) * 100
                                                        elif reaping_points == 3:
                                                            death_proc_chance = 100
                                                        if death_proc_chance >= proc_num:
                                                            death_castable = castable + death
                                                            rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd,
                                                                                                      current_time)
                                                            rune_cd_tracker[castable] = 10000
                                                if sigil_of_haunted_dreams == True:
                                                    if random.randint(0, 100) < 15:
                                                        if sigil_of_haunted_dreams_buff == False:
                                                            sigil_of_haunted_dreams_buff = True
                                                            sigil_of_haunted_dreams_timer = current_time + 10
                                                            total_crit = total_crit + ((173 / 45.8) / 100)
                                                if t9_dps_two_set == True:
                                                    if t9_bonus == False:
                                                        if t9_cd_timer < current_time:
                                                            if (standard_10k_random_value[
                                                                    damage_result_number] / 100) < 50:
                                                                t9_bonus = True
                                                                t9_cd_timer = current_time + 45
                                                                t9_active_timer = current_time + 15
                                                                bonus_loop_str += 180
                                                                rotation.append("T9 DPS 2p Bonus")
                                                                rotation_time.append(current_time)
                                                                rotation_damage.append(0)
                                                                rotation_status.append("Proc")
                                                if desolation_points != 0:
                                                    if desolation_buff == False:
                                                        increased_all_damage += (desolation_points / 100)
                                                        desolation_buff_timer = current_time + 20
                                                        rotation.append("Desolation")
                                                        rotation_time.append(current_time)
                                                        rotation_damage.append(0)
                                                        rotation_status.append("Applied")
                                                        desolation_buff = True
                                                    else:
                                                        desolation_buff_timer = current_time + 20
                                                        rotation.append("Desolation")
                                                        rotation_time.append(current_time)
                                                        rotation_damage.append(0)
                                                        rotation_status.append("Refresh")
                                                if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                    if (standard_10k_random_value[
                                                            damage_result_number] / 100) < sudden_doom_points * 5:
                                                        hit = spell_hit(spell_hit_total, increased_spell_hit,
                                                                        target_level, standard_10k_random_value,
                                                                        damage_result_number)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        crit = spell_crit(
                                                            (total_crit + (darkruned_battlegear_two_set / 100)),
                                                            spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number,
                                                            increased_spell_crit)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        if hit == True:
                                                            if crit == True:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                                 impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Crit")
                                                                rotation_damage.append(atta_num)
                                                            else:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                            (impurity_points * 4) / 100))) * 0))
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Hit")
                                                                rotation_damage.append(atta_num)
                                                        if hit == False:
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Miss")
                                                            rotation_damage.append(0)
                                                rotation.append("OH - Blood Strike")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Crit")
                                                rotation_damage.append(atta_num)
                                            elif oh_attack_table_results == 7:
                                                # normal attack
                                                atta_num = ((746 + (oh_wep_roll * .4)) + ((746 + (oh_wep_roll * .4)) * (
                                                            .125 * how_many_dots_on_target)) + + (
                                                            (746 + (oh_wep_roll * .4)) * (
                                                                .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                       ((746 + (oh_wep_roll * .4)) + (
                                                                                   (746 + (oh_wep_roll * .4)) * (
                                                                                       .125 * how_many_dots_on_target)) + + (
                                                                                   (746 + (oh_wep_roll * .4)) * (
                                                                                       .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)
                                                if dk_presence == 0:
                                                    atta_num = atta_num + (atta_num * .15)
                                                if tundra_stalker_points != 0:
                                                    if dots[0] > current_time:
                                                        atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                                if blood_of_the_north_points != 0:
                                                    if blood_of_the_north_points < 3:
                                                        atta_num = atta_num + (
                                                                    atta_num * (blood_of_the_north_points * .03))
                                                    elif blood_of_the_north_points == 3:
                                                        atta_num = atta_num + (atta_num * .1)
                                                if t9_tank_two_set == True:
                                                    atta_num = atta_num + (atta_num * .05)
                                                if rage_of_rivendale_points != 0:
                                                    if dots[1] > current_time:
                                                        atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                                if blood_strikes_points != 0:
                                                    atta_num = atta_num + ((blood_strikes_points * 5) / 100)
                                                atta_num = atta_num * oh_wep_damage_mod
                                                if hysteria_active == True:
                                                    atta_num = atta_num + (atta_num * .2)
                                                if tricksoftt_active == True:
                                                    atta_num = atta_num + (atta_num * .15)
                                                atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                            atta_num * increased_all_damage)
                                                sum_oh_bs_attacks += atta_num
                                                trinket_hit_crit_tracker = 1
                                                if blood_of_the_north_points != 0:
                                                    if just_used_death_rune != True:
                                                        proc_num = random.randint(0, 100)
                                                        if blood_of_the_north_points < 3:
                                                            death_proc_chance = (blood_of_the_north_points * .3) * 100
                                                        elif blood_of_the_north_points == 3:
                                                            death_proc_chance = 100
                                                        if death_proc_chance >= proc_num:
                                                            death_castable = castable + death
                                                            rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd,
                                                                                                      current_time)
                                                            rune_cd_tracker[castable] = 10000
                                                if reaping_points != 0:
                                                    if just_used_death_rune != True:
                                                        proc_num = random.randint(0, 100)
                                                        if reaping_points < 3:
                                                            death_proc_chance = (reaping_points * .3) * 100
                                                        elif reaping_points == 3:
                                                            death_proc_chance = 100
                                                        if death_proc_chance >= proc_num:
                                                            death_castable = castable + death
                                                            rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd,
                                                                                                      current_time)
                                                            rune_cd_tracker[castable] = 10000
                                                if sigil_of_haunted_dreams == True:
                                                    if random.randint(0, 100) < 15:
                                                        if sigil_of_haunted_dreams_buff == False:
                                                            sigil_of_haunted_dreams_buff = True
                                                            sigil_of_haunted_dreams_timer = current_time + 10
                                                            total_crit = total_crit + ((173 / 45.8) / 100)
                                                if t9_dps_two_set == True:
                                                    if t9_bonus == False:
                                                        if t9_cd_timer < current_time:
                                                            if (standard_10k_random_value[
                                                                    damage_result_number] / 100) < 50:
                                                                t9_bonus = True
                                                                t9_cd_timer = current_time + 45
                                                                t9_active_timer = current_time + 15
                                                                bonus_loop_str += 180
                                                                rotation.append("T9 DPS 2p Bonus")
                                                                rotation_time.append(current_time)
                                                                rotation_damage.append(0)
                                                                rotation_status.append("Proc")
                                                if desolation_points != 0:
                                                    if desolation_buff == False:
                                                        increased_all_damage += (desolation_points / 100)
                                                        desolation_buff_timer = current_time + 20
                                                        rotation.append("Desolation")
                                                        rotation_time.append(current_time)
                                                        rotation_damage.append(0)
                                                        rotation_status.append("Applied")
                                                        desolation_buff = True
                                                    else:
                                                        desolation_buff_timer = current_time + 20
                                                        rotation.append("Desolation")
                                                        rotation_time.append(current_time)
                                                        rotation_damage.append(0)
                                                        rotation_status.append("Refresh")
                                                if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                    if (standard_10k_random_value[
                                                            damage_result_number] / 100) < sudden_doom_points * 5:
                                                        hit = spell_hit(spell_hit_total, increased_spell_hit,
                                                                        target_level, standard_10k_random_value,
                                                                        damage_result_number)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        crit = spell_crit(
                                                            (total_crit + (darkruned_battlegear_two_set / 100)),
                                                            spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number,
                                                            increased_spell_crit)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        if hit == True:
                                                            if crit == True:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                                 impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if sigil_of_the_wild_buck == True:
                                                                    atta_num += 80
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Crit")
                                                                rotation_damage.append(atta_num)
                                                            else:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                            (impurity_points * 4) / 100))) * 0))
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if sigil_of_the_wild_buck == True:
                                                                    atta_num += 80
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Hit")
                                                                rotation_damage.append(atta_num)
                                                        if hit == False:
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Miss")
                                                            rotation_damage.append(0)
                                                rotation.append("OH - Blood Strike")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Hit")
                                                rotation_damage.append(atta_num)

                                if attack_table_results == 0:
                                    atta_num = 0
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                                    rotation.append("Blood Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Miss")
                                    rotation_damage.append(atta_num)
                                    current_time = current_time + gcd
                                    used_gcd = True
                                    continue
                                elif attack_table_results == 1:
                                    atta_num = 0
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                                    rotation.append("Blood Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Dodge")
                                    rotation_damage.append(atta_num)
                                    current_time = current_time + gcd
                                    used_gcd = True
                                    continue
                                elif attack_table_results == 5:
                                    # crit attack
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                    atta_num = (((746 + (wep_roll * .4)) + (
                                                (746 + (wep_roll * .4)) * (.125 * how_many_dots_on_target)) + (
                                                             (746 + (wep_roll * .4)) * (
                                                                 .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                            ((746 + (wep_roll * .4)) + ((746 + (wep_roll * .4)) * (
                                                                        .125 * how_many_dots_on_target)) + (
                                                                         (746 + (wep_roll * .4)) * (
                                                                             .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                           var_crit_amount + (guile_of_gorefiend_points * .15))
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if tundra_stalker_points != 0:
                                        if dots[0] > current_time:
                                            atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                    if blood_of_the_north_points != 0:
                                        if blood_of_the_north_points < 3:
                                            atta_num = atta_num + (atta_num * (blood_of_the_north_points * .03))
                                        elif blood_of_the_north_points == 3:
                                            atta_num = atta_num + (atta_num * .1)
                                    if t9_tank_two_set == True:
                                        atta_num = atta_num + (atta_num * .05)
                                    if rage_of_rivendale_points != 0:
                                        if dots[1] > current_time:
                                            atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                    if blood_strikes_points != 0:
                                        atta_num = atta_num + ((blood_strikes_points * 5) / 100)
                                    if might_of_mograine_points != 0:
                                        atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    sum_bs_attacks += atta_num
                                    current_power = runic_power(10, current_power, max_runic)
                                    trinket_hit_crit_tracker = 2
                                    if blood_of_the_north_points != 0:
                                        if just_used_death_rune != True:
                                            proc_num = random.randint(0, 100)
                                            if blood_of_the_north_points < 3:
                                                death_proc_chance = (blood_of_the_north_points * .3) * 100
                                            elif blood_of_the_north_points == 3:
                                                death_proc_chance = 100
                                            if death_proc_chance >= proc_num:
                                                death_castable = castable + death
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                    if reaping_points != 0:
                                        if just_used_death_rune != True:
                                            proc_num = random.randint(0, 100)
                                            if reaping_points < 3:
                                                death_proc_chance = (reaping_points * .3) * 100
                                            elif reaping_points == 3:
                                                death_proc_chance = 100
                                            if death_proc_chance >= proc_num:
                                                death_castable = castable + death
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                    if sigil_of_haunted_dreams == True:
                                        if random.randint(0, 100) < 15:
                                            if sigil_of_haunted_dreams_buff == False:
                                                sigil_of_haunted_dreams_buff = True
                                                sigil_of_haunted_dreams_timer = current_time + 10
                                                total_crit = total_crit + ((173 / 45.8) / 100)
                                    if t9_dps_two_set == True:
                                        if t9_bonus == False:
                                            if t9_cd_timer < current_time:
                                                if (random.randint(0, 10000) / 100) < 50:
                                                    t9_bonus = True
                                                    t9_cd_timer = current_time + 45
                                                    t9_active_timer = current_time + 15
                                                    bonus_loop_str += 180
                                                    rotation.append("T9 DPS 2p Bonus")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Proc")
                                    if desolation_points != 0:
                                        if desolation_buff == False:
                                            increased_all_damage += (desolation_points / 100)
                                            desolation_buff_timer = current_time + 20
                                            rotation.append("Desolation")
                                            rotation_time.append(current_time)
                                            rotation_damage.append(0)
                                            rotation_status.append("Applied")
                                            desolation_buff = True
                                        else:
                                            desolation_buff_timer = current_time + 20
                                            rotation.append("Desolation")
                                            rotation_time.append(current_time)
                                            rotation_damage.append(0)
                                            rotation_status.append("Refresh")
                                    if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                        if (standard_10k_random_value[
                                                damage_result_number] / 100) < sudden_doom_points * 5:
                                            hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                              spell_hit_total, increased_spell_hit, target_level,
                                                              standard_10k_random_value, damage_result_number,
                                                              increased_spell_crit)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            if hit == True:
                                                if crit == True:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                (impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Crit")
                                                    rotation_damage.append(atta_num)
                                                else:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (
                                                                current_ap * ((impurity_points * 4) / 100))) * 0))
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Hit")
                                                    rotation_damage.append(atta_num)
                                            if hit == False:
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Miss")
                                                rotation_damage.append(0)
                                    rotation.append("Blood Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Crit")
                                    rotation_damage.append(atta_num)
                                    current_time += gcd
                                    used_gcd = True
                                    # print("Blood Strike Crit - " + str(atta_num))
                                    continue
                                elif attack_table_results == 7:
                                    # normal attack
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                    atta_num = ((746 + (wep_roll * .4)) + (
                                                (746 + (wep_roll * .4)) * (.125 * how_many_dots_on_target)) + (
                                                            (746 + (wep_roll * .4)) * (
                                                                .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                           ((746 + (wep_roll * .4)) + ((746 + (wep_roll * .4)) * (
                                                                       .125 * how_many_dots_on_target)) + (
                                                                        (746 + (wep_roll * .4)) * (
                                                                            .125 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if tundra_stalker_points != 0:
                                        if dots[0] > current_time:
                                            atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                    if blood_of_the_north_points != 0:
                                        if blood_of_the_north_points < 3:
                                            atta_num = atta_num + (atta_num * (blood_of_the_north_points * .03))
                                        elif blood_of_the_north_points == 3:
                                            atta_num = atta_num + (atta_num * .1)
                                    if t9_tank_two_set == True:
                                        atta_num = atta_num + (atta_num * .05)
                                    if rage_of_rivendale_points != 0:
                                        if dots[1] > current_time:
                                            atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                    if blood_strikes_points != 0:
                                        atta_num = atta_num + ((blood_strikes_points * 5) / 100)
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    sum_bs_attacks += atta_num
                                    current_power = runic_power(10, current_power, max_runic)
                                    trinket_hit_crit_tracker = 1
                                    if blood_of_the_north_points != 0:
                                        if just_used_death_rune != True:
                                            proc_num = random.randint(0, 100)
                                            if blood_of_the_north_points < 3:
                                                death_proc_chance = (blood_of_the_north_points * .3) * 100
                                            elif blood_of_the_north_points == 3:
                                                death_proc_chance = 100
                                            if death_proc_chance >= proc_num:
                                                death_castable = castable + death
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                    if reaping_points != 0:
                                        if just_used_death_rune != True:
                                            proc_num = random.randint(0, 100)
                                            if reaping_points < 3:
                                                death_proc_chance = (reaping_points * .3) * 100
                                            elif reaping_points == 3:
                                                death_proc_chance = 100
                                            if death_proc_chance >= proc_num:
                                                death_castable = castable + death
                                                rune_cd_tracker[death_castable] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                    if sigil_of_haunted_dreams == True:
                                        if random.randint(0, 100) < 15:
                                            if sigil_of_haunted_dreams_buff == False:
                                                sigil_of_haunted_dreams_buff = True
                                                sigil_of_haunted_dreams_timer = current_time + 10
                                                total_crit = total_crit + ((173 / 45.8) / 100)
                                    if t9_dps_two_set == True:
                                        if t9_bonus == False:
                                            if t9_cd_timer < current_time:
                                                if (random.randint(0, 10000) / 100) < 50:
                                                    t9_bonus = True
                                                    t9_cd_timer = current_time + 45
                                                    t9_active_timer = current_time + 15
                                                    bonus_loop_str += 180
                                                    rotation.append("T9 DPS 2p Bonus")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Proc")
                                    if desolation_points != 0:
                                        if desolation_buff == False:
                                            increased_all_damage += (desolation_points / 100)
                                            desolation_buff_timer = current_time + 20
                                            rotation.append("Desolation")
                                            rotation_time.append(current_time)
                                            rotation_damage.append(0)
                                            rotation_status.append("Applied")
                                            desolation_buff = True
                                        else:
                                            desolation_buff_timer = current_time + 20
                                            rotation.append("Desolation")
                                            rotation_time.append(current_time)
                                            rotation_damage.append(0)
                                            rotation_status.append("Refresh")
                                    if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                        if (standard_10k_random_value[
                                                damage_result_number] / 100) < sudden_doom_points * 5:
                                            hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                              spell_hit_total, increased_spell_hit, target_level,
                                                              standard_10k_random_value, damage_result_number,
                                                              increased_spell_crit)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            if hit == True:
                                                if crit == True:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                (impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Crit")
                                                    rotation_damage.append(atta_num)
                                                else:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (
                                                                current_ap * ((impurity_points * 4) / 100))) * 0))
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Hit")
                                                    rotation_damage.append(atta_num)
                                            if hit == False:
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Miss")
                                                rotation_damage.append(0)
                                    rotation.append("Blood Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Hit")
                                    rotation_damage.append(atta_num)
                                    current_time += gcd
                                    used_gcd = True
                                    # print("Blood Strike - " + str(atta_num))
                                    continue
                    if pestilence_allow_reset == False:
                        if use_blood_strike_over_blood_boil == True and heart_strike_points == 1:  # Use Heart Strike
                            castable = all_rune_check(blood, current_time,
                                                      rune_cd_tracker)  # Heart Strike if pest reset if false
                            use_death_rune = False
                            if castable == 3:  # Blood Strike
                                until_dot0 = dots[0]
                                until_dot1 = dots[1]
                                if pestilence_allow_reset == True:
                                    until_dot0 -= pestilence_reset_window
                                    until_dot1 -= pestilence_reset_window
                                castable_death = all_rune_check(death, current_time, rune_cd_tracker)
                                castable_death_f = all_rune_check(death_f, current_time, rune_cd_tracker)
                                castable_death_u = all_rune_check(death_u, current_time, rune_cd_tracker)
                                if castable_death != 3:
                                    if until_dot0 <= current_time + haste_rune_cd:
                                        if until_dot1 <= current_time + haste_rune_cd:
                                            use_death_rune = True
                                            just_used_death_rune = True
                                            castable = castable_death
                                elif castable_death_f != 3:
                                    if until_dot0 <= current_time + haste_rune_cd:
                                        if until_dot1 <= current_time + haste_rune_cd:
                                            use_death_rune = True
                                            just_used_death_rune = True
                                            castable = castable_death_f
                                elif castable_death_u != 3:
                                    if until_dot0 <= current_time + haste_rune_cd:
                                        if until_dot1 <= current_time + haste_rune_cd:
                                            use_death_rune = True
                                            just_used_death_rune = True
                                            castable = castable_death_u
                            if castable != 3:
                                if castable == 2:
                                    castable = 0
                                if use_death_rune == True:
                                    use_death_rune = False
                                    if castable_death != 3:
                                        rune_cd_tracker[castable] = 0
                                        if castable_death == 2:
                                            castable_death = 0
                                        rune_cd_tracker[castable_death + 6] = 10000
                                    elif castable_death_f != 3:
                                        castable += 2
                                        rune_cd_tracker[castable] = 0
                                        if castable_death_f == 2:
                                            castable_death_f = 0
                                        rune_cd_tracker[castable_death_f + 8] = 10000
                                    elif castable_death_u != 3:
                                        castable += 4
                                        rune_cd_tracker[castable] = 0
                                        if castable_death_u == 2:
                                            castable_death_u = 0
                                        rune_cd_tracker[castable_death_u + 10] = 10000
                                else:
                                    use_death_rune = False
                                if amount_of_targets > 1:
                                    attack_table_results = attack_table(1, tanking, H2, True, False, hit_from_gear,
                                                                        hit_from_other, target_level,
                                                                        all_expertise_dodge, all_expertise_parry,
                                                                        total_crit, standard_10k_random_value,
                                                                        damage_result_number, (
                                                                                    annihilation_talent_points / 100) + increased_phy_crit + (
                                                                                    (subversion_points * 3) / 100))
                                    armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                                    # wep_roll = weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)
                                    wep_roll = mh_wep_random_value[damage_result_number]
                                    damage_result_number = damage_array_updater(damage_result_number)
                                    wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                                    # Rune Hit
                                    haste_percentage = (
                                                                   total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                    haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                     last_rune_change[castable + 6])
                                    if improved_unholy_presence_points != 0:
                                        if dk_presence == 2:
                                            haste_rune_cd = haste_rune_cd - (
                                                        haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                                    if dk_presence != 2:
                                        gcd = input_gcd / (1 + haste_percentage)
                                        if gcd < 1:
                                            gcd = 1
                                    ##Rune Miss
                                    haste_rune_cd_miss = 1
                                    how_many_dots_on_target = 0
                                    if dots[0] > current_time:
                                        how_many_dots_on_target += 1
                                    if dots[1] > current_time:
                                        how_many_dots_on_target += 1
                                    if dots[2] > current_time:
                                        how_many_dots_on_target += 1
                                    if multiple_adds_timer < current_time:
                                        how_many_dots_on_target = 0
                                    if dancing_rune_weapon_points == 1:
                                        if dancing_rune_weapon_active == True:
                                            if attack_table_results == 0:
                                                atta_num = 0
                                                rotation.append("Dancing Rune Weapon")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Miss")
                                                rotation_damage.append(atta_num)
                                            elif attack_table_results == 1:
                                                atta_num = 0
                                                rotation.append("Dancing Rune Weapon")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Dodge")
                                                rotation_damage.append(atta_num)
                                            elif attack_table_results == 5:
                                                atta_num = (((0 + (wep_roll * .25)) + (
                                                            (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                                         (0 + (wep_roll * .25)) * (
                                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                        ((0 + (wep_roll * .25)) + (
                                                                                    (0 + (wep_roll * .25)) * (
                                                                                        .1 * how_many_dots_on_target)) + (
                                                                                     (0 + (wep_roll * .25)) * (
                                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                               var_crit_amount)
                                                if dk_presence == 0:
                                                    atta_num = atta_num + (atta_num * .15)
                                                if t9_tank_two_set == True:
                                                    atta_num = atta_num + (atta_num * .05)
                                                if blood_strikes_points != 0:
                                                    atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                                if might_of_mograine_points != 0:
                                                    atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                                if scourgelords_battlegear_two_set == True:
                                                    atta_num = atta_num + (atta_num * .07)
                                                if hysteria_active == True:
                                                    atta_num = atta_num + (atta_num * .2)
                                                if tricksoftt_active == True:
                                                    atta_num = atta_num + (atta_num * .15)
                                                atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                            atta_num * increased_all_damage)
                                                atta_num = atta_num * dancing_rune_weapon_damage_multi
                                                dancing_rune_weapon_damage += atta_num
                                                rotation.append("Dancing Rune Weapon")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Crit")
                                                rotation_damage.append(atta_num)
                                                trinket_hit_crit_tracker = 2
                                                if sigil_of_haunted_dreams == True:
                                                    if random.randint(0, 100) < 15:
                                                        if sigil_of_haunted_dreams_buff == False:
                                                            sigil_of_haunted_dreams_buff = True
                                                            sigil_of_haunted_dreams_timer = current_time + 10
                                                            total_crit = total_crit + ((173 / 45.8) / 100)
                                                if t9_dps_two_set == True:
                                                    if t9_bonus == False:
                                                        if t9_cd_timer < current_time:
                                                            if (standard_10k_random_value[
                                                                    damage_result_number] / 100) < 50:
                                                                t9_bonus = True
                                                                t9_cd_timer = current_time + 45
                                                                t9_active_timer = current_time + 15
                                                                bonus_loop_str += 180
                                                                rotation.append("T9 DPS 2p Bonus")
                                                                rotation_time.append(current_time)
                                                                rotation_damage.append(0)
                                                                rotation_status.append("Proc")
                                                if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                    if (standard_10k_random_value[
                                                            damage_result_number] / 100) < sudden_doom_points * 5:
                                                        hit = spell_hit(spell_hit_total, increased_spell_hit,
                                                                        target_level, standard_10k_random_value,
                                                                        damage_result_number)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        crit = spell_crit(
                                                            (total_crit + (darkruned_battlegear_two_set / 100)),
                                                            spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number,
                                                            increased_spell_crit)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        if hit == True:
                                                            if crit == True:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                                 impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if sigil_of_the_wild_buck == True:
                                                                    atta_num += 80
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Crit")
                                                                rotation_damage.append(atta_num)
                                                            else:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                            (impurity_points * 4) / 100))) * 0))
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if sigil_of_the_wild_buck == True:
                                                                    atta_num += 80
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Hit")
                                                                rotation_damage.append(atta_num)
                                                        if hit == False:
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Miss")
                                                            rotation_damage.append(0)
                                            elif attack_table_results == 7:
                                                atta_num = (((0 + (wep_roll * .25)) + (
                                                            (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                                         (0 + (wep_roll * .25)) * (
                                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                        ((0 + (wep_roll * .25)) + (
                                                                                    (0 + (wep_roll * .25)) * (
                                                                                        .1 * how_many_dots_on_target)) + (
                                                                                     (0 + (wep_roll * .25)) * (
                                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                                if dk_presence == 0:
                                                    atta_num = atta_num + (atta_num * .15)
                                                if t9_tank_two_set == True:
                                                    atta_num = atta_num + (atta_num * .05)
                                                if blood_strikes_points != 0:
                                                    atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                                if might_of_mograine_points != 0:
                                                    atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                                if scourgelords_battlegear_two_set == True:
                                                    atta_num = atta_num + (atta_num * .07)
                                                if hysteria_active == True:
                                                    atta_num = atta_num + (atta_num * .2)
                                                if tricksoftt_active == True:
                                                    atta_num = atta_num + (atta_num * .15)
                                                atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                            atta_num * increased_all_damage)
                                                atta_num = atta_num * dancing_rune_weapon_damage_multi
                                                dancing_rune_weapon_damage += atta_num
                                                rotation.append("Dancing Rune Weapon")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Hit")
                                                rotation_damage.append(atta_num)
                                                trinket_hit_crit_tracker = 1
                                                if sigil_of_haunted_dreams == True:
                                                    if random.randint(0, 100) < 15:
                                                        if sigil_of_haunted_dreams_buff == False:
                                                            sigil_of_haunted_dreams_buff = True
                                                            sigil_of_haunted_dreams_timer = current_time + 10
                                                            total_crit = total_crit + ((173 / 45.8) / 100)
                                                if t9_dps_two_set == True:
                                                    if t9_bonus == False:
                                                        if t9_cd_timer < current_time:
                                                            if (standard_10k_random_value[
                                                                    damage_result_number] / 100) < 50:
                                                                t9_bonus = True
                                                                t9_cd_timer = current_time + 45
                                                                t9_active_timer = current_time + 15
                                                                bonus_loop_str += 180
                                                                rotation.append("T9 DPS 2p Bonus")
                                                                rotation_time.append(current_time)
                                                                rotation_damage.append(0)
                                                                rotation_status.append("Proc")
                                                if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                    if (standard_10k_random_value[
                                                            damage_result_number] / 100) < sudden_doom_points * 5:
                                                        hit = spell_hit(spell_hit_total, increased_spell_hit,
                                                                        target_level, standard_10k_random_value,
                                                                        damage_result_number)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        crit = spell_crit(
                                                            (total_crit + (darkruned_battlegear_two_set / 100)),
                                                            spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number,
                                                            increased_spell_crit)
                                                        damage_result_number = damage_array_updater(
                                                            damage_result_number)
                                                        if hit == True:
                                                            if crit == True:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                                 impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if sigil_of_the_wild_buck == True:
                                                                    atta_num += 80
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Crit")
                                                                rotation_damage.append(atta_num)
                                                            else:
                                                                atta_num = death_coil_random_value[damage_result_number]
                                                                atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                            (impurity_points * 4) / 100))) * 0))
                                                                if sigil_of_vengeful_heart == True:
                                                                    atta_num + 380
                                                                if sigil_of_the_wild_buck == True:
                                                                    atta_num += 80
                                                                if black_ice_points == 5:
                                                                    atta_num = atta_num + (atta_num * .1)
                                                                elif black_ice_points == 4:
                                                                    atta_num = atta_num + (atta_num * .08)
                                                                elif black_ice_points == 3:
                                                                    atta_num = atta_num + (atta_num * .06)
                                                                elif black_ice_points == 2:
                                                                    atta_num = atta_num + (atta_num * .04)
                                                                elif black_ice_points == 1:
                                                                    atta_num = atta_num + (atta_num * .02)
                                                                if dk_presence == 0:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                if tundra_stalker_points != 0:
                                                                    if dots[0] > current_time:
                                                                        atta_num = atta_num + (atta_num * (
                                                                                    tundra_stalker_points * .03))
                                                                if glyph_death_coil == True:
                                                                    atta_num += atta_num * .15
                                                                if rage_of_rivendale_points != 0:
                                                                    if dots[1] > current_time:
                                                                        atta_num += atta_num * ((
                                                                                                            rage_of_rivendale_points * 2) / 100)
                                                                if morbitity_points != 0:
                                                                    atta_num += ((morbitity_points * 5) / 100)
                                                                if hysteria_active == True:
                                                                    atta_num = atta_num + (atta_num * .2)
                                                                if tricksoftt_active == True:
                                                                    atta_num = atta_num + (atta_num * .15)
                                                                atta_num = atta_num + (
                                                                            atta_num * increased_spell_damage) + (
                                                                                       atta_num * increased_all_damage)
                                                                sudden_doom_damage += atta_num
                                                                if unholy_blight_points == 1:
                                                                    unholy_blight_amount = atta_num / 10
                                                                    unholy_blight_timer = current_time + 10
                                                                if rune_of_cinderglacier_active == True:
                                                                    rune_of_cinderglacier_damage = atta_num * .2
                                                                    rune_of_cinderglacier_active_count += 1
                                                                    rotation.append("Rune of Cinderglacier")
                                                                    rotation_time.append(current_time)
                                                                    rotation_status.append("Active")
                                                                    rotation_damage.append(atta_num * .2)
                                                                    if rune_of_cinderglacier_active_count == 2:
                                                                        rune_of_cinderglacier_active = False
                                                                rotation.append("Sudden Doom")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Hit")
                                                                rotation_damage.append(atta_num)
                                                        if hit == False:
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Miss")
                                                            rotation_damage.append(0)
                                    if attack_table_results == 0:
                                        atta_num = 0
                                        rotation.append("Heart Strike - Second Target")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Miss")
                                        rotation_damage.append(atta_num)
                                    elif attack_table_results == 1:
                                        atta_num = 0
                                        rotation.append("Heart Strike - Second Target")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Dodge")
                                        rotation_damage.append(atta_num)
                                    elif attack_table_results == 5:
                                        # crit attack
                                        atta_num = (((0 + (wep_roll * .25)) + (
                                                    (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                                 (0 + (wep_roll * .25)) * (
                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                ((0 + (wep_roll * .25)) + ((0 + (wep_roll * .25)) * (
                                                                            .1 * how_many_dots_on_target)) + (
                                                                             (0 + (wep_roll * .25)) * (
                                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                       var_crit_amount)
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if t9_tank_two_set == True:
                                            atta_num = atta_num + (atta_num * .05)
                                        if blood_strikes_points != 0:
                                            atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if scourgelords_battlegear_two_set == True:
                                            atta_num = atta_num + (atta_num * .07)
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                    atta_num * increased_all_damage)
                                        sum_heart_strike_attacks += atta_num
                                        trinket_hit_crit_tracker = 2
                                        if sigil_of_haunted_dreams == True:
                                            if random.randint(0, 100) < 15:
                                                if sigil_of_haunted_dreams_buff == False:
                                                    sigil_of_haunted_dreams_buff = True
                                                    sigil_of_haunted_dreams_timer = current_time + 10
                                                    total_crit = total_crit + ((173 / 45.8) / 100)
                                        if t9_dps_two_set == True:
                                            if t9_bonus == False:
                                                if t9_cd_timer < current_time:
                                                    if (random.randint(0, 10000) / 100) < 50:
                                                        t9_bonus = True
                                                        t9_cd_timer = current_time + 45
                                                        t9_active_timer = current_time + 15
                                                        bonus_loop_str += 180
                                                        rotation.append("T9 DPS 2p Bonus")
                                                        rotation_time.append(current_time)
                                                        rotation_damage.append(0)
                                                        rotation_status.append("Proc")
                                        if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                            if (standard_10k_random_value[
                                                    damage_result_number] / 100) < sudden_doom_points * 5:
                                                hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                standard_10k_random_value, damage_result_number)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                                  spell_hit_total, increased_spell_hit, target_level,
                                                                  standard_10k_random_value, damage_result_number,
                                                                  increased_spell_crit)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                if hit == True:
                                                    if crit == True:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                         impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Crit")
                                                        rotation_damage.append(atta_num)
                                                    else:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        atta_num = (atta_num + ((current_ap + (
                                                                    current_ap * ((impurity_points * 4) / 100))) * 0))
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Hit")
                                                        rotation_damage.append(atta_num)
                                                if hit == False:
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Miss")
                                                    rotation_damage.append(0)
                                        rotation.append("Heart Strike - Second Target")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Crit")
                                        rotation_damage.append(atta_num)
                                    elif attack_table_results == 7:
                                        # normal attack
                                        atta_num = (((0 + (wep_roll * .25)) + (
                                                    (0 + (wep_roll * .25)) * (.1 * how_many_dots_on_target)) + (
                                                                 (0 + (wep_roll * .25)) * (
                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                ((0 + (wep_roll * .25)) + ((0 + (wep_roll * .25)) * (
                                                                            .1 * how_many_dots_on_target)) + (
                                                                             (0 + (wep_roll * .25)) * (
                                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if t9_tank_two_set == True:
                                            atta_num = atta_num + (atta_num * .05)
                                        if blood_strikes_points != 0:
                                            atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if scourgelords_battlegear_two_set == True:
                                            atta_num = atta_num + (atta_num * .07)
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                    atta_num * increased_all_damage)
                                        sum_heart_strike_attacks += atta_num
                                        trinket_hit_crit_tracker = 1
                                        if sigil_of_haunted_dreams == True:
                                            if random.randint(0, 100) < 15:
                                                if sigil_of_haunted_dreams_buff == False:
                                                    sigil_of_haunted_dreams_buff = True
                                                    sigil_of_haunted_dreams_timer = current_time + 10
                                                    total_crit = total_crit + ((173 / 45.8) / 100)
                                        if t9_dps_two_set == True:
                                            if t9_bonus == False:
                                                if t9_cd_timer < current_time:
                                                    if (random.randint(0, 10000) / 100) < 50:
                                                        t9_bonus = True
                                                        t9_cd_timer = current_time + 45
                                                        t9_active_timer = current_time + 15
                                                        bonus_loop_str += 180
                                                        rotation.append("T9 DPS 2p Bonus")
                                                        rotation_time.append(current_time)
                                                        rotation_damage.append(0)
                                                        rotation_status.append("Proc")
                                        if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                            if (standard_10k_random_value[
                                                    damage_result_number] / 100) < sudden_doom_points * 5:
                                                hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                standard_10k_random_value, damage_result_number)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                                  spell_hit_total, increased_spell_hit, target_level,
                                                                  standard_10k_random_value, damage_result_number,
                                                                  increased_spell_crit)
                                                damage_result_number = damage_array_updater(damage_result_number)
                                                if hit == True:
                                                    if crit == True:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                         impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Crit")
                                                        rotation_damage.append(atta_num)
                                                    else:
                                                        atta_num = death_coil_random_value[damage_result_number]
                                                        atta_num = (atta_num + ((current_ap + (
                                                                    current_ap * ((impurity_points * 4) / 100))) * 0))
                                                        if sigil_of_vengeful_heart == True:
                                                            atta_num + 380
                                                        if sigil_of_the_wild_buck == True:
                                                            atta_num += 80
                                                        if black_ice_points == 5:
                                                            atta_num = atta_num + (atta_num * .1)
                                                        elif black_ice_points == 4:
                                                            atta_num = atta_num + (atta_num * .08)
                                                        elif black_ice_points == 3:
                                                            atta_num = atta_num + (atta_num * .06)
                                                        elif black_ice_points == 2:
                                                            atta_num = atta_num + (atta_num * .04)
                                                        elif black_ice_points == 1:
                                                            atta_num = atta_num + (atta_num * .02)
                                                        if dk_presence == 0:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        if tundra_stalker_points != 0:
                                                            if dots[0] > current_time:
                                                                atta_num = atta_num + (
                                                                            atta_num * (tundra_stalker_points * .03))
                                                        if glyph_death_coil == True:
                                                            atta_num += atta_num * .15
                                                        if rage_of_rivendale_points != 0:
                                                            if dots[1] > current_time:
                                                                atta_num += atta_num * (
                                                                            (rage_of_rivendale_points * 2) / 100)
                                                        if morbitity_points != 0:
                                                            atta_num += ((morbitity_points * 5) / 100)
                                                        if hysteria_active == True:
                                                            atta_num = atta_num + (atta_num * .2)
                                                        if tricksoftt_active == True:
                                                            atta_num = atta_num + (atta_num * .15)
                                                        atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                    atta_num * increased_all_damage)
                                                        sudden_doom_damage += atta_num
                                                        if unholy_blight_points == 1:
                                                            unholy_blight_amount = atta_num / 10
                                                            unholy_blight_timer = current_time + 10
                                                        if rune_of_cinderglacier_active == True:
                                                            rune_of_cinderglacier_damage = atta_num * .2
                                                            rune_of_cinderglacier_active_count += 1
                                                            rotation.append("Rune of Cinderglacier")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Active")
                                                            rotation_damage.append(atta_num * .2)
                                                            if rune_of_cinderglacier_active_count == 2:
                                                                rune_of_cinderglacier_active = False
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Hit")
                                                        rotation_damage.append(atta_num)
                                                if hit == False:
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Miss")
                                                    rotation_damage.append(0)
                                        rotation.append("Heart Strike - Second Target")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Hit")
                                        rotation_damage.append(atta_num)
                                attack_table_results = attack_table(1, tanking, H2, True, False, hit_from_gear,
                                                                    hit_from_other, target_level, all_expertise_dodge,
                                                                    all_expertise_parry, total_crit,
                                                                    standard_10k_random_value, damage_result_number, (
                                                                                annihilation_talent_points / 100) + increased_phy_crit + (
                                                                                (subversion_points * 3) / 100))
                                armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                                # wep_roll = weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)
                                wep_roll = mh_wep_random_value[damage_result_number]
                                damage_result_number = damage_array_updater(damage_result_number)
                                wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                                # Rune Hit
                                haste_percentage = (
                                                               total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                                haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                                 last_rune_change[castable + 6])
                                if improved_unholy_presence_points != 0:
                                    if dk_presence == 2:
                                        haste_rune_cd = haste_rune_cd - (
                                                    haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                                if dk_presence != 2:
                                    gcd = input_gcd / (1 + haste_percentage)
                                    if gcd < 1:
                                        gcd = 1
                                ##Rune Miss
                                haste_rune_cd_miss = 1
                                how_many_dots_on_target = 0
                                if dots[0] > current_time:
                                    how_many_dots_on_target += 1
                                if dots[1] > current_time:
                                    how_many_dots_on_target += 1
                                if dots[2] > current_time:
                                    how_many_dots_on_target += 1
                                if dancing_rune_weapon_points == 1:
                                    if dancing_rune_weapon_active == True:
                                        if attack_table_results == 0:
                                            atta_num = 0
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Miss")
                                            rotation_damage.append(atta_num)
                                        elif attack_table_results == 1:
                                            atta_num = 0
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Dodge")
                                            rotation_damage.append(atta_num)
                                        elif attack_table_results == 5:
                                            atta_num = (((0 + (wep_roll * .5)) + (
                                                        (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                                     (0 + (wep_roll * .5)) * (
                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                    ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                                .1 * how_many_dots_on_target)) + (
                                                                                 (0 + (wep_roll * .5)) * (
                                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                           var_crit_amount)
                                            if dk_presence == 0:
                                                atta_num = atta_num + (atta_num * .15)
                                            if t9_tank_two_set == True:
                                                atta_num = atta_num + (atta_num * .05)
                                            if blood_strikes_points != 0:
                                                atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                            if might_of_mograine_points != 0:
                                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                            if scourgelords_battlegear_two_set == True:
                                                atta_num = atta_num + (atta_num * .07)
                                            if hysteria_active == True:
                                                atta_num = atta_num + (atta_num * .2)
                                            if tricksoftt_active == True:
                                                atta_num = atta_num + (atta_num * .15)
                                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                        atta_num * increased_all_damage)
                                            atta_num = atta_num * dancing_rune_weapon_damage_multi
                                            dancing_rune_weapon_damage += atta_num
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Crit")
                                            rotation_damage.append(atta_num)
                                            trinket_hit_crit_tracker = 2
                                            if sigil_of_haunted_dreams == True:
                                                if random.randint(0, 100) < 15:
                                                    if sigil_of_haunted_dreams_buff == False:
                                                        sigil_of_haunted_dreams_buff = True
                                                        sigil_of_haunted_dreams_timer = current_time + 10
                                                        total_crit = total_crit + ((173 / 45.8) / 100)
                                            if t9_dps_two_set == True:
                                                if t9_bonus == False:
                                                    if t9_cd_timer < current_time:
                                                        if (random.randint(0, 10000) / 100) < 50:
                                                            t9_bonus = True
                                                            t9_cd_timer = current_time + 45
                                                            t9_active_timer = current_time + 15
                                                            bonus_loop_str += 180
                                                            rotation.append("T9 DPS 2p Bonus")
                                                            rotation_time.append(current_time)
                                                            rotation_damage.append(0)
                                                            rotation_status.append("Proc")
                                            if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                if (standard_10k_random_value[
                                                        damage_result_number] / 100) < sudden_doom_points * 5:
                                                    hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                    standard_10k_random_value, damage_result_number)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    crit = spell_crit(
                                                        (total_crit + (darkruned_battlegear_two_set / 100)),
                                                        spell_hit_total, increased_spell_hit, target_level,
                                                        standard_10k_random_value, damage_result_number,
                                                        increased_spell_crit)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    if hit == True:
                                                        if crit == True:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                             impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Crit")
                                                            rotation_damage.append(atta_num)
                                                        else:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                        (impurity_points * 4) / 100))) * 0))
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Hit")
                                                            rotation_damage.append(atta_num)
                                                    if hit == False:
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Miss")
                                                        rotation_damage.append(0)
                                        elif attack_table_results == 7:
                                            atta_num = (((0 + (wep_roll * .5)) + (
                                                        (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                                     (0 + (wep_roll * .5)) * (
                                                                         .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                                    ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                                .1 * how_many_dots_on_target)) + (
                                                                                 (0 + (wep_roll * .5)) * (
                                                                                     .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                            if dk_presence == 0:
                                                atta_num = atta_num + (atta_num * .15)
                                            if t9_tank_two_set == True:
                                                atta_num = atta_num + (atta_num * .05)
                                            if blood_strikes_points != 0:
                                                atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                            if might_of_mograine_points != 0:
                                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                            if scourgelords_battlegear_two_set == True:
                                                atta_num = atta_num + (atta_num * .07)
                                            if hysteria_active == True:
                                                atta_num = atta_num + (atta_num * .2)
                                            if tricksoftt_active == True:
                                                atta_num = atta_num + (atta_num * .15)
                                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                        atta_num * increased_all_damage)
                                            atta_num = atta_num * dancing_rune_weapon_damage_multi
                                            dancing_rune_weapon_damage += atta_num
                                            rotation.append("Dancing Rune Weapon")
                                            rotation_time.append(current_time)
                                            rotation_status.append("Hit")
                                            rotation_damage.append(atta_num)
                                            trinket_hit_crit_tracker = 1
                                            if sigil_of_haunted_dreams == True:
                                                if random.randint(0, 100) < 15:
                                                    if sigil_of_haunted_dreams_buff == False:
                                                        sigil_of_haunted_dreams_buff = True
                                                        sigil_of_haunted_dreams_timer = current_time + 10
                                                        total_crit = total_crit + ((173 / 45.8) / 100)
                                            if t9_dps_two_set == True:
                                                if t9_bonus == False:
                                                    if t9_cd_timer < current_time:
                                                        if (random.randint(0, 10000) / 100) < 50:
                                                            t9_bonus = True
                                                            t9_cd_timer = current_time + 45
                                                            t9_active_timer = current_time + 15
                                                            bonus_loop_str += 180
                                                            rotation.append("T9 DPS 2p Bonus")
                                                            rotation_time.append(current_time)
                                                            rotation_damage.append(0)
                                                            rotation_status.append("Proc")
                                            if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                                if (standard_10k_random_value[
                                                        damage_result_number] / 100) < sudden_doom_points * 5:
                                                    hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                                    standard_10k_random_value, damage_result_number)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    crit = spell_crit(
                                                        (total_crit + (darkruned_battlegear_two_set / 100)),
                                                        spell_hit_total, increased_spell_hit, target_level,
                                                        standard_10k_random_value, damage_result_number,
                                                        increased_spell_crit)
                                                    damage_result_number = damage_array_updater(damage_result_number)
                                                    if hit == True:
                                                        if crit == True:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * ((
                                                                                                                             impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Crit")
                                                            rotation_damage.append(atta_num)
                                                        else:
                                                            atta_num = death_coil_random_value[damage_result_number]
                                                            atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                        (impurity_points * 4) / 100))) * 0))
                                                            if sigil_of_vengeful_heart == True:
                                                                atta_num + 380
                                                            if sigil_of_the_wild_buck == True:
                                                                atta_num += 80
                                                            if black_ice_points == 5:
                                                                atta_num = atta_num + (atta_num * .1)
                                                            elif black_ice_points == 4:
                                                                atta_num = atta_num + (atta_num * .08)
                                                            elif black_ice_points == 3:
                                                                atta_num = atta_num + (atta_num * .06)
                                                            elif black_ice_points == 2:
                                                                atta_num = atta_num + (atta_num * .04)
                                                            elif black_ice_points == 1:
                                                                atta_num = atta_num + (atta_num * .02)
                                                            if dk_presence == 0:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            if tundra_stalker_points != 0:
                                                                if dots[0] > current_time:
                                                                    atta_num = atta_num + (atta_num * (
                                                                                tundra_stalker_points * .03))
                                                            if glyph_death_coil == True:
                                                                atta_num += atta_num * .15
                                                            if rage_of_rivendale_points != 0:
                                                                if dots[1] > current_time:
                                                                    atta_num += atta_num * (
                                                                                (rage_of_rivendale_points * 2) / 100)
                                                            if morbitity_points != 0:
                                                                atta_num += ((morbitity_points * 5) / 100)
                                                            if hysteria_active == True:
                                                                atta_num = atta_num + (atta_num * .2)
                                                            if tricksoftt_active == True:
                                                                atta_num = atta_num + (atta_num * .15)
                                                            atta_num = atta_num + (
                                                                        atta_num * increased_spell_damage) + (
                                                                                   atta_num * increased_all_damage)
                                                            sudden_doom_damage += atta_num
                                                            if unholy_blight_points == 1:
                                                                unholy_blight_amount = atta_num / 10
                                                                unholy_blight_timer = current_time + 10
                                                            if rune_of_cinderglacier_active == True:
                                                                rune_of_cinderglacier_damage = atta_num * .2
                                                                rune_of_cinderglacier_active_count += 1
                                                                rotation.append("Rune of Cinderglacier")
                                                                rotation_time.append(current_time)
                                                                rotation_status.append("Active")
                                                                rotation_damage.append(atta_num * .2)
                                                                if rune_of_cinderglacier_active_count == 2:
                                                                    rune_of_cinderglacier_active = False
                                                            rotation.append("Sudden Doom")
                                                            rotation_time.append(current_time)
                                                            rotation_status.append("Hit")
                                                            rotation_damage.append(atta_num)
                                                    if hit == False:
                                                        rotation.append("Sudden Doom")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Miss")
                                                        rotation_damage.append(0)
                                if attack_table_results == 0:
                                    atta_num = 0
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                                    rotation.append("Heart Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Miss")
                                    rotation_damage.append(atta_num)
                                    current_time = current_time + gcd
                                    used_gcd = True
                                    continue
                                elif attack_table_results == 1:
                                    atta_num = 0
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                                    rotation.append("Heart Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Dodge")
                                    rotation_damage.append(atta_num)
                                    current_time = current_time + gcd
                                    used_gcd = True
                                    continue
                                elif attack_table_results == 5:
                                    # crit attack
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                    atta_num = (((0 + (wep_roll * .5)) + (
                                                (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                             (0 + (wep_roll * .5)) * (
                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                            ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                        .1 * how_many_dots_on_target)) + (
                                                                         (0 + (wep_roll * .5)) * (
                                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount)) * (
                                                   var_crit_amount)
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if t9_tank_two_set == True:
                                        atta_num = atta_num + (atta_num * .05)
                                    if blood_strikes_points != 0:
                                        atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                    if might_of_mograine_points != 0:
                                        atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                    if scourgelords_battlegear_two_set == True:
                                        atta_num = atta_num + (atta_num * .07)
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    sum_heart_strike_attacks += atta_num
                                    current_power = runic_power(10, current_power, max_runic)
                                    trinket_hit_crit_tracker = 2
                                    if sigil_of_haunted_dreams == True:
                                        if random.randint(0, 100) < 15:
                                            if sigil_of_haunted_dreams_buff == False:
                                                sigil_of_haunted_dreams_buff = True
                                                sigil_of_haunted_dreams_timer = current_time + 10
                                                total_crit = total_crit + ((173 / 45.8) / 100)
                                    if t9_dps_two_set == True:
                                        if t9_bonus == False:
                                            if t9_cd_timer < current_time:
                                                if (random.randint(0, 10000) / 100) < 50:
                                                    t9_bonus = True
                                                    t9_cd_timer = current_time + 45
                                                    t9_active_timer = current_time + 15
                                                    bonus_loop_str += 180
                                                    rotation.append("T9 DPS 2p Bonus")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Proc")
                                    if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                        if (standard_10k_random_value[
                                                damage_result_number] / 100) < sudden_doom_points * 5:
                                            hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                              spell_hit_total, increased_spell_hit, target_level,
                                                              standard_10k_random_value, damage_result_number,
                                                              increased_spell_crit)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            if hit == True:
                                                if crit == True:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                (impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Crit")
                                                    rotation_damage.append(atta_num)
                                                else:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (
                                                                current_ap * ((impurity_points * 4) / 100))) * 0))
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Hit")
                                                    rotation_damage.append(atta_num)
                                            if hit == False:
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Miss")
                                                rotation_damage.append(0)
                                    rotation.append("Heart Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Crit")
                                    rotation_damage.append(atta_num)
                                    current_time += gcd
                                    used_gcd = True
                                    continue
                                elif attack_table_results == 7:
                                    # normal attack
                                    rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                                    atta_num = (((0 + (wep_roll * .5)) + (
                                                (0 + (wep_roll * .5)) * (.1 * how_many_dots_on_target)) + (
                                                             (0 + (wep_roll * .5)) * (
                                                                 .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) - (
                                                            ((0 + (wep_roll * .5)) + ((0 + (wep_roll * .5)) * (
                                                                        .1 * how_many_dots_on_target)) + (
                                                                         (0 + (wep_roll * .5)) * (
                                                                             .1 * how_many_dots_on_target) * darkruned_battlegear_four_set)) * armor_red_amount))
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if t9_tank_two_set == True:
                                        atta_num = atta_num + (atta_num * .05)
                                    if blood_strikes_points != 0:
                                        atta_num = atta_num + ((blood_strikes_points * 15) / 100)
                                    if might_of_mograine_points != 0:
                                        atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                    if scourgelords_battlegear_two_set == True:
                                        atta_num = atta_num + (atta_num * .07)
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    sum_heart_strike_attacks += atta_num
                                    current_power = runic_power(10, current_power, max_runic)
                                    trinket_hit_crit_tracker = 1
                                    if sigil_of_haunted_dreams == True:
                                        if random.randint(0, 100) < 15:
                                            if sigil_of_haunted_dreams_buff == False:
                                                sigil_of_haunted_dreams_buff = True
                                                sigil_of_haunted_dreams_timer = current_time + 10
                                                total_crit = total_crit + ((173 / 45.8) / 100)
                                    if t9_dps_two_set == True:
                                        if t9_bonus == False:
                                            if t9_cd_timer < current_time:
                                                if (random.randint(0, 10000) / 100) < 50:
                                                    t9_bonus = True
                                                    t9_cd_timer = current_time + 45
                                                    t9_active_timer = current_time + 15
                                                    bonus_loop_str += 180
                                                    rotation.append("T9 DPS 2p Bonus")
                                                    rotation_time.append(current_time)
                                                    rotation_damage.append(0)
                                                    rotation_status.append("Proc")
                                    if sudden_doom_points != 0:  # Sudden Doom aka Free Death Coil
                                        if (standard_10k_random_value[
                                                damage_result_number] / 100) < sudden_doom_points * 5:
                                            hit = spell_hit(spell_hit_total, increased_spell_hit, target_level,
                                                            standard_10k_random_value, damage_result_number)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            crit = spell_crit((total_crit + (darkruned_battlegear_two_set / 100)),
                                                              spell_hit_total, increased_spell_hit, target_level,
                                                              standard_10k_random_value, damage_result_number,
                                                              increased_spell_crit)
                                            damage_result_number = damage_array_updater(damage_result_number)
                                            if hit == True:
                                                if crit == True:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (current_ap * (
                                                                (impurity_points * 4) / 100))) * 0)) * var_crit_amount
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Crit")
                                                    rotation_damage.append(atta_num)
                                                else:
                                                    atta_num = death_coil_random_value[damage_result_number]
                                                    atta_num = (atta_num + ((current_ap + (
                                                                current_ap * ((impurity_points * 4) / 100))) * 0))
                                                    if sigil_of_vengeful_heart == True:
                                                        atta_num + 380
                                                    if sigil_of_the_wild_buck == True:
                                                        atta_num += 80
                                                    if black_ice_points == 5:
                                                        atta_num = atta_num + (atta_num * .1)
                                                    elif black_ice_points == 4:
                                                        atta_num = atta_num + (atta_num * .08)
                                                    elif black_ice_points == 3:
                                                        atta_num = atta_num + (atta_num * .06)
                                                    elif black_ice_points == 2:
                                                        atta_num = atta_num + (atta_num * .04)
                                                    elif black_ice_points == 1:
                                                        atta_num = atta_num + (atta_num * .02)
                                                    if dk_presence == 0:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    if tundra_stalker_points != 0:
                                                        if dots[0] > current_time:
                                                            atta_num = atta_num + (
                                                                        atta_num * (tundra_stalker_points * .03))
                                                    if glyph_death_coil == True:
                                                        atta_num += atta_num * .15
                                                    if rage_of_rivendale_points != 0:
                                                        if dots[1] > current_time:
                                                            atta_num += atta_num * (
                                                                        (rage_of_rivendale_points * 2) / 100)
                                                    if morbitity_points != 0:
                                                        atta_num += ((morbitity_points * 5) / 100)
                                                    if hysteria_active == True:
                                                        atta_num = atta_num + (atta_num * .2)
                                                    if tricksoftt_active == True:
                                                        atta_num = atta_num + (atta_num * .15)
                                                    atta_num = atta_num + (atta_num * increased_spell_damage) + (
                                                                atta_num * increased_all_damage)
                                                    sudden_doom_damage += atta_num
                                                    if unholy_blight_points == 1:
                                                        unholy_blight_amount = atta_num / 10
                                                        unholy_blight_timer = current_time + 10
                                                    if rune_of_cinderglacier_active == True:
                                                        rune_of_cinderglacier_damage = atta_num * .2
                                                        rune_of_cinderglacier_active_count += 1
                                                        rotation.append("Rune of Cinderglacier")
                                                        rotation_time.append(current_time)
                                                        rotation_status.append("Active")
                                                        rotation_damage.append(atta_num * .2)
                                                        if rune_of_cinderglacier_active_count == 2:
                                                            rune_of_cinderglacier_active = False
                                                    rotation.append("Sudden Doom")
                                                    rotation_time.append(current_time)
                                                    rotation_status.append("Hit")
                                                    rotation_damage.append(atta_num)
                                            if hit == False:
                                                rotation.append("Sudden Doom")
                                                rotation_time.append(current_time)
                                                rotation_status.append("Miss")
                                                rotation_damage.append(0)
                                    rotation.append("Heart Strike")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Hit")
                                    rotation_damage.append(atta_num)
                                    current_time += gcd
                                    used_gcd = True
                                    continue

                    able_to_cast, castable, castable1, castable2, just_used_death_rune, rune_cd_tracker = use_runes(
                        rune_cd_tracker, current_time, dots, improved_unholy_presence_points, dk_presence,
                        total_haste_rating, last_rune_change,
                        n_blood=0, n_frost=1, n_unholy=1, n_skip=0, n_reset_window=0)
                    if able_to_cast == 1:
                        attack_table_results = attack_table(1, tanking, H2, True, False, hit_from_gear, hit_from_other,
                                                            target_level, all_expertise_dodge, all_expertise_parry,
                                                            total_crit, standard_10k_random_value, damage_result_number,
                                                            ((annihilation_talent_points / 100) + increased_phy_crit + (
                                                                        scourgeborne_battlegear_two_set / 100) + (
                                                                         (improved_death_strikes_points * 3) / 100)))
                        armor_red_amount = dam_reduc(current_armor, armor_penetration, target_level)
                        # wep_roll = weapon_roll(mh_input_lowend_weapon_damage,mh_input_topend_weapon_damage)
                        wep_roll = mh_wep_random_value[damage_result_number]
                        damage_result_number = damage_array_updater(damage_result_number)
                        wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                        # Rune Hit
                        haste_percentage = (total_haste_rating / 25.21) / 100  # Returns a result of 0 - 1 for 0% - 100%
                        haste_rune_cd = rune_grade_timer(current_time, last_rune_change[castable],
                                                         last_rune_change[castable + 6])
                        if improved_unholy_presence_points != 0:
                            if dk_presence == 2:
                                haste_rune_cd = haste_rune_cd - (
                                            haste_rune_cd * ((improved_unholy_presence_points * 5) / 100))
                        if dk_presence != 2:
                            gcd = input_gcd / (1 + haste_percentage)
                            if gcd < 1:
                                gcd = 1
                        ##Rune Miss
                        haste_rune_cd_miss = 1
                        how_many_dots_on_target = 0
                        if dots[0] > current_time:
                            how_many_dots_on_target += 1
                        if dots[1] > current_time:
                            how_many_dots_on_target += 1
                        if dots[2] > current_time:
                            how_many_dots_on_target += 1
                        if dancing_rune_weapon_points == 1:
                            if dancing_rune_weapon_active == True:
                                if attack_table_results == 0:
                                    atta_num = 0
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Miss")
                                    rotation_damage.append(atta_num)
                                elif attack_table_results == 1:
                                    atta_num = 0
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Dodge")
                                    rotation_damage.append(atta_num)
                                elif attack_table_results == 5:
                                    # crit attack
                                    atta_num = (((223 + (wep_roll * .75))) - (
                                                ((223 + (wep_roll * .75))) * armor_red_amount)) * (var_crit_amount)
                                    if sigil_of_awareness == True:
                                        atta_num + 315
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if tundra_stalker_points != 0:
                                        if dots[0] > current_time:
                                            atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                    if rage_of_rivendale_points != 0:
                                        if dots[1] > current_time:
                                            atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                    if might_of_mograine_points != 0:
                                        atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                    if improved_death_strikes_points != 0:
                                        atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                                    if glyph_death_strike == True:
                                        if current_power > 25:
                                            death_strike_extra_damage_bonus = 25
                                        else:
                                            death_strike_extra_damage_bonus = current_power
                                        atta_num += atta_num * death_strike_extra_damage_bonus
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    atta_num = atta_num * dancing_rune_weapon_damage_multi
                                    dancing_rune_weapon_damage += atta_num
                                    trinket_hit_crit_tracker = 2
                                    if sigil_of_virulence == True:
                                        if random.randint(0, 100) < 85:
                                            sigil_of_virulence_timer = current_time + 20
                                            if sigil_of_virulence_buff == False:
                                                sigil_of_virulence_buff = True
                                                bonus_loop_str += 200
                                    if sigil_of_hanged_man == True:
                                        if random.randint(0, 100) < 101:
                                            sigil_of_hanged_man_buff = True
                                            sigil_of_hanged_man_timer = current_time + 15
                                            sigil_of_hanged_man_count += 1
                                            if sigil_of_hanged_man_count < 4:
                                                bonus_loop_str += 73
                                            elif sigil_of_hanged_man_count >= 3:
                                                sigil_of_hanged_man_count = 3
                                    if death_rune_mastery_points != 0:
                                        if just_used_death_rune != True:
                                            proc_num = random.randint(0, 100)
                                            if death_rune_mastery_points < 3:
                                                death_proc_chance = (death_rune_mastery_points * .3) * 100
                                            elif death_rune_mastery_points == 3:
                                                death_proc_chance = 100
                                            if death_proc_chance >= proc_num:
                                                death_castable_f = castable + 6
                                                death_castable_u = castable1 + 6
                                                rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                                rune_cd_tracker[castable1] = 10000
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Crit")
                                    rotation_damage.append(atta_num)
                                    trinket_hit_crit_tracker = 2

                                elif attack_table_results == 7:
                                    atta_num = (((223 + (wep_roll * .75))) - (
                                                ((223 + (wep_roll * .75))) * armor_red_amount))
                                    if sigil_of_awareness == True:
                                        atta_num + 315
                                    if dk_presence == 0:
                                        atta_num = atta_num + (atta_num * .15)
                                    if tundra_stalker_points != 0:
                                        if dots[0] > current_time:
                                            atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                    if rage_of_rivendale_points != 0:
                                        if dots[1] > current_time:
                                            atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                    if might_of_mograine_points != 0:
                                        atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                    if improved_death_strikes_points != 0:
                                        atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                                    if glyph_death_strike == True:
                                        if current_power > 25:
                                            death_strike_extra_damage_bonus = 25
                                        else:
                                            death_strike_extra_damage_bonus = current_power
                                        atta_num += atta_num * death_strike_extra_damage_bonus
                                    if hysteria_active == True:
                                        atta_num = atta_num + (atta_num * .2)
                                    if tricksoftt_active == True:
                                        atta_num = atta_num + (atta_num * .15)
                                    atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                atta_num * increased_all_damage)
                                    atta_num = atta_num * dancing_rune_weapon_damage_multi
                                    dancing_rune_weapon_damage += atta_num
                                    trinket_hit_crit_tracker = 1
                                    if sigil_of_virulence == True:
                                        if random.randint(0, 100) < 85:
                                            sigil_of_virulence_timer = current_time + 20
                                            if sigil_of_virulence_buff == False:
                                                sigil_of_virulence_buff = True
                                                bonus_loop_str += 200
                                    if sigil_of_hanged_man == True:
                                        if random.randint(0, 100) < 101:
                                            sigil_of_hanged_man_buff = True
                                            sigil_of_hanged_man_timer = current_time + 15
                                            sigil_of_hanged_man_count += 1
                                            if sigil_of_hanged_man_count < 4:
                                                bonus_loop_str += 73
                                            elif sigil_of_hanged_man_count >= 3:
                                                sigil_of_hanged_man_count = 3
                                    if death_rune_mastery_points != 0:
                                        if just_used_death_rune != True:
                                            proc_num = random.randint(0, 100)
                                            if death_rune_mastery_points < 3:
                                                death_proc_chance = (death_rune_mastery_points * .3) * 100
                                            elif death_rune_mastery_points == 3:
                                                death_proc_chance = 100
                                            if death_proc_chance >= proc_num:
                                                death_castable_f = castable + 6
                                                death_castable_u = castable1 + 6
                                                rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd, current_time)
                                                rune_cd_tracker[castable] = 10000
                                                rune_cd_tracker[castable1] = 10000
                                    rotation.append("Dancing Rune Weapon")
                                    rotation_time.append(current_time)
                                    rotation_status.append("Hit")
                                    rotation_damage.append(atta_num)
                                    trinket_hit_crit_tracker = 1

                        if threat_of_thassarian_points != 0:
                            if H2 == False:
                                threat_of_thass_roll = (threat_of_thassarian_points * 30)
                                if threat_of_thassarian_points == 3:
                                    threat_of_thass_roll += 10
                                threat_of_t_num = random.randint(0, 100)
                                if threat_of_thass_roll >= threat_of_t_num:
                                    # oh_wep_roll = weapon_roll(oh_input_lowend_weapon_damage,oh_input_topend_weapon_damage)
                                    oh_wep_roll = oh_wep_random_value[damage_result_number]
                                    damage_result_number = damage_array_updater(damage_result_number)
                                    oh_wep_roll = wep_roll + (attack_damage_normalization * current_ap / 14)
                                    oh_attack_table_results = attack_table(1, tanking, H2, False, True, hit_from_gear,
                                                                           hit_from_other, target_level,
                                                                           all_expertise_dodge, all_expertise_parry,
                                                                           total_crit, standard_10k_random_value,
                                                                           damage_result_number, ((
                                                                                                              annihilation_talent_points / 100) + increased_phy_crit + (
                                                                                                              scourgeborne_battlegear_two_set / 100) + (
                                                                                                              (
                                                                                                                          improved_death_strikes_points * 3) / 100)))
                                    if oh_attack_table_results == 0:
                                        atta_num = 0
                                        rotation.append("OH - Death Strike")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Miss")
                                        rotation_damage.append(atta_num)
                                    elif oh_attack_table_results == 1:
                                        atta_num = 0
                                        rotation.append("OH - Death Strike")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Dodge")
                                        rotation_damage.append(atta_num)
                                    elif oh_attack_table_results == 5:
                                        # crit attack
                                        atta_num = (((223 + (oh_wep_roll * .75))) - (
                                                    ((223 + (oh_wep_roll * .75))) * armor_red_amount)) * (
                                                       var_crit_amount)
                                        if sigil_of_awareness == True:
                                            atta_num + 315
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if tundra_stalker_points != 0:
                                            if dots[0] > current_time:
                                                atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                        if rage_of_rivendale_points != 0:
                                            if dots[1] > current_time:
                                                atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if improved_death_strikes_points != 0:
                                            atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                                        if glyph_death_strike == True:
                                            if current_power > 25:
                                                death_strike_extra_damage_bonus = 25
                                            else:
                                                death_strike_extra_damage_bonus = current_power
                                            atta_num += atta_num * death_strike_extra_damage_bonus
                                        atta_num = atta_num * oh_wep_damage_mod
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                    atta_num * increased_all_damage)
                                        sum_death_strike_attacks += atta_num
                                        trinket_hit_crit_tracker = 2
                                        if sigil_of_virulence == True:
                                            if random.randint(0, 100) < 85:
                                                sigil_of_virulence_timer = current_time + 20
                                                if sigil_of_virulence_buff == False:
                                                    sigil_of_virulence_buff = True
                                                    bonus_loop_str += 200
                                        if sigil_of_hanged_man == True:
                                            if random.randint(0, 100) < 101:
                                                sigil_of_hanged_man_buff = True
                                                sigil_of_hanged_man_timer = current_time + 15
                                                sigil_of_hanged_man_count += 1
                                                if sigil_of_hanged_man_count < 4:
                                                    bonus_loop_str += 73
                                                elif sigil_of_hanged_man_count >= 3:
                                                    sigil_of_hanged_man_count = 3
                                        if death_rune_mastery_points != 0:
                                            if just_used_death_rune != True:
                                                proc_num = random.randint(0, 100)
                                                if death_rune_mastery_points < 3:
                                                    death_proc_chance = (death_rune_mastery_points * .3) * 100
                                                elif death_rune_mastery_points == 3:
                                                    death_proc_chance = 100
                                                if death_proc_chance >= proc_num:
                                                    death_castable_f = castable + 6
                                                    death_castable_u = castable1 + 6
                                                    rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd,
                                                                                                current_time)
                                                    rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd,
                                                                                                current_time)
                                                    rune_cd_tracker[castable] = 10000
                                                    rune_cd_tracker[castable1] = 10000
                                        rotation.append("OH - Death Strike")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Crit")
                                        rotation_damage.append(atta_num)


                                    elif oh_attack_table_results == 7:
                                        atta_num = (((223 + (oh_wep_roll * .75))) - (
                                                    ((223 + (oh_wep_roll * .75))) * armor_red_amount))
                                        if sigil_of_awareness == True:
                                            atta_num + 315
                                        if dk_presence == 0:
                                            atta_num = atta_num + (atta_num * .15)
                                        if tundra_stalker_points != 0:
                                            if dots[0] > current_time:
                                                atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                                        if rage_of_rivendale_points != 0:
                                            if dots[1] > current_time:
                                                atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                                        if might_of_mograine_points != 0:
                                            atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                                        if improved_death_strikes_points != 0:
                                            atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                                        if glyph_death_strike == True:
                                            if current_power > 25:
                                                death_strike_extra_damage_bonus = 25
                                            else:
                                                death_strike_extra_damage_bonus = current_power
                                            atta_num += atta_num * death_strike_extra_damage_bonus
                                        atta_num = atta_num * oh_wep_damage_mod
                                        if hysteria_active == True:
                                            atta_num = atta_num + (atta_num * .2)
                                        if tricksoftt_active == True:
                                            atta_num = atta_num + (atta_num * .15)
                                        atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                                    atta_num * increased_all_damage)
                                        sum_death_strike_attacks += atta_num
                                        trinket_hit_crit_tracker = 1
                                        if sigil_of_virulence == True:
                                            if random.randint(0, 100) < 85:
                                                sigil_of_virulence_timer = current_time + 20
                                                if sigil_of_virulence_buff == False:
                                                    sigil_of_virulence_buff = True
                                                    bonus_loop_str += 200
                                        if sigil_of_hanged_man == True:
                                            if random.randint(0, 100) < 101:
                                                sigil_of_hanged_man_buff = True
                                                sigil_of_hanged_man_timer = current_time + 15
                                                sigil_of_hanged_man_count += 1
                                                if sigil_of_hanged_man_count < 4:
                                                    bonus_loop_str += 73
                                                elif sigil_of_hanged_man_count >= 3:
                                                    sigil_of_hanged_man_count = 3
                                        if death_rune_mastery_points != 0:
                                            if just_used_death_rune != True:
                                                proc_num = random.randint(0, 100)
                                                if death_rune_mastery_points < 3:
                                                    death_proc_chance = (death_rune_mastery_points * .3) * 100
                                                elif death_rune_mastery_points == 3:
                                                    death_proc_chance = 100
                                                if death_proc_chance >= proc_num:
                                                    death_castable_f = castable + 6
                                                    death_castable_u = castable1 + 6
                                                    rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd,
                                                                                                current_time)
                                                    rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd,
                                                                                                current_time)
                                                    rune_cd_tracker[castable] = 10000
                                                    rune_cd_tracker[castable1] = 10000
                                        rotation.append("OH - Death Strike")
                                        rotation_time.append(current_time)
                                        rotation_status.append("Hit")
                                        rotation_damage.append(atta_num)

                        if attack_table_results == 0:
                            atta_num = 0
                            rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                            rune_cd_tracker[castable1] = rune_cd(haste_rune_cd_miss, current_time)
                            rotation.append("Death Strike")
                            rotation_time.append(current_time)
                            rotation_status.append("Miss")
                            rotation_damage.append(atta_num)
                            current_time = current_time + gcd
                            used_gcd = True
                            continue
                        elif attack_table_results == 1:
                            atta_num = 0
                            rune_cd_tracker[castable] = rune_cd(haste_rune_cd_miss, current_time)
                            rune_cd_tracker[castable1] = rune_cd(haste_rune_cd_miss, current_time)
                            rotation.append("Death Strike")
                            rotation_time.append(current_time)
                            rotation_status.append("Dodge")
                            rotation_damage.append(atta_num)
                            current_time = current_time + gcd
                            used_gcd = True
                            continue
                        elif attack_table_results == 5:
                            # crit attack
                            rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                            rune_cd_tracker[castable1] = rune_cd(haste_rune_cd, current_time)
                            atta_num = (((223 + (wep_roll * .75))) - (
                                        ((223 + (wep_roll * .75))) * armor_red_amount)) * (var_crit_amount)
                            if sigil_of_awareness == True:
                                atta_num + 315
                            if dk_presence == 0:
                                atta_num = atta_num + (atta_num * .15)
                            if tundra_stalker_points != 0:
                                if dots[0] > current_time:
                                    atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                            if rage_of_rivendale_points != 0:
                                if dots[1] > current_time:
                                    atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                            if might_of_mograine_points != 0:
                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                            if improved_death_strikes_points != 0:
                                atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                            if glyph_death_strike == True:
                                if current_power > 25:
                                    death_strike_extra_damage_bonus = 25
                                else:
                                    death_strike_extra_damage_bonus = current_power
                                atta_num += atta_num * death_strike_extra_damage_bonus
                            if hysteria_active == True:
                                atta_num = atta_num + (atta_num * .2)
                            if tricksoftt_active == True:
                                atta_num = atta_num + (atta_num * .15)
                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                        atta_num * increased_all_damage)
                            sum_death_strike_attacks += atta_num
                            current_power = runic_power(15, current_power, max_runic)
                            if dirge_points != 0:
                                current_power = runic_power((dirge_points * 2.5), current_power, max_runic)
                            if scourgeborne_battlegear_four_set == True:
                                current_power = runic_power(5, current_power, max_runic)
                            trinket_hit_crit_tracker = 2
                            if sigil_of_virulence == True:
                                if random.randint(0, 100) < 85:
                                    sigil_of_virulence_timer = current_time + 20
                                    if sigil_of_virulence_buff == False:
                                        sigil_of_virulence_buff = True
                                        bonus_loop_str += 200
                            if sigil_of_hanged_man == True:
                                if random.randint(0, 100) < 101:
                                    sigil_of_hanged_man_buff = True
                                    sigil_of_hanged_man_timer = current_time + 15
                                    sigil_of_hanged_man_count += 1
                                    if sigil_of_hanged_man_count < 4:
                                        bonus_loop_str += 73
                                    elif sigil_of_hanged_man_count >= 3:
                                        sigil_of_hanged_man_count = 3
                            if death_rune_mastery_points != 0:
                                if just_used_death_rune != True:
                                    proc_num = random.randint(0, 100)
                                    if death_rune_mastery_points < 3:
                                        death_proc_chance = (death_rune_mastery_points * .3) * 100
                                    elif death_rune_mastery_points == 3:
                                        death_proc_chance = 100
                                    if death_proc_chance >= proc_num:
                                        death_castable_f = castable + 6
                                        death_castable_u = castable1 + 6
                                        rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd, current_time)
                                        rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd, current_time)
                                        rune_cd_tracker[castable] = 10000
                                        rune_cd_tracker[castable1] = 10000
                            rotation.append("Death Strike")
                            rotation_time.append(current_time)
                            rotation_status.append("Crit")
                            rotation_damage.append(atta_num)
                            current_time += gcd
                            used_gcd = True
                            # print("Obliterate Crit - " + str(atta_num))
                            continue
                        elif attack_table_results == 7:
                            rune_cd_tracker[castable] = rune_cd(haste_rune_cd, current_time)
                            rune_cd_tracker[castable1] = rune_cd(haste_rune_cd, current_time)
                            atta_num = (((223 + (wep_roll * .75))) - (((223 + (wep_roll * .75))) * armor_red_amount))
                            if sigil_of_awareness == True:
                                atta_num + 315
                            if dk_presence == 0:
                                atta_num = atta_num + (atta_num * .15)
                            if tundra_stalker_points != 0:
                                if dots[0] > current_time:
                                    atta_num = atta_num + (atta_num * (tundra_stalker_points * .03))
                            if rage_of_rivendale_points != 0:
                                if dots[1] > current_time:
                                    atta_num += atta_num * ((rage_of_rivendale_points * 2) / 100)
                            if might_of_mograine_points != 0:
                                atta_num += atta_num * ((might_of_mograine_points * 15) / 100)
                            if improved_death_strikes_points != 0:
                                atta_num += atta_num * ((improved_death_strikes_points * 15) / 100)
                            if glyph_death_strike == True:
                                if current_power > 25:
                                    death_strike_extra_damage_bonus = 25
                                else:
                                    death_strike_extra_damage_bonus = current_power
                                atta_num += atta_num * death_strike_extra_damage_bonus
                            if hysteria_active == True:
                                atta_num = atta_num + (atta_num * .2)
                            if tricksoftt_active == True:
                                atta_num = atta_num + (atta_num * .15)
                            atta_num = atta_num + (atta_num * increased_physical_damage) + (
                                        atta_num * increased_all_damage)
                            sum_death_strike_attacks += atta_num
                            current_power = runic_power(15, current_power, max_runic)
                            if dirge_points != 0:
                                current_power = runic_power((dirge_points * 2.5), current_power, max_runic)
                            if scourgeborne_battlegear_four_set == True:
                                current_power = runic_power(5, current_power, max_runic)
                            trinket_hit_crit_tracker = 1
                            if sigil_of_virulence == True:
                                if random.randint(0, 100) < 85:
                                    sigil_of_virulence_timer = current_time + 20
                                    if sigil_of_virulence_buff == False:
                                        sigil_of_virulence_buff = True
                                        bonus_loop_str += 200
                            if sigil_of_hanged_man == True:
                                if random.randint(0, 100) < 101:
                                    sigil_of_hanged_man_buff = True
                                    sigil_of_hanged_man_timer = current_time + 15
                                    sigil_of_hanged_man_count += 1
                                    if sigil_of_hanged_man_count < 4:
                                        bonus_loop_str += 73
                                    elif sigil_of_hanged_man_count >= 3:
                                        sigil_of_hanged_man_count = 3
                            if death_rune_mastery_points != 0:
                                if just_used_death_rune != True:
                                    proc_num = random.randint(0, 100)
                                    if death_rune_mastery_points < 3:
                                        death_proc_chance = (death_rune_mastery_points * .3) * 100
                                    elif death_rune_mastery_points == 3:
                                        death_proc_chance = 100
                                    if death_proc_chance >= proc_num:
                                        death_castable_f = castable + 6
                                        death_castable_u = castable1 + 6
                                        rune_cd_tracker[death_castable_f] = rune_cd(haste_rune_cd, current_time)
                                        rune_cd_tracker[death_castable_u] = rune_cd(haste_rune_cd, current_time)
                                        rune_cd_tracker[castable] = 10000
                                        rune_cd_tracker[castable1] = 10000
                            rotation.append("Death Strike")
                            rotation_time.append(current_time)
                            rotation_status.append("Hit")
                            rotation_damage.append(atta_num)
                            current_time += gcd
                            used_gcd = True
                            # print("Obliterate - " + str(atta_num))
                            continue

                    if current_power >= death_coil_cost:  # Death Coil
                        rotation_a, rotation_time_a, rotation_status_a, rotation_damage_a, current_time, used_gcd, rune_cd_tracker, \
                            current_power, rune_of_cinderglacier_active, rune_of_cinderglacier_active_count, dots, sum_pest_attacks, gcd, \
                            rune_of_cinderglacier_damage, multiple_adds_timer, unholy_blight_amount, unholy_blight_timer, death_coil_damage, damage_result_number = death_coil_cast(
                            spell_hit_total, increased_spell_hit, target_level, total_crit, increased_spell_crit,
                            current_time, death_coil_cost, darkruned_battlegear_two_set, unholy_blight_amount,
                            unholy_blight_timer,
                            dk_presence, input_gcd, rune_cd_tracker, dots, multiple_adds_timer, haste_percentage,
                            current_ap, impurity_points, sigil_of_vengeful_heart, death_coil_damage,
                            var_crit_amount, black_ice_points, tundra_stalker_points, rage_of_rivendale_points,
                            hysteria_active, tricksoftt_active, increased_spell_damage,
                            increased_all_damage, sum_pest_attacks, current_power, max_runic, sigil_of_the_wild_buck,
                            glyph_death_coil, morbitity_points, unholy_blight_points,
                            rune_of_cinderglacier_active, rune_of_cinderglacier_active_count,
                            rune_of_cinderglacier_damage, standard_10k_random_value, damage_result_number,
                            death_coil_random_value, free_dc=False)
                        if last_sim_run == True:
                            rotation.extend(rotation_a)
                            rotation_time.extend(rotation_time_a)
                            rotation_status.extend(rotation_status_a)
                            rotation_damage.extend(rotation_damage_a)
                        continue

            if how_cd < current_time:
                if last_sim_run == True:
                    rotation.append("Horn of Winter")
                    rotation_time.append(current_time)
                    rotation_status.append("Active")
                    rotation_damage.append(0)
                how_cd = current_time + 20
                current_power = runic_power(10, current_power, max_runic)
                current_time += gcd
                used_gcd = True
                continue
            current_time += unable_to_do_anything
        ##stuff after this is resettings and appending stuff to lists so can go to next iteration
        #####
        ###
        mh_attacks_so_far = 0
        oh_attacks_so_far = 0
        trinket1_damage_list.append(trinket1_damage)
        trinket2_damage_list.append(trinket2_damage)
        army_damage_list.append(army_damage)
        army_damage_claw_list.append(army_damage_claw)
        ghoul_damage_list.append(ghoul_damage)
        ghoul_damage_claw_list.append(ghoul_damage_claw)
        garg_damage_list.append(garg_damage)
        sum_heart_strike_attacks_list.append(sum_heart_strike_attacks)
        sum_death_strike_attacks_list.append(sum_death_strike_attacks)
        sum_scourge_strikes_attacks_list.append(sum_scourge_strikes_attacks)
        death_coil_damage_list.append(death_coil_damage)
        death_and_decay_damage_list.append(death_and_decay_damage)
        blood_boil_damage_list.append(blood_boil_damage)
        unholy_blight_damage_list.append(unholy_blight_damage)
        sudden_doom_damage_list.append(sudden_doom_damage)
        dancing_rune_weapon_damage_list.append(dancing_rune_weapon_damage)
        necrosis_damage_list.append(necrosis_damage)
        wandering_plague_damage_list.append(wandering_plague_damage)
        bloodcaked_blades_damage_list.append(bloodcaked_blades_damage)
        rune_of_cinderglacier_damage_list.append(rune_of_cinderglacier_damage)
        rune_of_lichbane_damage_list.append(rune_of_lichbane_damage)
        rune_of_razorice_damage_list.append(rune_of_razorice_damage)
        sum_oh_obil_attacks_list.append(sum_oh_obil_attacks)
        sum_oh_ps_attacks_list.append(sum_oh_ps_attacks)
        sum_oh_bs_attacks_list.append(sum_oh_bs_attacks)
        sum_oh_fs_attacks_list.append(sum_oh_fs_attacks)
        sum_ps_attacks_list.append(sum_ps_attacks)
        sum_it_attacks_list.append(sum_it_attacks)
        sum_dot0_damage_list.append(sum_dot0_damage)
        sum_dot1_damage_list.append(sum_dot1_damage)
        sum_pest_attacks_list.append(sum_pest_attacks)
        sum_obil_attacks_list.append(sum_obil_attacks)
        sum_bs_attacks_list.append(sum_bs_attacks)
        sum_fs_attacks_list.append(sum_fs_attacks)
        sum_hb_attacks_list.append(sum_hb_attacks)
        sum_mh_white_attacks_list.append(sum_mh_white_attacks)
        sum_oh_white_attacks_list.append(sum_oh_white_attacks)
        t_damage = sum_mh_white_attacks + sum_oh_white_attacks + sum_ps_attacks + sum_it_attacks + sum_dot0_damage + sum_dot1_damage + sum_pest_attacks + sum_obil_attacks + sum_bs_attacks + sum_fs_attacks + sum_hb_attacks + sum_oh_obil_attacks + sum_oh_ps_attacks + sum_oh_bs_attacks + sum_oh_fs_attacks + rune_of_razorice_damage + rune_of_lichbane_damage + rune_of_cinderglacier_damage + trinket1_damage + trinket2_damage + bloodcaked_blades_damage + wandering_plague_damage + necrosis_damage + dancing_rune_weapon_damage + sudden_doom_damage + unholy_blight_damage + blood_boil_damage + death_and_decay_damage + death_coil_damage + sum_scourge_strikes_attacks + sum_death_strike_attacks + sum_heart_strike_attacks + garg_damage + ghoul_damage + ghoul_damage_claw + army_damage + army_damage_claw
        sum_damage_list.append(t_damage)
        sum_dps_list.append((t_damage) / fight_length)
        current_sim_number += 1
    return sum_dps_list, t_damage, fight_length, rotation, rotation_time, rotation_damage, rotation_status, rune_0_tracker, rune_1_tracker, rune_2_tracker, rune_3_tracker, rune_4_tracker, rune_5_tracker, rune_6_tracker, rune_7_tracker, rune_8_tracker, rune_9_tracker, rune_10_tracker, rune_11_tracker, rune_time_tracker, runic_power_tracker, hit_from_other